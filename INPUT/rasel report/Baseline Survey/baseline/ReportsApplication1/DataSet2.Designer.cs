//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ReportsApplication1 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet2 : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private Table1DataTable tableTable1;
        
        private Table_3DataTable tableTable_3;
        
        private Table6DataTable tableTable6;
        
        private Table7DataTable tableTable7;
        
        private Table8DataTable tableTable8;
        
        private Table9DataTable tableTable9;
        
        private Table12DataTable tableTable12;
        
        private Table13DataTable tableTable13;
        
        private Table13ADataTable tableTable13A;
        
        private Table13BDataTable tableTable13B;
        
        private Table14CowDataTable tableTable14Cow;
        
        private Table14GoatDataTable tableTable14Goat;
        
        private Table14HenDataTable tableTable14Hen;
        
        private Table15DataTable tableTable15;
        
        private Table16DataTable tableTable16;
        
        private Table17DataTable tableTable17;
        
        private Table20DataTable tableTable20;
        
        private Table11DataTable tableTable11;
        
        private Table11ADataTable tableTable11A;
        
        private Table11BDataTable tableTable11B;
        
        private Table10DataTable tableTable10;
        
        private Table21DataTable tableTable21;
        
        private Table18DataTable tableTable18;
        
        private Table18ADataTable tableTable18A;
        
        private Table18BDataTable tableTable18B;
        
        private Table18DDataTable tableTable18D;
        
        private Table18CDataTable tableTable18C;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table 3"] != null)) {
                    base.Tables.Add(new Table_3DataTable(ds.Tables["Table 3"]));
                }
                if ((ds.Tables["Table6"] != null)) {
                    base.Tables.Add(new Table6DataTable(ds.Tables["Table6"]));
                }
                if ((ds.Tables["Table7"] != null)) {
                    base.Tables.Add(new Table7DataTable(ds.Tables["Table7"]));
                }
                if ((ds.Tables["Table8"] != null)) {
                    base.Tables.Add(new Table8DataTable(ds.Tables["Table8"]));
                }
                if ((ds.Tables["Table9"] != null)) {
                    base.Tables.Add(new Table9DataTable(ds.Tables["Table9"]));
                }
                if ((ds.Tables["Table12"] != null)) {
                    base.Tables.Add(new Table12DataTable(ds.Tables["Table12"]));
                }
                if ((ds.Tables["Table13"] != null)) {
                    base.Tables.Add(new Table13DataTable(ds.Tables["Table13"]));
                }
                if ((ds.Tables["Table13A"] != null)) {
                    base.Tables.Add(new Table13ADataTable(ds.Tables["Table13A"]));
                }
                if ((ds.Tables["Table13B"] != null)) {
                    base.Tables.Add(new Table13BDataTable(ds.Tables["Table13B"]));
                }
                if ((ds.Tables["Table14Cow"] != null)) {
                    base.Tables.Add(new Table14CowDataTable(ds.Tables["Table14Cow"]));
                }
                if ((ds.Tables["Table14Goat"] != null)) {
                    base.Tables.Add(new Table14GoatDataTable(ds.Tables["Table14Goat"]));
                }
                if ((ds.Tables["Table14Hen"] != null)) {
                    base.Tables.Add(new Table14HenDataTable(ds.Tables["Table14Hen"]));
                }
                if ((ds.Tables["Table15"] != null)) {
                    base.Tables.Add(new Table15DataTable(ds.Tables["Table15"]));
                }
                if ((ds.Tables["Table16"] != null)) {
                    base.Tables.Add(new Table16DataTable(ds.Tables["Table16"]));
                }
                if ((ds.Tables["Table17"] != null)) {
                    base.Tables.Add(new Table17DataTable(ds.Tables["Table17"]));
                }
                if ((ds.Tables["Table20"] != null)) {
                    base.Tables.Add(new Table20DataTable(ds.Tables["Table20"]));
                }
                if ((ds.Tables["Table11"] != null)) {
                    base.Tables.Add(new Table11DataTable(ds.Tables["Table11"]));
                }
                if ((ds.Tables["Table11A"] != null)) {
                    base.Tables.Add(new Table11ADataTable(ds.Tables["Table11A"]));
                }
                if ((ds.Tables["Table11B"] != null)) {
                    base.Tables.Add(new Table11BDataTable(ds.Tables["Table11B"]));
                }
                if ((ds.Tables["Table10"] != null)) {
                    base.Tables.Add(new Table10DataTable(ds.Tables["Table10"]));
                }
                if ((ds.Tables["Table21"] != null)) {
                    base.Tables.Add(new Table21DataTable(ds.Tables["Table21"]));
                }
                if ((ds.Tables["Table18"] != null)) {
                    base.Tables.Add(new Table18DataTable(ds.Tables["Table18"]));
                }
                if ((ds.Tables["Table18A"] != null)) {
                    base.Tables.Add(new Table18ADataTable(ds.Tables["Table18A"]));
                }
                if ((ds.Tables["Table18B"] != null)) {
                    base.Tables.Add(new Table18BDataTable(ds.Tables["Table18B"]));
                }
                if ((ds.Tables["Table18D"] != null)) {
                    base.Tables.Add(new Table18DDataTable(ds.Tables["Table18D"]));
                }
                if ((ds.Tables["Table18C"] != null)) {
                    base.Tables.Add(new Table18CDataTable(ds.Tables["Table18C"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table1DataTable Table1 {
            get {
                return this.tableTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table_3DataTable Table_3 {
            get {
                return this.tableTable_3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table6DataTable Table6 {
            get {
                return this.tableTable6;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table7DataTable Table7 {
            get {
                return this.tableTable7;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table8DataTable Table8 {
            get {
                return this.tableTable8;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table9DataTable Table9 {
            get {
                return this.tableTable9;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table12DataTable Table12 {
            get {
                return this.tableTable12;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table13DataTable Table13 {
            get {
                return this.tableTable13;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table13ADataTable Table13A {
            get {
                return this.tableTable13A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table13BDataTable Table13B {
            get {
                return this.tableTable13B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table14CowDataTable Table14Cow {
            get {
                return this.tableTable14Cow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table14GoatDataTable Table14Goat {
            get {
                return this.tableTable14Goat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table14HenDataTable Table14Hen {
            get {
                return this.tableTable14Hen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table15DataTable Table15 {
            get {
                return this.tableTable15;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table16DataTable Table16 {
            get {
                return this.tableTable16;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table17DataTable Table17 {
            get {
                return this.tableTable17;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table20DataTable Table20 {
            get {
                return this.tableTable20;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table11DataTable Table11 {
            get {
                return this.tableTable11;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table11ADataTable Table11A {
            get {
                return this.tableTable11A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table11BDataTable Table11B {
            get {
                return this.tableTable11B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table10DataTable Table10 {
            get {
                return this.tableTable10;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table21DataTable Table21 {
            get {
                return this.tableTable21;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table18DataTable Table18 {
            get {
                return this.tableTable18;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table18ADataTable Table18A {
            get {
                return this.tableTable18A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table18BDataTable Table18B {
            get {
                return this.tableTable18B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table18DDataTable Table18D {
            get {
                return this.tableTable18D;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table18CDataTable Table18C {
            get {
                return this.tableTable18C;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table 3"] != null)) {
                    base.Tables.Add(new Table_3DataTable(ds.Tables["Table 3"]));
                }
                if ((ds.Tables["Table6"] != null)) {
                    base.Tables.Add(new Table6DataTable(ds.Tables["Table6"]));
                }
                if ((ds.Tables["Table7"] != null)) {
                    base.Tables.Add(new Table7DataTable(ds.Tables["Table7"]));
                }
                if ((ds.Tables["Table8"] != null)) {
                    base.Tables.Add(new Table8DataTable(ds.Tables["Table8"]));
                }
                if ((ds.Tables["Table9"] != null)) {
                    base.Tables.Add(new Table9DataTable(ds.Tables["Table9"]));
                }
                if ((ds.Tables["Table12"] != null)) {
                    base.Tables.Add(new Table12DataTable(ds.Tables["Table12"]));
                }
                if ((ds.Tables["Table13"] != null)) {
                    base.Tables.Add(new Table13DataTable(ds.Tables["Table13"]));
                }
                if ((ds.Tables["Table13A"] != null)) {
                    base.Tables.Add(new Table13ADataTable(ds.Tables["Table13A"]));
                }
                if ((ds.Tables["Table13B"] != null)) {
                    base.Tables.Add(new Table13BDataTable(ds.Tables["Table13B"]));
                }
                if ((ds.Tables["Table14Cow"] != null)) {
                    base.Tables.Add(new Table14CowDataTable(ds.Tables["Table14Cow"]));
                }
                if ((ds.Tables["Table14Goat"] != null)) {
                    base.Tables.Add(new Table14GoatDataTable(ds.Tables["Table14Goat"]));
                }
                if ((ds.Tables["Table14Hen"] != null)) {
                    base.Tables.Add(new Table14HenDataTable(ds.Tables["Table14Hen"]));
                }
                if ((ds.Tables["Table15"] != null)) {
                    base.Tables.Add(new Table15DataTable(ds.Tables["Table15"]));
                }
                if ((ds.Tables["Table16"] != null)) {
                    base.Tables.Add(new Table16DataTable(ds.Tables["Table16"]));
                }
                if ((ds.Tables["Table17"] != null)) {
                    base.Tables.Add(new Table17DataTable(ds.Tables["Table17"]));
                }
                if ((ds.Tables["Table20"] != null)) {
                    base.Tables.Add(new Table20DataTable(ds.Tables["Table20"]));
                }
                if ((ds.Tables["Table11"] != null)) {
                    base.Tables.Add(new Table11DataTable(ds.Tables["Table11"]));
                }
                if ((ds.Tables["Table11A"] != null)) {
                    base.Tables.Add(new Table11ADataTable(ds.Tables["Table11A"]));
                }
                if ((ds.Tables["Table11B"] != null)) {
                    base.Tables.Add(new Table11BDataTable(ds.Tables["Table11B"]));
                }
                if ((ds.Tables["Table10"] != null)) {
                    base.Tables.Add(new Table10DataTable(ds.Tables["Table10"]));
                }
                if ((ds.Tables["Table21"] != null)) {
                    base.Tables.Add(new Table21DataTable(ds.Tables["Table21"]));
                }
                if ((ds.Tables["Table18"] != null)) {
                    base.Tables.Add(new Table18DataTable(ds.Tables["Table18"]));
                }
                if ((ds.Tables["Table18A"] != null)) {
                    base.Tables.Add(new Table18ADataTable(ds.Tables["Table18A"]));
                }
                if ((ds.Tables["Table18B"] != null)) {
                    base.Tables.Add(new Table18BDataTable(ds.Tables["Table18B"]));
                }
                if ((ds.Tables["Table18D"] != null)) {
                    base.Tables.Add(new Table18DDataTable(ds.Tables["Table18D"]));
                }
                if ((ds.Tables["Table18C"] != null)) {
                    base.Tables.Add(new Table18CDataTable(ds.Tables["Table18C"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableTable1 = ((Table1DataTable)(base.Tables["Table1"]));
            if ((initTable == true)) {
                if ((this.tableTable1 != null)) {
                    this.tableTable1.InitVars();
                }
            }
            this.tableTable_3 = ((Table_3DataTable)(base.Tables["Table 3"]));
            if ((initTable == true)) {
                if ((this.tableTable_3 != null)) {
                    this.tableTable_3.InitVars();
                }
            }
            this.tableTable6 = ((Table6DataTable)(base.Tables["Table6"]));
            if ((initTable == true)) {
                if ((this.tableTable6 != null)) {
                    this.tableTable6.InitVars();
                }
            }
            this.tableTable7 = ((Table7DataTable)(base.Tables["Table7"]));
            if ((initTable == true)) {
                if ((this.tableTable7 != null)) {
                    this.tableTable7.InitVars();
                }
            }
            this.tableTable8 = ((Table8DataTable)(base.Tables["Table8"]));
            if ((initTable == true)) {
                if ((this.tableTable8 != null)) {
                    this.tableTable8.InitVars();
                }
            }
            this.tableTable9 = ((Table9DataTable)(base.Tables["Table9"]));
            if ((initTable == true)) {
                if ((this.tableTable9 != null)) {
                    this.tableTable9.InitVars();
                }
            }
            this.tableTable12 = ((Table12DataTable)(base.Tables["Table12"]));
            if ((initTable == true)) {
                if ((this.tableTable12 != null)) {
                    this.tableTable12.InitVars();
                }
            }
            this.tableTable13 = ((Table13DataTable)(base.Tables["Table13"]));
            if ((initTable == true)) {
                if ((this.tableTable13 != null)) {
                    this.tableTable13.InitVars();
                }
            }
            this.tableTable13A = ((Table13ADataTable)(base.Tables["Table13A"]));
            if ((initTable == true)) {
                if ((this.tableTable13A != null)) {
                    this.tableTable13A.InitVars();
                }
            }
            this.tableTable13B = ((Table13BDataTable)(base.Tables["Table13B"]));
            if ((initTable == true)) {
                if ((this.tableTable13B != null)) {
                    this.tableTable13B.InitVars();
                }
            }
            this.tableTable14Cow = ((Table14CowDataTable)(base.Tables["Table14Cow"]));
            if ((initTable == true)) {
                if ((this.tableTable14Cow != null)) {
                    this.tableTable14Cow.InitVars();
                }
            }
            this.tableTable14Goat = ((Table14GoatDataTable)(base.Tables["Table14Goat"]));
            if ((initTable == true)) {
                if ((this.tableTable14Goat != null)) {
                    this.tableTable14Goat.InitVars();
                }
            }
            this.tableTable14Hen = ((Table14HenDataTable)(base.Tables["Table14Hen"]));
            if ((initTable == true)) {
                if ((this.tableTable14Hen != null)) {
                    this.tableTable14Hen.InitVars();
                }
            }
            this.tableTable15 = ((Table15DataTable)(base.Tables["Table15"]));
            if ((initTable == true)) {
                if ((this.tableTable15 != null)) {
                    this.tableTable15.InitVars();
                }
            }
            this.tableTable16 = ((Table16DataTable)(base.Tables["Table16"]));
            if ((initTable == true)) {
                if ((this.tableTable16 != null)) {
                    this.tableTable16.InitVars();
                }
            }
            this.tableTable17 = ((Table17DataTable)(base.Tables["Table17"]));
            if ((initTable == true)) {
                if ((this.tableTable17 != null)) {
                    this.tableTable17.InitVars();
                }
            }
            this.tableTable20 = ((Table20DataTable)(base.Tables["Table20"]));
            if ((initTable == true)) {
                if ((this.tableTable20 != null)) {
                    this.tableTable20.InitVars();
                }
            }
            this.tableTable11 = ((Table11DataTable)(base.Tables["Table11"]));
            if ((initTable == true)) {
                if ((this.tableTable11 != null)) {
                    this.tableTable11.InitVars();
                }
            }
            this.tableTable11A = ((Table11ADataTable)(base.Tables["Table11A"]));
            if ((initTable == true)) {
                if ((this.tableTable11A != null)) {
                    this.tableTable11A.InitVars();
                }
            }
            this.tableTable11B = ((Table11BDataTable)(base.Tables["Table11B"]));
            if ((initTable == true)) {
                if ((this.tableTable11B != null)) {
                    this.tableTable11B.InitVars();
                }
            }
            this.tableTable10 = ((Table10DataTable)(base.Tables["Table10"]));
            if ((initTable == true)) {
                if ((this.tableTable10 != null)) {
                    this.tableTable10.InitVars();
                }
            }
            this.tableTable21 = ((Table21DataTable)(base.Tables["Table21"]));
            if ((initTable == true)) {
                if ((this.tableTable21 != null)) {
                    this.tableTable21.InitVars();
                }
            }
            this.tableTable18 = ((Table18DataTable)(base.Tables["Table18"]));
            if ((initTable == true)) {
                if ((this.tableTable18 != null)) {
                    this.tableTable18.InitVars();
                }
            }
            this.tableTable18A = ((Table18ADataTable)(base.Tables["Table18A"]));
            if ((initTable == true)) {
                if ((this.tableTable18A != null)) {
                    this.tableTable18A.InitVars();
                }
            }
            this.tableTable18B = ((Table18BDataTable)(base.Tables["Table18B"]));
            if ((initTable == true)) {
                if ((this.tableTable18B != null)) {
                    this.tableTable18B.InitVars();
                }
            }
            this.tableTable18D = ((Table18DDataTable)(base.Tables["Table18D"]));
            if ((initTable == true)) {
                if ((this.tableTable18D != null)) {
                    this.tableTable18D.InitVars();
                }
            }
            this.tableTable18C = ((Table18CDataTable)(base.Tables["Table18C"]));
            if ((initTable == true)) {
                if ((this.tableTable18C != null)) {
                    this.tableTable18C.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableTable1 = new Table1DataTable();
            base.Tables.Add(this.tableTable1);
            this.tableTable_3 = new Table_3DataTable();
            base.Tables.Add(this.tableTable_3);
            this.tableTable6 = new Table6DataTable();
            base.Tables.Add(this.tableTable6);
            this.tableTable7 = new Table7DataTable();
            base.Tables.Add(this.tableTable7);
            this.tableTable8 = new Table8DataTable();
            base.Tables.Add(this.tableTable8);
            this.tableTable9 = new Table9DataTable();
            base.Tables.Add(this.tableTable9);
            this.tableTable12 = new Table12DataTable();
            base.Tables.Add(this.tableTable12);
            this.tableTable13 = new Table13DataTable();
            base.Tables.Add(this.tableTable13);
            this.tableTable13A = new Table13ADataTable();
            base.Tables.Add(this.tableTable13A);
            this.tableTable13B = new Table13BDataTable();
            base.Tables.Add(this.tableTable13B);
            this.tableTable14Cow = new Table14CowDataTable();
            base.Tables.Add(this.tableTable14Cow);
            this.tableTable14Goat = new Table14GoatDataTable();
            base.Tables.Add(this.tableTable14Goat);
            this.tableTable14Hen = new Table14HenDataTable();
            base.Tables.Add(this.tableTable14Hen);
            this.tableTable15 = new Table15DataTable();
            base.Tables.Add(this.tableTable15);
            this.tableTable16 = new Table16DataTable();
            base.Tables.Add(this.tableTable16);
            this.tableTable17 = new Table17DataTable();
            base.Tables.Add(this.tableTable17);
            this.tableTable20 = new Table20DataTable();
            base.Tables.Add(this.tableTable20);
            this.tableTable11 = new Table11DataTable();
            base.Tables.Add(this.tableTable11);
            this.tableTable11A = new Table11ADataTable();
            base.Tables.Add(this.tableTable11A);
            this.tableTable11B = new Table11BDataTable();
            base.Tables.Add(this.tableTable11B);
            this.tableTable10 = new Table10DataTable();
            base.Tables.Add(this.tableTable10);
            this.tableTable21 = new Table21DataTable();
            base.Tables.Add(this.tableTable21);
            this.tableTable18 = new Table18DataTable();
            base.Tables.Add(this.tableTable18);
            this.tableTable18A = new Table18ADataTable();
            base.Tables.Add(this.tableTable18A);
            this.tableTable18B = new Table18BDataTable();
            base.Tables.Add(this.tableTable18B);
            this.tableTable18D = new Table18DDataTable();
            base.Tables.Add(this.tableTable18D);
            this.tableTable18C = new Table18CDataTable();
            base.Tables.Add(this.tableTable18C);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable_3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable6() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable7() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable8() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable9() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable12() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable13() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable13A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable13B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable14Cow() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable14Goat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable14Hen() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable15() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable16() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable17() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable20() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable11() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable11A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable11B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable10() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable21() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable18() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable18A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable18B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable18D() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable18C() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet2 ds = new DataSet2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        public delegate void Table1RowChangeEventHandler(object sender, Table1RowChangeEvent e);
        
        public delegate void Table_3RowChangeEventHandler(object sender, Table_3RowChangeEvent e);
        
        public delegate void Table6RowChangeEventHandler(object sender, Table6RowChangeEvent e);
        
        public delegate void Table7RowChangeEventHandler(object sender, Table7RowChangeEvent e);
        
        public delegate void Table8RowChangeEventHandler(object sender, Table8RowChangeEvent e);
        
        public delegate void Table9RowChangeEventHandler(object sender, Table9RowChangeEvent e);
        
        public delegate void Table12RowChangeEventHandler(object sender, Table12RowChangeEvent e);
        
        public delegate void Table13RowChangeEventHandler(object sender, Table13RowChangeEvent e);
        
        public delegate void Table13ARowChangeEventHandler(object sender, Table13ARowChangeEvent e);
        
        public delegate void Table13BRowChangeEventHandler(object sender, Table13BRowChangeEvent e);
        
        public delegate void Table14CowRowChangeEventHandler(object sender, Table14CowRowChangeEvent e);
        
        public delegate void Table14GoatRowChangeEventHandler(object sender, Table14GoatRowChangeEvent e);
        
        public delegate void Table14HenRowChangeEventHandler(object sender, Table14HenRowChangeEvent e);
        
        public delegate void Table15RowChangeEventHandler(object sender, Table15RowChangeEvent e);
        
        public delegate void Table16RowChangeEventHandler(object sender, Table16RowChangeEvent e);
        
        public delegate void Table17RowChangeEventHandler(object sender, Table17RowChangeEvent e);
        
        public delegate void Table20RowChangeEventHandler(object sender, Table20RowChangeEvent e);
        
        public delegate void Table11RowChangeEventHandler(object sender, Table11RowChangeEvent e);
        
        public delegate void Table11ARowChangeEventHandler(object sender, Table11ARowChangeEvent e);
        
        public delegate void Table11BRowChangeEventHandler(object sender, Table11BRowChangeEvent e);
        
        public delegate void Table10RowChangeEventHandler(object sender, Table10RowChangeEvent e);
        
        public delegate void Table21RowChangeEventHandler(object sender, Table21RowChangeEvent e);
        
        public delegate void Table18RowChangeEventHandler(object sender, Table18RowChangeEvent e);
        
        public delegate void Table18ARowChangeEventHandler(object sender, Table18ARowChangeEvent e);
        
        public delegate void Table18BRowChangeEventHandler(object sender, Table18BRowChangeEvent e);
        
        public delegate void Table18DRowChangeEventHandler(object sender, Table18DRowChangeEvent e);
        
        public delegate void Table18CRowChangeEventHandler(object sender, Table18CRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.TypedTableBase<DataTable1Row> {
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(string status, int male, int female, int total) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        status,
                        male,
                        female,
                        total};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstatus = base.Columns["status"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.MaxLength = 15;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table1DataTable : global::System.Data.TypedTableBase<Table1Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1DataTable() {
                this.TableName = "Table1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row this[int index] {
                get {
                    return ((Table1Row)(this.Rows[index]));
                }
            }
            
            public event Table1RowChangeEventHandler Table1RowChanging;
            
            public event Table1RowChangeEventHandler Table1RowChanged;
            
            public event Table1RowChangeEventHandler Table1RowDeleting;
            
            public event Table1RowChangeEventHandler Table1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable1Row(Table1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row AddTable1Row(string union_name, int male, int female) {
                Table1Row rowTable1Row = ((Table1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        male,
                        female};
                rowTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable1Row);
                return rowTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table1DataTable cln = ((Table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union_name"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunion_name);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row NewTable1Row() {
                return ((Table1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table1RowChanged != null)) {
                    this.Table1RowChanged(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table1RowChanging != null)) {
                    this.Table1RowChanging(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table1RowDeleted != null)) {
                    this.Table1RowDeleted(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table1RowDeleting != null)) {
                    this.Table1RowDeleting(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable1Row(Table1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table_3DataTable : global::System.Data.TypedTableBase<Table_3Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnself;
            
            private global::System.Data.DataColumn columnwife;
            
            private global::System.Data.DataColumn columnhusband;
            
            private global::System.Data.DataColumn columnson;
            
            private global::System.Data.DataColumn columndaughter;
            
            private global::System.Data.DataColumn columnfathermother;
            
            private global::System.Data.DataColumn columnothers;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3DataTable() {
                this.TableName = "Table 3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table_3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table_3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selfColumn {
                get {
                    return this.columnself;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wifeColumn {
                get {
                    return this.columnwife;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn husbandColumn {
                get {
                    return this.columnhusband;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sonColumn {
                get {
                    return this.columnson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daughterColumn {
                get {
                    return this.columndaughter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fathermotherColumn {
                get {
                    return this.columnfathermother;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn othersColumn {
                get {
                    return this.columnothers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row this[int index] {
                get {
                    return ((Table_3Row)(this.Rows[index]));
                }
            }
            
            public event Table_3RowChangeEventHandler Table_3RowChanging;
            
            public event Table_3RowChangeEventHandler Table_3RowChanged;
            
            public event Table_3RowChangeEventHandler Table_3RowDeleting;
            
            public event Table_3RowChangeEventHandler Table_3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable_3Row(Table_3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row AddTable_3Row(string union_name, int self, int wife, int husband, int son, int daughter, int fathermother, int others, int total) {
                Table_3Row rowTable_3Row = ((Table_3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        self,
                        wife,
                        husband,
                        son,
                        daughter,
                        fathermother,
                        others,
                        total};
                rowTable_3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable_3Row);
                return rowTable_3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table_3DataTable cln = ((Table_3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table_3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union_name"];
                this.columnself = base.Columns["self"];
                this.columnwife = base.Columns["wife"];
                this.columnhusband = base.Columns["husband"];
                this.columnson = base.Columns["son"];
                this.columndaughter = base.Columns["daughter"];
                this.columnfathermother = base.Columns["fathermother"];
                this.columnothers = base.Columns["others"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunion_name);
                this.columnself = new global::System.Data.DataColumn("self", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnself);
                this.columnwife = new global::System.Data.DataColumn("wife", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwife);
                this.columnhusband = new global::System.Data.DataColumn("husband", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhusband);
                this.columnson = new global::System.Data.DataColumn("son", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnson);
                this.columndaughter = new global::System.Data.DataColumn("daughter", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndaughter);
                this.columnfathermother = new global::System.Data.DataColumn("fathermother", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfathermother);
                this.columnothers = new global::System.Data.DataColumn("others", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnothers);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnself.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row NewTable_3Row() {
                return ((Table_3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table_3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table_3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table_3RowChanged != null)) {
                    this.Table_3RowChanged(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table_3RowChanging != null)) {
                    this.Table_3RowChanging(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table_3RowDeleted != null)) {
                    this.Table_3RowDeleted(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table_3RowDeleting != null)) {
                    this.Table_3RowDeleting(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable_3Row(Table_3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table_3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table6DataTable : global::System.Data.TypedTableBase<Table6Row> {
            
            private global::System.Data.DataColumn columnlitercystatus;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6DataTable() {
                this.TableName = "Table6";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table6DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table6DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn litercystatusColumn {
                get {
                    return this.columnlitercystatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row this[int index] {
                get {
                    return ((Table6Row)(this.Rows[index]));
                }
            }
            
            public event Table6RowChangeEventHandler Table6RowChanging;
            
            public event Table6RowChangeEventHandler Table6RowChanged;
            
            public event Table6RowChangeEventHandler Table6RowDeleting;
            
            public event Table6RowChangeEventHandler Table6RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable6Row(Table6Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row AddTable6Row(string litercystatus, int male, int female) {
                Table6Row rowTable6Row = ((Table6Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        litercystatus,
                        male,
                        female};
                rowTable6Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable6Row);
                return rowTable6Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table6DataTable cln = ((Table6DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table6DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlitercystatus = base.Columns["litercystatus"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlitercystatus = new global::System.Data.DataColumn("litercystatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlitercystatus);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnlitercystatus.AllowDBNull = false;
                this.columnlitercystatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row NewTable6Row() {
                return ((Table6Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table6Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table6Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table6RowChanged != null)) {
                    this.Table6RowChanged(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table6RowChanging != null)) {
                    this.Table6RowChanging(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table6RowDeleted != null)) {
                    this.Table6RowDeleted(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table6RowDeleting != null)) {
                    this.Table6RowDeleting(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable6Row(Table6Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table6DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table7DataTable : global::System.Data.TypedTableBase<Table7Row> {
            
            private global::System.Data.DataColumn columnlitercystatus;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7DataTable() {
                this.TableName = "Table7";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table7DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table7DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn litercystatusColumn {
                get {
                    return this.columnlitercystatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row this[int index] {
                get {
                    return ((Table7Row)(this.Rows[index]));
                }
            }
            
            public event Table7RowChangeEventHandler Table7RowChanging;
            
            public event Table7RowChangeEventHandler Table7RowChanged;
            
            public event Table7RowChangeEventHandler Table7RowDeleting;
            
            public event Table7RowChangeEventHandler Table7RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable7Row(Table7Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row AddTable7Row(string litercystatus, int male, int female) {
                Table7Row rowTable7Row = ((Table7Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        litercystatus,
                        male,
                        female};
                rowTable7Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable7Row);
                return rowTable7Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table7DataTable cln = ((Table7DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table7DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlitercystatus = base.Columns["litercystatus"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlitercystatus = new global::System.Data.DataColumn("litercystatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlitercystatus);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnlitercystatus.AllowDBNull = false;
                this.columnlitercystatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row NewTable7Row() {
                return ((Table7Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table7Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table7Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table7RowChanged != null)) {
                    this.Table7RowChanged(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table7RowChanging != null)) {
                    this.Table7RowChanging(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table7RowDeleted != null)) {
                    this.Table7RowDeleted(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table7RowDeleting != null)) {
                    this.Table7RowDeleting(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable7Row(Table7Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table7DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table8DataTable : global::System.Data.TypedTableBase<Table8Row> {
            
            private global::System.Data.DataColumn columnoccupation;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8DataTable() {
                this.TableName = "Table8";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table8DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table8DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn occupationColumn {
                get {
                    return this.columnoccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row this[int index] {
                get {
                    return ((Table8Row)(this.Rows[index]));
                }
            }
            
            public event Table8RowChangeEventHandler Table8RowChanging;
            
            public event Table8RowChangeEventHandler Table8RowChanged;
            
            public event Table8RowChangeEventHandler Table8RowDeleting;
            
            public event Table8RowChangeEventHandler Table8RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable8Row(Table8Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row AddTable8Row(string occupation, int male, int female) {
                Table8Row rowTable8Row = ((Table8Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        occupation,
                        male,
                        female};
                rowTable8Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable8Row);
                return rowTable8Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table8DataTable cln = ((Table8DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table8DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoccupation = base.Columns["occupation"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoccupation = new global::System.Data.DataColumn("occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoccupation);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnoccupation.AllowDBNull = false;
                this.columnoccupation.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row NewTable8Row() {
                return ((Table8Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table8Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table8Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table8RowChanged != null)) {
                    this.Table8RowChanged(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table8RowChanging != null)) {
                    this.Table8RowChanging(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table8RowDeleted != null)) {
                    this.Table8RowDeleted(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table8RowDeleting != null)) {
                    this.Table8RowDeleting(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable8Row(Table8Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table8DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table9DataTable : global::System.Data.TypedTableBase<Table9Row> {
            
            private global::System.Data.DataColumn columnoccupation;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9DataTable() {
                this.TableName = "Table9";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table9DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table9DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn occupationColumn {
                get {
                    return this.columnoccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row this[int index] {
                get {
                    return ((Table9Row)(this.Rows[index]));
                }
            }
            
            public event Table9RowChangeEventHandler Table9RowChanging;
            
            public event Table9RowChangeEventHandler Table9RowChanged;
            
            public event Table9RowChangeEventHandler Table9RowDeleting;
            
            public event Table9RowChangeEventHandler Table9RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable9Row(Table9Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row AddTable9Row(string occupation, int male, int female) {
                Table9Row rowTable9Row = ((Table9Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        occupation,
                        male,
                        female};
                rowTable9Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable9Row);
                return rowTable9Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table9DataTable cln = ((Table9DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table9DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoccupation = base.Columns["occupation"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoccupation = new global::System.Data.DataColumn("occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoccupation);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnoccupation.AllowDBNull = false;
                this.columnoccupation.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row NewTable9Row() {
                return ((Table9Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table9Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table9Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table9RowChanged != null)) {
                    this.Table9RowChanged(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table9RowChanging != null)) {
                    this.Table9RowChanging(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table9RowDeleted != null)) {
                    this.Table9RowDeleted(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table9RowDeleting != null)) {
                    this.Table9RowDeleting(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable9Row(Table9Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table9DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table12DataTable : global::System.Data.TypedTableBase<Table12Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_5000;
            
            private global::System.Data.DataColumn _column5000_9999;
            
            private global::System.Data.DataColumn _column10000_14999;
            
            private global::System.Data.DataColumn _column15000_19999;
            
            private global::System.Data.DataColumn _column20000_24999;
            
            private global::System.Data.DataColumn _column25000_49999;
            
            private global::System.Data.DataColumn _column50000_;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12DataTable() {
                this.TableName = "Table12";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table12DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table12DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5000Column {
                get {
                    return this._column_5000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5000_9999Column {
                get {
                    return this._column5000_9999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _10000_14999Column {
                get {
                    return this._column10000_14999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _15000_19999Column {
                get {
                    return this._column15000_19999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _20000_24999Column {
                get {
                    return this._column20000_24999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _25000_49999Column {
                get {
                    return this._column25000_49999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _50000_Column {
                get {
                    return this._column50000_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row this[int index] {
                get {
                    return ((Table12Row)(this.Rows[index]));
                }
            }
            
            public event Table12RowChangeEventHandler Table12RowChanging;
            
            public event Table12RowChangeEventHandler Table12RowChanged;
            
            public event Table12RowChangeEventHandler Table12RowDeleting;
            
            public event Table12RowChangeEventHandler Table12RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable12Row(Table12Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row AddTable12Row(string union_name, int @__5000, int _5000_9999, int _10000_14999, int _15000_19999, int _20000_24999, int _25000_49999, int _50000_, int total) {
                Table12Row rowTable12Row = ((Table12Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__5000,
                        _5000_9999,
                        _10000_14999,
                        _15000_19999,
                        _20000_24999,
                        _25000_49999,
                        _50000_,
                        total};
                rowTable12Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable12Row);
                return rowTable12Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table12DataTable cln = ((Table12DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table12DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_5000 = base.Columns["<5000"];
                this._column5000_9999 = base.Columns["5000-9999"];
                this._column10000_14999 = base.Columns["10000-14999"];
                this._column15000_19999 = base.Columns["15000-19999"];
                this._column20000_24999 = base.Columns["20000-24999"];
                this._column25000_49999 = base.Columns["25000-49999"];
                this._column50000_ = base.Columns["50000+"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_5000 = new global::System.Data.DataColumn("<5000", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5000");
                this._column_5000.ExtendedProperties.Add("Generator_UserColumnName", "<5000");
                base.Columns.Add(this._column_5000);
                this._column5000_9999 = new global::System.Data.DataColumn("5000-9999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5000_9999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5000_9999");
                this._column5000_9999.ExtendedProperties.Add("Generator_UserColumnName", "5000-9999");
                base.Columns.Add(this._column5000_9999);
                this._column10000_14999 = new global::System.Data.DataColumn("10000-14999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column10000_14999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column10000_14999");
                this._column10000_14999.ExtendedProperties.Add("Generator_UserColumnName", "10000-14999");
                base.Columns.Add(this._column10000_14999);
                this._column15000_19999 = new global::System.Data.DataColumn("15000-19999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column15000_19999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column15000_19999");
                this._column15000_19999.ExtendedProperties.Add("Generator_UserColumnName", "15000-19999");
                base.Columns.Add(this._column15000_19999);
                this._column20000_24999 = new global::System.Data.DataColumn("20000-24999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column20000_24999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column20000_24999");
                this._column20000_24999.ExtendedProperties.Add("Generator_UserColumnName", "20000-24999");
                base.Columns.Add(this._column20000_24999);
                this._column25000_49999 = new global::System.Data.DataColumn("25000-49999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column25000_49999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column25000_49999");
                this._column25000_49999.ExtendedProperties.Add("Generator_UserColumnName", "25000-49999");
                base.Columns.Add(this._column25000_49999);
                this._column50000_ = new global::System.Data.DataColumn("50000+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column50000_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column50000_");
                this._column50000_.ExtendedProperties.Add("Generator_UserColumnName", "50000+");
                base.Columns.Add(this._column50000_);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column_5000.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row NewTable12Row() {
                return ((Table12Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table12Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table12Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table12RowChanged != null)) {
                    this.Table12RowChanged(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table12RowChanging != null)) {
                    this.Table12RowChanging(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table12RowDeleted != null)) {
                    this.Table12RowDeleted(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table12RowDeleting != null)) {
                    this.Table12RowDeleting(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable12Row(Table12Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table12DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table13DataTable : global::System.Data.TypedTableBase<Table13Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnno_land;
            
            private global::System.Data.DataColumn _column0_25___0_49;
            
            private global::System.Data.DataColumn _column0_50___0_99;
            
            private global::System.Data.DataColumn _column1_0___1_49;
            
            private global::System.Data.DataColumn _column1_5_1_99;
            
            private global::System.Data.DataColumn _column2_;
            
            private global::System.Data.DataColumn _column__05;
            
            private global::System.Data.DataColumn _column0_05___0_24;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13DataTable() {
                this.TableName = "Table13";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table13DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn no_landColumn {
                get {
                    return this.columnno_land;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_25___0_49Column {
                get {
                    return this._column0_25___0_49;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_50___0_99Column {
                get {
                    return this._column0_50___0_99;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_0___1_49Column {
                get {
                    return this._column1_0___1_49;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_5_1_99Column {
                get {
                    return this._column1_5_1_99;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _2_Column {
                get {
                    return this._column2_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ___05Column {
                get {
                    return this._column__05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_05___0_24Column {
                get {
                    return this._column0_05___0_24;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row this[int index] {
                get {
                    return ((Table13Row)(this.Rows[index]));
                }
            }
            
            public event Table13RowChangeEventHandler Table13RowChanging;
            
            public event Table13RowChangeEventHandler Table13RowChanged;
            
            public event Table13RowChangeEventHandler Table13RowDeleting;
            
            public event Table13RowChangeEventHandler Table13RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable13Row(Table13Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row AddTable13Row(string union_name, int no_land, int _0_25___0_49, int _0_50___0_99, int _1_0___1_49, int _1_5_1_99, int _2_, int ___05, int _0_05___0_24, int total) {
                Table13Row rowTable13Row = ((Table13Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        no_land,
                        _0_25___0_49,
                        _0_50___0_99,
                        _1_0___1_49,
                        _1_5_1_99,
                        _2_,
                        ___05,
                        _0_05___0_24,
                        total};
                rowTable13Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable13Row);
                return rowTable13Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table13DataTable cln = ((Table13DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table13DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnno_land = base.Columns["no land"];
                this._column0_25___0_49 = base.Columns["0_25 - 0_49"];
                this._column0_50___0_99 = base.Columns["0_50 - 0_99"];
                this._column1_0___1_49 = base.Columns["1_0 - 1_49"];
                this._column1_5_1_99 = base.Columns["1_5-1_99"];
                this._column2_ = base.Columns["2+"];
                this._column__05 = base.Columns["<_05"];
                this._column0_05___0_24 = base.Columns["0_05 - 0_24"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnno_land = new global::System.Data.DataColumn("no land", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno_land);
                this._column0_25___0_49 = new global::System.Data.DataColumn("0_25 - 0_49", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_25___0_49.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_25___0_49");
                this._column0_25___0_49.ExtendedProperties.Add("Generator_UserColumnName", "0_25 - 0_49");
                base.Columns.Add(this._column0_25___0_49);
                this._column0_50___0_99 = new global::System.Data.DataColumn("0_50 - 0_99", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_50___0_99.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_50___0_99");
                this._column0_50___0_99.ExtendedProperties.Add("Generator_UserColumnName", "0_50 - 0_99");
                base.Columns.Add(this._column0_50___0_99);
                this._column1_0___1_49 = new global::System.Data.DataColumn("1_0 - 1_49", typeof(int), null, global::System.Data.MappingType.Element);
                this._column1_0___1_49.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_0___1_49");
                this._column1_0___1_49.ExtendedProperties.Add("Generator_UserColumnName", "1_0 - 1_49");
                base.Columns.Add(this._column1_0___1_49);
                this._column1_5_1_99 = new global::System.Data.DataColumn("1_5-1_99", typeof(int), null, global::System.Data.MappingType.Element);
                this._column1_5_1_99.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_5_1_99");
                this._column1_5_1_99.ExtendedProperties.Add("Generator_UserColumnName", "1_5-1_99");
                base.Columns.Add(this._column1_5_1_99);
                this._column2_ = new global::System.Data.DataColumn("2+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column2_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column2_");
                this._column2_.ExtendedProperties.Add("Generator_UserColumnName", "2+");
                base.Columns.Add(this._column2_);
                this._column__05 = new global::System.Data.DataColumn("<_05", typeof(int), null, global::System.Data.MappingType.Element);
                this._column__05.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column__05");
                this._column__05.ExtendedProperties.Add("Generator_UserColumnName", "<_05");
                base.Columns.Add(this._column__05);
                this._column0_05___0_24 = new global::System.Data.DataColumn("0_05 - 0_24", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_05___0_24.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_05___0_24");
                this._column0_05___0_24.ExtendedProperties.Add("Generator_UserColumnName", "0_05 - 0_24");
                base.Columns.Add(this._column0_05___0_24);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnno_land.AllowDBNull = false;
                this._column0_25___0_49.Caption = "0.25 - 0.49";
                this._column0_50___0_99.Caption = "0.50 - 0.99";
                this._column1_0___1_49.Caption = "1.0 - 1.49";
                this._column1_5_1_99.Caption = "1.5-1.99";
                this._column__05.Caption = "<.05";
                this._column0_05___0_24.Caption = "0.05 - 0.24";
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row NewTable13Row() {
                return ((Table13Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table13Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table13Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table13RowChanged != null)) {
                    this.Table13RowChanged(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table13RowChanging != null)) {
                    this.Table13RowChanging(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table13RowDeleted != null)) {
                    this.Table13RowDeleted(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table13RowDeleting != null)) {
                    this.Table13RowDeleting(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable13Row(Table13Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table13DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table13ADataTable : global::System.Data.TypedTableBase<Table13ARow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_5000;
            
            private global::System.Data.DataColumn _column5000_9999;
            
            private global::System.Data.DataColumn _column10000_14999;
            
            private global::System.Data.DataColumn _column15000_19999;
            
            private global::System.Data.DataColumn _column20000_24999;
            
            private global::System.Data.DataColumn _column25000_49999;
            
            private global::System.Data.DataColumn _column50000_;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ADataTable() {
                this.TableName = "Table13A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table13ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5000Column {
                get {
                    return this._column_5000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5000_9999Column {
                get {
                    return this._column5000_9999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _10000_14999Column {
                get {
                    return this._column10000_14999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _15000_19999Column {
                get {
                    return this._column15000_19999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _20000_24999Column {
                get {
                    return this._column20000_24999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _25000_49999Column {
                get {
                    return this._column25000_49999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _50000_Column {
                get {
                    return this._column50000_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow this[int index] {
                get {
                    return ((Table13ARow)(this.Rows[index]));
                }
            }
            
            public event Table13ARowChangeEventHandler Table13ARowChanging;
            
            public event Table13ARowChangeEventHandler Table13ARowChanged;
            
            public event Table13ARowChangeEventHandler Table13ARowDeleting;
            
            public event Table13ARowChangeEventHandler Table13ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable13ARow(Table13ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow AddTable13ARow(string union_name, int @__5000, int _5000_9999, int _10000_14999, int _15000_19999, int _20000_24999, int _25000_49999, int _50000_, int total) {
                Table13ARow rowTable13ARow = ((Table13ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__5000,
                        _5000_9999,
                        _10000_14999,
                        _15000_19999,
                        _20000_24999,
                        _25000_49999,
                        _50000_,
                        total};
                rowTable13ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable13ARow);
                return rowTable13ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table13ADataTable cln = ((Table13ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table13ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_5000 = base.Columns["<5000"];
                this._column5000_9999 = base.Columns["5000-9999"];
                this._column10000_14999 = base.Columns["10000-14999"];
                this._column15000_19999 = base.Columns["15000-19999"];
                this._column20000_24999 = base.Columns["20000-24999"];
                this._column25000_49999 = base.Columns["25000-49999"];
                this._column50000_ = base.Columns["50000+"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_5000 = new global::System.Data.DataColumn("<5000", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5000");
                this._column_5000.ExtendedProperties.Add("Generator_UserColumnName", "<5000");
                base.Columns.Add(this._column_5000);
                this._column5000_9999 = new global::System.Data.DataColumn("5000-9999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5000_9999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5000_9999");
                this._column5000_9999.ExtendedProperties.Add("Generator_UserColumnName", "5000-9999");
                base.Columns.Add(this._column5000_9999);
                this._column10000_14999 = new global::System.Data.DataColumn("10000-14999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column10000_14999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column10000_14999");
                this._column10000_14999.ExtendedProperties.Add("Generator_UserColumnName", "10000-14999");
                base.Columns.Add(this._column10000_14999);
                this._column15000_19999 = new global::System.Data.DataColumn("15000-19999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column15000_19999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column15000_19999");
                this._column15000_19999.ExtendedProperties.Add("Generator_UserColumnName", "15000-19999");
                base.Columns.Add(this._column15000_19999);
                this._column20000_24999 = new global::System.Data.DataColumn("20000-24999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column20000_24999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column20000_24999");
                this._column20000_24999.ExtendedProperties.Add("Generator_UserColumnName", "20000-24999");
                base.Columns.Add(this._column20000_24999);
                this._column25000_49999 = new global::System.Data.DataColumn("25000-49999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column25000_49999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column25000_49999");
                this._column25000_49999.ExtendedProperties.Add("Generator_UserColumnName", "25000-49999");
                base.Columns.Add(this._column25000_49999);
                this._column50000_ = new global::System.Data.DataColumn("50000+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column50000_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column50000_");
                this._column50000_.ExtendedProperties.Add("Generator_UserColumnName", "50000+");
                base.Columns.Add(this._column50000_);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column_5000.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow NewTable13ARow() {
                return ((Table13ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table13ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table13ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table13ARowChanged != null)) {
                    this.Table13ARowChanged(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table13ARowChanging != null)) {
                    this.Table13ARowChanging(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table13ARowDeleted != null)) {
                    this.Table13ARowDeleted(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table13ARowDeleting != null)) {
                    this.Table13ARowDeleting(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable13ARow(Table13ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table13ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table13BDataTable : global::System.Data.TypedTableBase<Table13BRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_5;
            
            private global::System.Data.DataColumn _column11___15;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn _column5___10;
            
            private global::System.Data.DataColumn _column16___20;
            
            private global::System.Data.DataColumn _column20_;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BDataTable() {
                this.TableName = "Table13B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table13BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5Column {
                get {
                    return this._column_5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _11___15Column {
                get {
                    return this._column11___15;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5___10Column {
                get {
                    return this._column5___10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _16___20Column {
                get {
                    return this._column16___20;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _20_Column {
                get {
                    return this._column20_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow this[int index] {
                get {
                    return ((Table13BRow)(this.Rows[index]));
                }
            }
            
            public event Table13BRowChangeEventHandler Table13BRowChanging;
            
            public event Table13BRowChangeEventHandler Table13BRowChanged;
            
            public event Table13BRowChangeEventHandler Table13BRowDeleting;
            
            public event Table13BRowChangeEventHandler Table13BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable13BRow(Table13BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow AddTable13BRow(string union_name, int @__5, int _11___15, int no, int _5___10, int _16___20, int _20_, int total) {
                Table13BRow rowTable13BRow = ((Table13BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__5,
                        _11___15,
                        no,
                        _5___10,
                        _16___20,
                        _20_,
                        total};
                rowTable13BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable13BRow);
                return rowTable13BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table13BDataTable cln = ((Table13BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table13BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_5 = base.Columns["<5"];
                this._column11___15 = base.Columns["11 - 15"];
                this.columnno = base.Columns["no"];
                this._column5___10 = base.Columns["5 - 10"];
                this._column16___20 = base.Columns["16 - 20"];
                this._column20_ = base.Columns["20+"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_5 = new global::System.Data.DataColumn("<5", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5");
                this._column_5.ExtendedProperties.Add("Generator_UserColumnName", "<5");
                base.Columns.Add(this._column_5);
                this._column11___15 = new global::System.Data.DataColumn("11 - 15", typeof(int), null, global::System.Data.MappingType.Element);
                this._column11___15.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column11___15");
                this._column11___15.ExtendedProperties.Add("Generator_UserColumnName", "11 - 15");
                base.Columns.Add(this._column11___15);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this._column5___10 = new global::System.Data.DataColumn("5 - 10", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5___10.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5___10");
                this._column5___10.ExtendedProperties.Add("Generator_UserColumnName", "5 - 10");
                base.Columns.Add(this._column5___10);
                this._column16___20 = new global::System.Data.DataColumn("16 - 20", typeof(int), null, global::System.Data.MappingType.Element);
                this._column16___20.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column16___20");
                this._column16___20.ExtendedProperties.Add("Generator_UserColumnName", "16 - 20");
                base.Columns.Add(this._column16___20);
                this._column20_ = new global::System.Data.DataColumn("20+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column20_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column20_");
                this._column20_.ExtendedProperties.Add("Generator_UserColumnName", "20+");
                base.Columns.Add(this._column20_);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnno.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow NewTable13BRow() {
                return ((Table13BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table13BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table13BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table13BRowChanged != null)) {
                    this.Table13BRowChanged(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table13BRowChanging != null)) {
                    this.Table13BRowChanging(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table13BRowDeleted != null)) {
                    this.Table13BRowDeleted(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table13BRowDeleting != null)) {
                    this.Table13BRowDeleting(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable13BRow(Table13BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table13BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table14CowDataTable : global::System.Data.TypedTableBase<Table14CowRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            private global::System.Data.DataColumn _column1_2;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowDataTable() {
                this.TableName = "Table14Cow";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14CowDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table14CowDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_2Column {
                get {
                    return this._column1_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow this[int index] {
                get {
                    return ((Table14CowRow)(this.Rows[index]));
                }
            }
            
            public event Table14CowRowChangeEventHandler Table14CowRowChanging;
            
            public event Table14CowRowChangeEventHandler Table14CowRowChanged;
            
            public event Table14CowRowChangeEventHandler Table14CowRowDeleting;
            
            public event Table14CowRowChangeEventHandler Table14CowRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable14CowRow(Table14CowRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow AddTable14CowRow(string union_name, int _3___4, int _4_, int _1_2, int no, int total) {
                Table14CowRow rowTable14CowRow = ((Table14CowRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _3___4,
                        _4_,
                        _1_2,
                        no,
                        total};
                rowTable14CowRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable14CowRow);
                return rowTable14CowRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table14CowDataTable cln = ((Table14CowDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table14CowDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
                this._column1_2 = base.Columns["1-2"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this._column1_2 = new global::System.Data.DataColumn("1-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column1_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_2");
                this._column1_2.ExtendedProperties.Add("Generator_UserColumnName", "1-2");
                base.Columns.Add(this._column1_2);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column1_2.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow NewTable14CowRow() {
                return ((Table14CowRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table14CowRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table14CowRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table14CowRowChanged != null)) {
                    this.Table14CowRowChanged(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table14CowRowChanging != null)) {
                    this.Table14CowRowChanging(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table14CowRowDeleted != null)) {
                    this.Table14CowRowDeleted(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table14CowRowDeleting != null)) {
                    this.Table14CowRowDeleting(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable14CowRow(Table14CowRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table14CowDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table14GoatDataTable : global::System.Data.TypedTableBase<Table14GoatRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0_2;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatDataTable() {
                this.TableName = "Table14Goat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14GoatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table14GoatDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_2Column {
                get {
                    return this._column0_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow this[int index] {
                get {
                    return ((Table14GoatRow)(this.Rows[index]));
                }
            }
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowChanging;
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowChanged;
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowDeleting;
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable14GoatRow(Table14GoatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow AddTable14GoatRow(string union_name, int _0_2, int _3___4, int _4_) {
                Table14GoatRow rowTable14GoatRow = ((Table14GoatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0_2,
                        _3___4,
                        _4_};
                rowTable14GoatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable14GoatRow);
                return rowTable14GoatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table14GoatDataTable cln = ((Table14GoatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table14GoatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0_2 = base.Columns["0-2"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0_2 = new global::System.Data.DataColumn("0-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_2");
                this._column0_2.ExtendedProperties.Add("Generator_UserColumnName", "0-2");
                base.Columns.Add(this._column0_2);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow NewTable14GoatRow() {
                return ((Table14GoatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table14GoatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table14GoatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table14GoatRowChanged != null)) {
                    this.Table14GoatRowChanged(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table14GoatRowChanging != null)) {
                    this.Table14GoatRowChanging(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table14GoatRowDeleted != null)) {
                    this.Table14GoatRowDeleted(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table14GoatRowDeleting != null)) {
                    this.Table14GoatRowDeleting(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable14GoatRow(Table14GoatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table14GoatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table14HenDataTable : global::System.Data.TypedTableBase<Table14HenRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0_2;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenDataTable() {
                this.TableName = "Table14Hen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14HenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table14HenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_2Column {
                get {
                    return this._column0_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow this[int index] {
                get {
                    return ((Table14HenRow)(this.Rows[index]));
                }
            }
            
            public event Table14HenRowChangeEventHandler Table14HenRowChanging;
            
            public event Table14HenRowChangeEventHandler Table14HenRowChanged;
            
            public event Table14HenRowChangeEventHandler Table14HenRowDeleting;
            
            public event Table14HenRowChangeEventHandler Table14HenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable14HenRow(Table14HenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow AddTable14HenRow(string union_name, int _0_2, int _3___4, int _4_) {
                Table14HenRow rowTable14HenRow = ((Table14HenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0_2,
                        _3___4,
                        _4_};
                rowTable14HenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable14HenRow);
                return rowTable14HenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table14HenDataTable cln = ((Table14HenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table14HenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0_2 = base.Columns["0-2"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0_2 = new global::System.Data.DataColumn("0-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_2");
                this._column0_2.ExtendedProperties.Add("Generator_UserColumnName", "0-2");
                base.Columns.Add(this._column0_2);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow NewTable14HenRow() {
                return ((Table14HenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table14HenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table14HenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table14HenRowChanged != null)) {
                    this.Table14HenRowChanged(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table14HenRowChanging != null)) {
                    this.Table14HenRowChanging(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table14HenRowDeleted != null)) {
                    this.Table14HenRowDeleted(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table14HenRowDeleting != null)) {
                    this.Table14HenRowDeleting(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable14HenRow(Table14HenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table14HenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table15DataTable : global::System.Data.TypedTableBase<Table15Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            private global::System.Data.DataColumn _column1_2;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15DataTable() {
                this.TableName = "Table15";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table15DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table15DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_2Column {
                get {
                    return this._column1_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row this[int index] {
                get {
                    return ((Table15Row)(this.Rows[index]));
                }
            }
            
            public event Table15RowChangeEventHandler Table15RowChanging;
            
            public event Table15RowChangeEventHandler Table15RowChanged;
            
            public event Table15RowChangeEventHandler Table15RowDeleting;
            
            public event Table15RowChangeEventHandler Table15RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable15Row(Table15Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row AddTable15Row(string union_name, int _3___4, int _4_, int _1_2, int no, int total) {
                Table15Row rowTable15Row = ((Table15Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _3___4,
                        _4_,
                        _1_2,
                        no,
                        total};
                rowTable15Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable15Row);
                return rowTable15Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table15DataTable cln = ((Table15DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table15DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
                this._column1_2 = base.Columns["1-2"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this._column1_2 = new global::System.Data.DataColumn("1-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column1_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_2");
                this._column1_2.ExtendedProperties.Add("Generator_UserColumnName", "1-2");
                base.Columns.Add(this._column1_2);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column1_2.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row NewTable15Row() {
                return ((Table15Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table15Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table15Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table15RowChanged != null)) {
                    this.Table15RowChanged(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table15RowChanging != null)) {
                    this.Table15RowChanging(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table15RowDeleted != null)) {
                    this.Table15RowDeleted(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table15RowDeleting != null)) {
                    this.Table15RowDeleting(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable15Row(Table15Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table15DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table16DataTable : global::System.Data.TypedTableBase<Table16Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0___3;
            
            private global::System.Data.DataColumn _column4___6;
            
            private global::System.Data.DataColumn _column7___9;
            
            private global::System.Data.DataColumn _column10___11;
            
            private global::System.Data.DataColumn column12;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16DataTable() {
                this.TableName = "Table16";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table16DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table16DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0___3Column {
                get {
                    return this._column0___3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4___6Column {
                get {
                    return this._column4___6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _7___9Column {
                get {
                    return this._column7___9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _10___11Column {
                get {
                    return this._column10___11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _12Column {
                get {
                    return this.column12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row this[int index] {
                get {
                    return ((Table16Row)(this.Rows[index]));
                }
            }
            
            public event Table16RowChangeEventHandler Table16RowChanging;
            
            public event Table16RowChangeEventHandler Table16RowChanged;
            
            public event Table16RowChangeEventHandler Table16RowDeleting;
            
            public event Table16RowChangeEventHandler Table16RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable16Row(Table16Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row AddTable16Row(string union_name, int _0___3, int _4___6, int _7___9, int _10___11, int _12, int total) {
                Table16Row rowTable16Row = ((Table16Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0___3,
                        _4___6,
                        _7___9,
                        _10___11,
                        _12,
                        total};
                rowTable16Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable16Row);
                return rowTable16Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table16DataTable cln = ((Table16DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table16DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0___3 = base.Columns["0 - 3"];
                this._column4___6 = base.Columns["4 - 6"];
                this._column7___9 = base.Columns["7 - 9"];
                this._column10___11 = base.Columns["10 - 11"];
                this.column12 = base.Columns["12"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0___3 = new global::System.Data.DataColumn("0 - 3", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0___3.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0___3");
                this._column0___3.ExtendedProperties.Add("Generator_UserColumnName", "0 - 3");
                base.Columns.Add(this._column0___3);
                this._column4___6 = new global::System.Data.DataColumn("4 - 6", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4___6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4___6");
                this._column4___6.ExtendedProperties.Add("Generator_UserColumnName", "4 - 6");
                base.Columns.Add(this._column4___6);
                this._column7___9 = new global::System.Data.DataColumn("7 - 9", typeof(int), null, global::System.Data.MappingType.Element);
                this._column7___9.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column7___9");
                this._column7___9.ExtendedProperties.Add("Generator_UserColumnName", "7 - 9");
                base.Columns.Add(this._column7___9);
                this._column10___11 = new global::System.Data.DataColumn("10 - 11", typeof(int), null, global::System.Data.MappingType.Element);
                this._column10___11.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column10___11");
                this._column10___11.ExtendedProperties.Add("Generator_UserColumnName", "10 - 11");
                base.Columns.Add(this._column10___11);
                this.column12 = new global::System.Data.DataColumn("12", typeof(int), null, global::System.Data.MappingType.Element);
                this.column12.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column12");
                this.column12.ExtendedProperties.Add("Generator_UserColumnName", "12");
                base.Columns.Add(this.column12);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column0___3.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row NewTable16Row() {
                return ((Table16Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table16Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table16Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table16RowChanged != null)) {
                    this.Table16RowChanged(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table16RowChanging != null)) {
                    this.Table16RowChanging(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table16RowDeleted != null)) {
                    this.Table16RowDeleted(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table16RowDeleting != null)) {
                    this.Table16RowDeleting(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable16Row(Table16Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table16DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table17DataTable : global::System.Data.TypedTableBase<Table17Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0___120;
            
            private global::System.Data.DataColumn _column121___180;
            
            private global::System.Data.DataColumn _column181___240;
            
            private global::System.Data.DataColumn _column241___300;
            
            private global::System.Data.DataColumn _column300_;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table17DataTable() {
                this.TableName = "Table17";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table17DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table17DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0___120Column {
                get {
                    return this._column0___120;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _121___180Column {
                get {
                    return this._column121___180;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _181___240Column {
                get {
                    return this._column181___240;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _241___300Column {
                get {
                    return this._column241___300;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _300_Column {
                get {
                    return this._column300_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table17Row this[int index] {
                get {
                    return ((Table17Row)(this.Rows[index]));
                }
            }
            
            public event Table17RowChangeEventHandler Table17RowChanging;
            
            public event Table17RowChangeEventHandler Table17RowChanged;
            
            public event Table17RowChangeEventHandler Table17RowDeleting;
            
            public event Table17RowChangeEventHandler Table17RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable17Row(Table17Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table17Row AddTable17Row(string union_name, int _0___120, int _121___180, int _181___240, int _241___300, int _300_, int total) {
                Table17Row rowTable17Row = ((Table17Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0___120,
                        _121___180,
                        _181___240,
                        _241___300,
                        _300_,
                        total};
                rowTable17Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable17Row);
                return rowTable17Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table17DataTable cln = ((Table17DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table17DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0___120 = base.Columns["0 - 120"];
                this._column121___180 = base.Columns["121 - 180"];
                this._column181___240 = base.Columns["181 - 240"];
                this._column241___300 = base.Columns["241 - 300"];
                this._column300_ = base.Columns["300+"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0___120 = new global::System.Data.DataColumn("0 - 120", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0___120.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0___120");
                this._column0___120.ExtendedProperties.Add("Generator_UserColumnName", "0 - 120");
                base.Columns.Add(this._column0___120);
                this._column121___180 = new global::System.Data.DataColumn("121 - 180", typeof(int), null, global::System.Data.MappingType.Element);
                this._column121___180.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column121___180");
                this._column121___180.ExtendedProperties.Add("Generator_UserColumnName", "121 - 180");
                base.Columns.Add(this._column121___180);
                this._column181___240 = new global::System.Data.DataColumn("181 - 240", typeof(int), null, global::System.Data.MappingType.Element);
                this._column181___240.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column181___240");
                this._column181___240.ExtendedProperties.Add("Generator_UserColumnName", "181 - 240");
                base.Columns.Add(this._column181___240);
                this._column241___300 = new global::System.Data.DataColumn("241 - 300", typeof(int), null, global::System.Data.MappingType.Element);
                this._column241___300.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column241___300");
                this._column241___300.ExtendedProperties.Add("Generator_UserColumnName", "241 - 300");
                base.Columns.Add(this._column241___300);
                this._column300_ = new global::System.Data.DataColumn("300+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column300_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column300_");
                this._column300_.ExtendedProperties.Add("Generator_UserColumnName", "300+");
                base.Columns.Add(this._column300_);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column0___120.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table17Row NewTable17Row() {
                return ((Table17Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table17Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table17Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table17RowChanged != null)) {
                    this.Table17RowChanged(this, new Table17RowChangeEvent(((Table17Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table17RowChanging != null)) {
                    this.Table17RowChanging(this, new Table17RowChangeEvent(((Table17Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table17RowDeleted != null)) {
                    this.Table17RowDeleted(this, new Table17RowChangeEvent(((Table17Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table17RowDeleting != null)) {
                    this.Table17RowDeleting(this, new Table17RowChangeEvent(((Table17Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable17Row(Table17Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table17DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table20DataTable : global::System.Data.TypedTableBase<Table20Row> {
            
            private global::System.Data.DataColumn columnunionname;
            
            private global::System.Data.DataColumn columnyes;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table20DataTable() {
                this.TableName = "Table20";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table20DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table20DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unionnameColumn {
                get {
                    return this.columnunionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yesColumn {
                get {
                    return this.columnyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table20Row this[int index] {
                get {
                    return ((Table20Row)(this.Rows[index]));
                }
            }
            
            public event Table20RowChangeEventHandler Table20RowChanging;
            
            public event Table20RowChangeEventHandler Table20RowChanged;
            
            public event Table20RowChangeEventHandler Table20RowDeleting;
            
            public event Table20RowChangeEventHandler Table20RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable20Row(Table20Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table20Row AddTable20Row(string unionname, int yes, int no, int total) {
                Table20Row rowTable20Row = ((Table20Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        unionname,
                        yes,
                        no,
                        total};
                rowTable20Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable20Row);
                return rowTable20Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table20DataTable cln = ((Table20DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table20DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunionname = base.Columns["unionname"];
                this.columnyes = base.Columns["yes"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunionname = new global::System.Data.DataColumn("unionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunionname);
                this.columnyes = new global::System.Data.DataColumn("yes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyes);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunionname.AllowDBNull = false;
                this.columnunionname.MaxLength = 20;
                this.columnyes.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table20Row NewTable20Row() {
                return ((Table20Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table20Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table20Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table20RowChanged != null)) {
                    this.Table20RowChanged(this, new Table20RowChangeEvent(((Table20Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table20RowChanging != null)) {
                    this.Table20RowChanging(this, new Table20RowChangeEvent(((Table20Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table20RowDeleted != null)) {
                    this.Table20RowDeleted(this, new Table20RowChangeEvent(((Table20Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table20RowDeleting != null)) {
                    this.Table20RowDeleting(this, new Table20RowChangeEvent(((Table20Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable20Row(Table20Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table20DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table11DataTable : global::System.Data.TypedTableBase<Table11Row> {
            
            private global::System.Data.DataColumn columnunionname;
            
            private global::System.Data.DataColumn columnpacca;
            
            private global::System.Data.DataColumn columntin;
            
            private global::System.Data.DataColumn _columnstraw_bamboo;
            
            private global::System.Data.DataColumn columnearth;
            
            private global::System.Data.DataColumn columnothers;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11DataTable() {
                this.TableName = "Table11";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table11DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table11DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unionnameColumn {
                get {
                    return this.columnunionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paccaColumn {
                get {
                    return this.columnpacca;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tinColumn {
                get {
                    return this.columntin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _straw_bambooColumn {
                get {
                    return this._columnstraw_bamboo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn earthColumn {
                get {
                    return this.columnearth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn othersColumn {
                get {
                    return this.columnothers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11Row this[int index] {
                get {
                    return ((Table11Row)(this.Rows[index]));
                }
            }
            
            public event Table11RowChangeEventHandler Table11RowChanging;
            
            public event Table11RowChangeEventHandler Table11RowChanged;
            
            public event Table11RowChangeEventHandler Table11RowDeleting;
            
            public event Table11RowChangeEventHandler Table11RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable11Row(Table11Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11Row AddTable11Row(string unionname, int pacca, int tin, int _straw_bamboo, int earth, int others, int total) {
                Table11Row rowTable11Row = ((Table11Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        unionname,
                        pacca,
                        tin,
                        _straw_bamboo,
                        earth,
                        others,
                        total};
                rowTable11Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable11Row);
                return rowTable11Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table11DataTable cln = ((Table11DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table11DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunionname = base.Columns["unionname"];
                this.columnpacca = base.Columns["pacca"];
                this.columntin = base.Columns["tin"];
                this._columnstraw_bamboo = base.Columns["straw/bamboo"];
                this.columnearth = base.Columns["earth"];
                this.columnothers = base.Columns["others"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunionname = new global::System.Data.DataColumn("unionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunionname);
                this.columnpacca = new global::System.Data.DataColumn("pacca", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpacca);
                this.columntin = new global::System.Data.DataColumn("tin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntin);
                this._columnstraw_bamboo = new global::System.Data.DataColumn("straw/bamboo", typeof(int), null, global::System.Data.MappingType.Element);
                this._columnstraw_bamboo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstraw_bamboo");
                this._columnstraw_bamboo.ExtendedProperties.Add("Generator_UserColumnName", "straw/bamboo");
                base.Columns.Add(this._columnstraw_bamboo);
                this.columnearth = new global::System.Data.DataColumn("earth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnearth);
                this.columnothers = new global::System.Data.DataColumn("others", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnothers);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunionname.AllowDBNull = false;
                this.columnunionname.MaxLength = 20;
                this.columnpacca.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11Row NewTable11Row() {
                return ((Table11Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table11Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table11Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table11RowChanged != null)) {
                    this.Table11RowChanged(this, new Table11RowChangeEvent(((Table11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table11RowChanging != null)) {
                    this.Table11RowChanging(this, new Table11RowChangeEvent(((Table11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table11RowDeleted != null)) {
                    this.Table11RowDeleted(this, new Table11RowChangeEvent(((Table11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table11RowDeleting != null)) {
                    this.Table11RowDeleting(this, new Table11RowChangeEvent(((Table11Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable11Row(Table11Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table11DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table11ADataTable : global::System.Data.TypedTableBase<Table11ARow> {
            
            private global::System.Data.DataColumn columnunionname;
            
            private global::System.Data.DataColumn columnpacca;
            
            private global::System.Data.DataColumn columntin;
            
            private global::System.Data.DataColumn _columnstraw_bamboo;
            
            private global::System.Data.DataColumn columnearth;
            
            private global::System.Data.DataColumn columnothers;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11ADataTable() {
                this.TableName = "Table11A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table11ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table11ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unionnameColumn {
                get {
                    return this.columnunionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paccaColumn {
                get {
                    return this.columnpacca;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tinColumn {
                get {
                    return this.columntin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _straw_bambooColumn {
                get {
                    return this._columnstraw_bamboo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn earthColumn {
                get {
                    return this.columnearth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn othersColumn {
                get {
                    return this.columnothers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11ARow this[int index] {
                get {
                    return ((Table11ARow)(this.Rows[index]));
                }
            }
            
            public event Table11ARowChangeEventHandler Table11ARowChanging;
            
            public event Table11ARowChangeEventHandler Table11ARowChanged;
            
            public event Table11ARowChangeEventHandler Table11ARowDeleting;
            
            public event Table11ARowChangeEventHandler Table11ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable11ARow(Table11ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11ARow AddTable11ARow(string unionname, int pacca, int tin, int _straw_bamboo, int earth, int others, int total) {
                Table11ARow rowTable11ARow = ((Table11ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        unionname,
                        pacca,
                        tin,
                        _straw_bamboo,
                        earth,
                        others,
                        total};
                rowTable11ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable11ARow);
                return rowTable11ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table11ADataTable cln = ((Table11ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table11ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunionname = base.Columns["unionname"];
                this.columnpacca = base.Columns["pacca"];
                this.columntin = base.Columns["tin"];
                this._columnstraw_bamboo = base.Columns["straw/bamboo"];
                this.columnearth = base.Columns["earth"];
                this.columnothers = base.Columns["others"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunionname = new global::System.Data.DataColumn("unionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunionname);
                this.columnpacca = new global::System.Data.DataColumn("pacca", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpacca);
                this.columntin = new global::System.Data.DataColumn("tin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntin);
                this._columnstraw_bamboo = new global::System.Data.DataColumn("straw/bamboo", typeof(int), null, global::System.Data.MappingType.Element);
                this._columnstraw_bamboo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstraw_bamboo");
                this._columnstraw_bamboo.ExtendedProperties.Add("Generator_UserColumnName", "straw/bamboo");
                base.Columns.Add(this._columnstraw_bamboo);
                this.columnearth = new global::System.Data.DataColumn("earth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnearth);
                this.columnothers = new global::System.Data.DataColumn("others", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnothers);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunionname.AllowDBNull = false;
                this.columnunionname.MaxLength = 20;
                this.columnpacca.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11ARow NewTable11ARow() {
                return ((Table11ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table11ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table11ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table11ARowChanged != null)) {
                    this.Table11ARowChanged(this, new Table11ARowChangeEvent(((Table11ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table11ARowChanging != null)) {
                    this.Table11ARowChanging(this, new Table11ARowChangeEvent(((Table11ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table11ARowDeleted != null)) {
                    this.Table11ARowDeleted(this, new Table11ARowChangeEvent(((Table11ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table11ARowDeleting != null)) {
                    this.Table11ARowDeleting(this, new Table11ARowChangeEvent(((Table11ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable11ARow(Table11ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table11ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table11BDataTable : global::System.Data.TypedTableBase<Table11BRow> {
            
            private global::System.Data.DataColumn columnunionname;
            
            private global::System.Data.DataColumn columnpacca;
            
            private global::System.Data.DataColumn columntin;
            
            private global::System.Data.DataColumn _columnstraw_bamboo;
            
            private global::System.Data.DataColumn columnearth;
            
            private global::System.Data.DataColumn columnothers;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11BDataTable() {
                this.TableName = "Table11B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table11BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table11BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unionnameColumn {
                get {
                    return this.columnunionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paccaColumn {
                get {
                    return this.columnpacca;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tinColumn {
                get {
                    return this.columntin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _straw_bambooColumn {
                get {
                    return this._columnstraw_bamboo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn earthColumn {
                get {
                    return this.columnearth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn othersColumn {
                get {
                    return this.columnothers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11BRow this[int index] {
                get {
                    return ((Table11BRow)(this.Rows[index]));
                }
            }
            
            public event Table11BRowChangeEventHandler Table11BRowChanging;
            
            public event Table11BRowChangeEventHandler Table11BRowChanged;
            
            public event Table11BRowChangeEventHandler Table11BRowDeleting;
            
            public event Table11BRowChangeEventHandler Table11BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable11BRow(Table11BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11BRow AddTable11BRow(string unionname, int pacca, int tin, int _straw_bamboo, int earth, int others, int total) {
                Table11BRow rowTable11BRow = ((Table11BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        unionname,
                        pacca,
                        tin,
                        _straw_bamboo,
                        earth,
                        others,
                        total};
                rowTable11BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable11BRow);
                return rowTable11BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table11BDataTable cln = ((Table11BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table11BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunionname = base.Columns["unionname"];
                this.columnpacca = base.Columns["pacca"];
                this.columntin = base.Columns["tin"];
                this._columnstraw_bamboo = base.Columns["straw/bamboo"];
                this.columnearth = base.Columns["earth"];
                this.columnothers = base.Columns["others"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunionname = new global::System.Data.DataColumn("unionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunionname);
                this.columnpacca = new global::System.Data.DataColumn("pacca", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpacca);
                this.columntin = new global::System.Data.DataColumn("tin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntin);
                this._columnstraw_bamboo = new global::System.Data.DataColumn("straw/bamboo", typeof(int), null, global::System.Data.MappingType.Element);
                this._columnstraw_bamboo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnstraw_bamboo");
                this._columnstraw_bamboo.ExtendedProperties.Add("Generator_UserColumnName", "straw/bamboo");
                base.Columns.Add(this._columnstraw_bamboo);
                this.columnearth = new global::System.Data.DataColumn("earth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnearth);
                this.columnothers = new global::System.Data.DataColumn("others", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnothers);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunionname.AllowDBNull = false;
                this.columnunionname.MaxLength = 20;
                this.columnpacca.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11BRow NewTable11BRow() {
                return ((Table11BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table11BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table11BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table11BRowChanged != null)) {
                    this.Table11BRowChanged(this, new Table11BRowChangeEvent(((Table11BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table11BRowChanging != null)) {
                    this.Table11BRowChanging(this, new Table11BRowChangeEvent(((Table11BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table11BRowDeleted != null)) {
                    this.Table11BRowDeleted(this, new Table11BRowChangeEvent(((Table11BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table11BRowDeleting != null)) {
                    this.Table11BRowDeleting(this, new Table11BRowChangeEvent(((Table11BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable11BRow(Table11BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table11BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table10DataTable : global::System.Data.TypedTableBase<Table10Row> {
            
            private global::System.Data.DataColumn columnunionname;
            
            private global::System.Data.DataColumn _column_5;
            
            private global::System.Data.DataColumn _column5_6;
            
            private global::System.Data.DataColumn _column7_8;
            
            private global::System.Data.DataColumn _column9_10;
            
            private global::System.Data.DataColumn _column11_;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10DataTable() {
                this.TableName = "Table10";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table10DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table10DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unionnameColumn {
                get {
                    return this.columnunionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5Column {
                get {
                    return this._column_5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5_6Column {
                get {
                    return this._column5_6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _7_8Column {
                get {
                    return this._column7_8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _9_10Column {
                get {
                    return this._column9_10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _11_Column {
                get {
                    return this._column11_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row this[int index] {
                get {
                    return ((Table10Row)(this.Rows[index]));
                }
            }
            
            public event Table10RowChangeEventHandler Table10RowChanging;
            
            public event Table10RowChangeEventHandler Table10RowChanged;
            
            public event Table10RowChangeEventHandler Table10RowDeleting;
            
            public event Table10RowChangeEventHandler Table10RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable10Row(Table10Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row AddTable10Row(string unionname, int @__5, int _5_6, int _7_8, int _9_10, int _11_, int total) {
                Table10Row rowTable10Row = ((Table10Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        unionname,
                        @__5,
                        _5_6,
                        _7_8,
                        _9_10,
                        _11_,
                        total};
                rowTable10Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable10Row);
                return rowTable10Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table10DataTable cln = ((Table10DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table10DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunionname = base.Columns["unionname"];
                this._column_5 = base.Columns["<5"];
                this._column5_6 = base.Columns["5-6"];
                this._column7_8 = base.Columns["7-8"];
                this._column9_10 = base.Columns["9-10"];
                this._column11_ = base.Columns["11+"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunionname = new global::System.Data.DataColumn("unionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunionname);
                this._column_5 = new global::System.Data.DataColumn("<5", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5");
                this._column_5.ExtendedProperties.Add("Generator_UserColumnName", "<5");
                base.Columns.Add(this._column_5);
                this._column5_6 = new global::System.Data.DataColumn("5-6", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5_6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5_6");
                this._column5_6.ExtendedProperties.Add("Generator_UserColumnName", "5-6");
                base.Columns.Add(this._column5_6);
                this._column7_8 = new global::System.Data.DataColumn("7-8", typeof(int), null, global::System.Data.MappingType.Element);
                this._column7_8.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column7_8");
                this._column7_8.ExtendedProperties.Add("Generator_UserColumnName", "7-8");
                base.Columns.Add(this._column7_8);
                this._column9_10 = new global::System.Data.DataColumn("9-10", typeof(int), null, global::System.Data.MappingType.Element);
                this._column9_10.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column9_10");
                this._column9_10.ExtendedProperties.Add("Generator_UserColumnName", "9-10");
                base.Columns.Add(this._column9_10);
                this._column11_ = new global::System.Data.DataColumn("11+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column11_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column11_");
                this._column11_.ExtendedProperties.Add("Generator_UserColumnName", "11+");
                base.Columns.Add(this._column11_);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunionname.AllowDBNull = false;
                this.columnunionname.MaxLength = 20;
                this._column_5.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row NewTable10Row() {
                return ((Table10Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table10Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table10Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table10RowChanged != null)) {
                    this.Table10RowChanged(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table10RowChanging != null)) {
                    this.Table10RowChanging(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table10RowDeleted != null)) {
                    this.Table10RowDeleted(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table10RowDeleting != null)) {
                    this.Table10RowDeleting(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable10Row(Table10Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table10DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table21DataTable : global::System.Data.TypedTableBase<Table21Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_3;
            
            private global::System.Data.DataColumn _column3_4;
            
            private global::System.Data.DataColumn _column4_;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table21DataTable() {
                this.TableName = "Table21";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table21DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table21DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__3Column {
                get {
                    return this._column_3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3_4Column {
                get {
                    return this._column3_4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table21Row this[int index] {
                get {
                    return ((Table21Row)(this.Rows[index]));
                }
            }
            
            public event Table21RowChangeEventHandler Table21RowChanging;
            
            public event Table21RowChangeEventHandler Table21RowChanged;
            
            public event Table21RowChangeEventHandler Table21RowDeleting;
            
            public event Table21RowChangeEventHandler Table21RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable21Row(Table21Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table21Row AddTable21Row(string union_name, int @__3, int _3_4, int _4_, int total) {
                Table21Row rowTable21Row = ((Table21Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__3,
                        _3_4,
                        _4_,
                        total};
                rowTable21Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable21Row);
                return rowTable21Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table21DataTable cln = ((Table21DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table21DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_3 = base.Columns["<3"];
                this._column3_4 = base.Columns["3-4"];
                this._column4_ = base.Columns["4+"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_3 = new global::System.Data.DataColumn("<3", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_3.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_3");
                this._column_3.ExtendedProperties.Add("Generator_UserColumnName", "<3");
                base.Columns.Add(this._column_3);
                this._column3_4 = new global::System.Data.DataColumn("3-4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3_4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3_4");
                this._column3_4.ExtendedProperties.Add("Generator_UserColumnName", "3-4");
                base.Columns.Add(this._column3_4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column_3.AllowDBNull = false;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table21Row NewTable21Row() {
                return ((Table21Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table21Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table21Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table21RowChanged != null)) {
                    this.Table21RowChanged(this, new Table21RowChangeEvent(((Table21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table21RowChanging != null)) {
                    this.Table21RowChanging(this, new Table21RowChangeEvent(((Table21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table21RowDeleted != null)) {
                    this.Table21RowDeleted(this, new Table21RowChangeEvent(((Table21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table21RowDeleting != null)) {
                    this.Table21RowDeleting(this, new Table21RowChangeEvent(((Table21Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable21Row(Table21Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table21DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table18DataTable : global::System.Data.TypedTableBase<Table18Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnyes;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DataTable() {
                this.TableName = "Table18";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table18DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yesColumn {
                get {
                    return this.columnyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18Row this[int index] {
                get {
                    return ((Table18Row)(this.Rows[index]));
                }
            }
            
            public event Table18RowChangeEventHandler Table18RowChanging;
            
            public event Table18RowChangeEventHandler Table18RowChanged;
            
            public event Table18RowChangeEventHandler Table18RowDeleting;
            
            public event Table18RowChangeEventHandler Table18RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable18Row(Table18Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18Row AddTable18Row(string union_name, int yes, int no, int total) {
                Table18Row rowTable18Row = ((Table18Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        yes,
                        no,
                        total};
                rowTable18Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable18Row);
                return rowTable18Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table18DataTable cln = ((Table18DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table18DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnyes = base.Columns["yes"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnyes = new global::System.Data.DataColumn("yes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyes);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnyes.ReadOnly = true;
                this.columnno.ReadOnly = true;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18Row NewTable18Row() {
                return ((Table18Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table18Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table18Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table18RowChanged != null)) {
                    this.Table18RowChanged(this, new Table18RowChangeEvent(((Table18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table18RowChanging != null)) {
                    this.Table18RowChanging(this, new Table18RowChangeEvent(((Table18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table18RowDeleted != null)) {
                    this.Table18RowDeleted(this, new Table18RowChangeEvent(((Table18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table18RowDeleting != null)) {
                    this.Table18RowDeleting(this, new Table18RowChangeEvent(((Table18Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable18Row(Table18Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table18DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table18ADataTable : global::System.Data.TypedTableBase<Table18ARow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnyes;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18ADataTable() {
                this.TableName = "Table18A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table18ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yesColumn {
                get {
                    return this.columnyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18ARow this[int index] {
                get {
                    return ((Table18ARow)(this.Rows[index]));
                }
            }
            
            public event Table18ARowChangeEventHandler Table18ARowChanging;
            
            public event Table18ARowChangeEventHandler Table18ARowChanged;
            
            public event Table18ARowChangeEventHandler Table18ARowDeleting;
            
            public event Table18ARowChangeEventHandler Table18ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable18ARow(Table18ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18ARow AddTable18ARow(string union_name, int yes, int no, int total) {
                Table18ARow rowTable18ARow = ((Table18ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        yes,
                        no,
                        total};
                rowTable18ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable18ARow);
                return rowTable18ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table18ADataTable cln = ((Table18ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table18ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnyes = base.Columns["yes"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnyes = new global::System.Data.DataColumn("yes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyes);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnyes.ReadOnly = true;
                this.columnno.ReadOnly = true;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18ARow NewTable18ARow() {
                return ((Table18ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table18ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table18ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table18ARowChanged != null)) {
                    this.Table18ARowChanged(this, new Table18ARowChangeEvent(((Table18ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table18ARowChanging != null)) {
                    this.Table18ARowChanging(this, new Table18ARowChangeEvent(((Table18ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table18ARowDeleted != null)) {
                    this.Table18ARowDeleted(this, new Table18ARowChangeEvent(((Table18ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table18ARowDeleting != null)) {
                    this.Table18ARowDeleting(this, new Table18ARowChangeEvent(((Table18ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable18ARow(Table18ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table18ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table18BDataTable : global::System.Data.TypedTableBase<Table18BRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnyes;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18BDataTable() {
                this.TableName = "Table18B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table18BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yesColumn {
                get {
                    return this.columnyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18BRow this[int index] {
                get {
                    return ((Table18BRow)(this.Rows[index]));
                }
            }
            
            public event Table18BRowChangeEventHandler Table18BRowChanging;
            
            public event Table18BRowChangeEventHandler Table18BRowChanged;
            
            public event Table18BRowChangeEventHandler Table18BRowDeleting;
            
            public event Table18BRowChangeEventHandler Table18BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable18BRow(Table18BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18BRow AddTable18BRow(string union_name, int yes, int no, int total) {
                Table18BRow rowTable18BRow = ((Table18BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        yes,
                        no,
                        total};
                rowTable18BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable18BRow);
                return rowTable18BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table18BDataTable cln = ((Table18BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table18BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnyes = base.Columns["yes"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnyes = new global::System.Data.DataColumn("yes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyes);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnyes.ReadOnly = true;
                this.columnno.ReadOnly = true;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18BRow NewTable18BRow() {
                return ((Table18BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table18BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table18BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table18BRowChanged != null)) {
                    this.Table18BRowChanged(this, new Table18BRowChangeEvent(((Table18BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table18BRowChanging != null)) {
                    this.Table18BRowChanging(this, new Table18BRowChangeEvent(((Table18BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table18BRowDeleted != null)) {
                    this.Table18BRowDeleted(this, new Table18BRowChangeEvent(((Table18BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table18BRowDeleting != null)) {
                    this.Table18BRowDeleting(this, new Table18BRowChangeEvent(((Table18BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable18BRow(Table18BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table18BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table18DDataTable : global::System.Data.TypedTableBase<Table18DRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnyes;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DDataTable() {
                this.TableName = "Table18D";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18DDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table18DDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yesColumn {
                get {
                    return this.columnyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DRow this[int index] {
                get {
                    return ((Table18DRow)(this.Rows[index]));
                }
            }
            
            public event Table18DRowChangeEventHandler Table18DRowChanging;
            
            public event Table18DRowChangeEventHandler Table18DRowChanged;
            
            public event Table18DRowChangeEventHandler Table18DRowDeleting;
            
            public event Table18DRowChangeEventHandler Table18DRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable18DRow(Table18DRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DRow AddTable18DRow(string union_name, int yes, int no, int total) {
                Table18DRow rowTable18DRow = ((Table18DRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        yes,
                        no,
                        total};
                rowTable18DRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable18DRow);
                return rowTable18DRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table18DDataTable cln = ((Table18DDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table18DDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnyes = base.Columns["yes"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnyes = new global::System.Data.DataColumn("yes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyes);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnyes.ReadOnly = true;
                this.columnno.ReadOnly = true;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DRow NewTable18DRow() {
                return ((Table18DRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table18DRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table18DRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table18DRowChanged != null)) {
                    this.Table18DRowChanged(this, new Table18DRowChangeEvent(((Table18DRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table18DRowChanging != null)) {
                    this.Table18DRowChanging(this, new Table18DRowChangeEvent(((Table18DRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table18DRowDeleted != null)) {
                    this.Table18DRowDeleted(this, new Table18DRowChangeEvent(((Table18DRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table18DRowDeleting != null)) {
                    this.Table18DRowDeleting(this, new Table18DRowChangeEvent(((Table18DRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable18DRow(Table18DRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table18DDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table18CDataTable : global::System.Data.TypedTableBase<Table18CRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnyes;
            
            private global::System.Data.DataColumn columnno;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18CDataTable() {
                this.TableName = "Table18C";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18CDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table18CDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yesColumn {
                get {
                    return this.columnyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noColumn {
                get {
                    return this.columnno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18CRow this[int index] {
                get {
                    return ((Table18CRow)(this.Rows[index]));
                }
            }
            
            public event Table18CRowChangeEventHandler Table18CRowChanging;
            
            public event Table18CRowChangeEventHandler Table18CRowChanged;
            
            public event Table18CRowChangeEventHandler Table18CRowDeleting;
            
            public event Table18CRowChangeEventHandler Table18CRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable18CRow(Table18CRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18CRow AddTable18CRow(string union_name, int yes, int no, int total) {
                Table18CRow rowTable18CRow = ((Table18CRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        yes,
                        no,
                        total};
                rowTable18CRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable18CRow);
                return rowTable18CRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table18CDataTable cln = ((Table18CDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table18CDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnyes = base.Columns["yes"];
                this.columnno = base.Columns["no"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnyes = new global::System.Data.DataColumn("yes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyes);
                this.columnno = new global::System.Data.DataColumn("no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this.columnyes.ReadOnly = true;
                this.columnno.ReadOnly = true;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18CRow NewTable18CRow() {
                return ((Table18CRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table18CRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table18CRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table18CRowChanged != null)) {
                    this.Table18CRowChanged(this, new Table18CRowChangeEvent(((Table18CRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table18CRowChanging != null)) {
                    this.Table18CRowChanging(this, new Table18CRowChangeEvent(((Table18CRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table18CRowDeleted != null)) {
                    this.Table18CRowDeleted(this, new Table18CRowChangeEvent(((Table18CRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table18CRowDeleting != null)) {
                    this.Table18CRowDeleting(this, new Table18CRowChangeEvent(((Table18CRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable18CRow(Table18CRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table18CDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tableDataTable1.statusColumn]));
                }
                set {
                    this[this.tableDataTable1.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableDataTable1.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableDataTable1.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableDataTable1.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableDataTable1.femaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableDataTable1.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableDataTable1.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table1Row : global::System.Data.DataRow {
            
            private Table1DataTable tableTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable1 = ((Table1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable1.union_nameColumn]));
                }
                set {
                    this[this.tableTable1.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable1.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable1.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable1.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable1.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable1.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable1.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table_3Row : global::System.Data.DataRow {
            
            private Table_3DataTable tableTable_3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table_3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable_3 = ((Table_3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable_3.union_nameColumn]));
                }
                set {
                    this[this.tableTable_3.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int self {
                get {
                    return ((int)(this[this.tableTable_3.selfColumn]));
                }
                set {
                    this[this.tableTable_3.selfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int wife {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.wifeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'wife\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.wifeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int husband {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.husbandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'husband\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.husbandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int son {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.sonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'son\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.sonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int daughter {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.daughterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'daughter\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.daughterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fathermother {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.fathermotherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fathermother\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.fathermotherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int others {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.othersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'others\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.othersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswifeNull() {
                return this.IsNull(this.tableTable_3.wifeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwifeNull() {
                this[this.tableTable_3.wifeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshusbandNull() {
                return this.IsNull(this.tableTable_3.husbandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethusbandNull() {
                this[this.tableTable_3.husbandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssonNull() {
                return this.IsNull(this.tableTable_3.sonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsonNull() {
                this[this.tableTable_3.sonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdaughterNull() {
                return this.IsNull(this.tableTable_3.daughterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdaughterNull() {
                this[this.tableTable_3.daughterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfathermotherNull() {
                return this.IsNull(this.tableTable_3.fathermotherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfathermotherNull() {
                this[this.tableTable_3.fathermotherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsothersNull() {
                return this.IsNull(this.tableTable_3.othersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetothersNull() {
                this[this.tableTable_3.othersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable_3.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable_3.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table6Row : global::System.Data.DataRow {
            
            private Table6DataTable tableTable6;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table6Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable6 = ((Table6DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string litercystatus {
                get {
                    return ((string)(this[this.tableTable6.litercystatusColumn]));
                }
                set {
                    this[this.tableTable6.litercystatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable6.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable6.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable6.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable6.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable6.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable6.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable6.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable6.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table7Row : global::System.Data.DataRow {
            
            private Table7DataTable tableTable7;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table7Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable7 = ((Table7DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string litercystatus {
                get {
                    return ((string)(this[this.tableTable7.litercystatusColumn]));
                }
                set {
                    this[this.tableTable7.litercystatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable7.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable7.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable7.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable7.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable7.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable7.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable7.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable7.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table8Row : global::System.Data.DataRow {
            
            private Table8DataTable tableTable8;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table8Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable8 = ((Table8DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string occupation {
                get {
                    return ((string)(this[this.tableTable8.occupationColumn]));
                }
                set {
                    this[this.tableTable8.occupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable8.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable8.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable8.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable8.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable8.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable8.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable8.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable8.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table9Row : global::System.Data.DataRow {
            
            private Table9DataTable tableTable9;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table9Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable9 = ((Table9DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string occupation {
                get {
                    return ((string)(this[this.tableTable9.occupationColumn]));
                }
                set {
                    this[this.tableTable9.occupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable9.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable9.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable9.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable9.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable9.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable9.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable9.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable9.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table12Row : global::System.Data.DataRow {
            
            private Table12DataTable tableTable12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table12Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable12 = ((Table12DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable12.union_nameColumn]));
                }
                set {
                    this[this.tableTable12.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5000 {
                get {
                    return ((int)(this[this.tableTable12.@__5000Column]));
                }
                set {
                    this[this.tableTable12.@__5000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5000_9999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._5000_9999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5000-9999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._5000_9999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _10000_14999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._10000_14999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'10000-14999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._10000_14999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _15000_19999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._15000_19999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'15000-19999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._15000_19999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _20000_24999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._20000_24999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'20000-24999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._20000_24999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _25000_49999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._25000_49999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'25000-49999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._25000_49999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _50000_ {
                get {
                    try {
                        return ((int)(this[this.tableTable12._50000_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'50000+\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._50000_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable12.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5000_9999Null() {
                return this.IsNull(this.tableTable12._5000_9999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5000_9999Null() {
                this[this.tableTable12._5000_9999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_10000_14999Null() {
                return this.IsNull(this.tableTable12._10000_14999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_10000_14999Null() {
                this[this.tableTable12._10000_14999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_15000_19999Null() {
                return this.IsNull(this.tableTable12._15000_19999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_15000_19999Null() {
                this[this.tableTable12._15000_19999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_20000_24999Null() {
                return this.IsNull(this.tableTable12._20000_24999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_20000_24999Null() {
                this[this.tableTable12._20000_24999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_25000_49999Null() {
                return this.IsNull(this.tableTable12._25000_49999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_25000_49999Null() {
                this[this.tableTable12._25000_49999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_50000_Null() {
                return this.IsNull(this.tableTable12._50000_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_50000_Null() {
                this[this.tableTable12._50000_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable12.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable12.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table13Row : global::System.Data.DataRow {
            
            private Table13DataTable tableTable13;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable13 = ((Table13DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable13.union_nameColumn]));
                }
                set {
                    this[this.tableTable13.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no_land {
                get {
                    return ((int)(this[this.tableTable13.no_landColumn]));
                }
                set {
                    this[this.tableTable13.no_landColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_25___0_49 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._0_25___0_49Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0_25 - 0_49\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._0_25___0_49Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_50___0_99 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._0_50___0_99Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0_50 - 0_99\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._0_50___0_99Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _1_0___1_49 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._1_0___1_49Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'1_0 - 1_49\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._1_0___1_49Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _1_5_1_99 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._1_5_1_99Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'1_5-1_99\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._1_5_1_99Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _2_ {
                get {
                    try {
                        return ((int)(this[this.tableTable13._2_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'2+\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._2_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ___05 {
                get {
                    try {
                        return ((int)(this[this.tableTable13.___05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<_05\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13.___05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_05___0_24 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._0_05___0_24Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0_05 - 0_24\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._0_05___0_24Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable13.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_25___0_49Null() {
                return this.IsNull(this.tableTable13._0_25___0_49Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_25___0_49Null() {
                this[this.tableTable13._0_25___0_49Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_50___0_99Null() {
                return this.IsNull(this.tableTable13._0_50___0_99Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_50___0_99Null() {
                this[this.tableTable13._0_50___0_99Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_1_0___1_49Null() {
                return this.IsNull(this.tableTable13._1_0___1_49Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_1_0___1_49Null() {
                this[this.tableTable13._1_0___1_49Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_1_5_1_99Null() {
                return this.IsNull(this.tableTable13._1_5_1_99Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_1_5_1_99Null() {
                this[this.tableTable13._1_5_1_99Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_2_Null() {
                return this.IsNull(this.tableTable13._2_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_2_Null() {
                this[this.tableTable13._2_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is___05Null() {
                return this.IsNull(this.tableTable13.___05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set___05Null() {
                this[this.tableTable13.___05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_05___0_24Null() {
                return this.IsNull(this.tableTable13._0_05___0_24Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_05___0_24Null() {
                this[this.tableTable13._0_05___0_24Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable13.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable13.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table13ARow : global::System.Data.DataRow {
            
            private Table13ADataTable tableTable13A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable13A = ((Table13ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable13A.union_nameColumn]));
                }
                set {
                    this[this.tableTable13A.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5000 {
                get {
                    return ((int)(this[this.tableTable13A.@__5000Column]));
                }
                set {
                    this[this.tableTable13A.@__5000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5000_9999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._5000_9999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5000-9999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._5000_9999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _10000_14999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._10000_14999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'10000-14999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._10000_14999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _15000_19999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._15000_19999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'15000-19999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._15000_19999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _20000_24999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._20000_24999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'20000-24999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._20000_24999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _25000_49999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._25000_49999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'25000-49999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._25000_49999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _50000_ {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._50000_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'50000+\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._50000_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable13A.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5000_9999Null() {
                return this.IsNull(this.tableTable13A._5000_9999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5000_9999Null() {
                this[this.tableTable13A._5000_9999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_10000_14999Null() {
                return this.IsNull(this.tableTable13A._10000_14999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_10000_14999Null() {
                this[this.tableTable13A._10000_14999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_15000_19999Null() {
                return this.IsNull(this.tableTable13A._15000_19999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_15000_19999Null() {
                this[this.tableTable13A._15000_19999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_20000_24999Null() {
                return this.IsNull(this.tableTable13A._20000_24999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_20000_24999Null() {
                this[this.tableTable13A._20000_24999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_25000_49999Null() {
                return this.IsNull(this.tableTable13A._25000_49999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_25000_49999Null() {
                this[this.tableTable13A._25000_49999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_50000_Null() {
                return this.IsNull(this.tableTable13A._50000_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_50000_Null() {
                this[this.tableTable13A._50000_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable13A.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable13A.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table13BRow : global::System.Data.DataRow {
            
            private Table13BDataTable tableTable13B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable13B = ((Table13BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable13B.union_nameColumn]));
                }
                set {
                    this[this.tableTable13B.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B.@__5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<5\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B.@__5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _11___15 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._11___15Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'11 - 15\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._11___15Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    return ((int)(this[this.tableTable13B.noColumn]));
                }
                set {
                    this[this.tableTable13B.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5___10 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._5___10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5 - 10\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._5___10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _16___20 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._16___20Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'16 - 20\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._16___20Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _20_ {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._20_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'20+\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._20_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable13B.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is__5Null() {
                return this.IsNull(this.tableTable13B.@__5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set__5Null() {
                this[this.tableTable13B.@__5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_11___15Null() {
                return this.IsNull(this.tableTable13B._11___15Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_11___15Null() {
                this[this.tableTable13B._11___15Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5___10Null() {
                return this.IsNull(this.tableTable13B._5___10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5___10Null() {
                this[this.tableTable13B._5___10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_16___20Null() {
                return this.IsNull(this.tableTable13B._16___20Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_16___20Null() {
                this[this.tableTable13B._16___20Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_20_Null() {
                return this.IsNull(this.tableTable13B._20_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_20_Null() {
                this[this.tableTable13B._20_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable13B.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable13B.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table14CowRow : global::System.Data.DataRow {
            
            private Table14CowDataTable tableTable14Cow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14CowRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable14Cow = ((Table14CowDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable14Cow.union_nameColumn]));
                }
                set {
                    this[this.tableTable14Cow.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _1_2 {
                get {
                    return ((int)(this[this.tableTable14Cow._1_2Column]));
                }
                set {
                    this[this.tableTable14Cow._1_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable14Cow._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable14Cow._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable14Cow._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable14Cow._4_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable14Cow.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable14Cow.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable14Cow.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable14Cow.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table14GoatRow : global::System.Data.DataRow {
            
            private Table14GoatDataTable tableTable14Goat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14GoatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable14Goat = ((Table14GoatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable14Goat.union_nameColumn]));
                }
                set {
                    this[this.tableTable14Goat.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_2 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Goat._0_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0-2\' in table \'Table14Goat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Goat._0_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Goat._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table14Goat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Goat._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable14Goat._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table14Goat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Goat._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_2Null() {
                return this.IsNull(this.tableTable14Goat._0_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_2Null() {
                this[this.tableTable14Goat._0_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable14Goat._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable14Goat._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable14Goat._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable14Goat._4_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table14HenRow : global::System.Data.DataRow {
            
            private Table14HenDataTable tableTable14Hen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14HenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable14Hen = ((Table14HenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable14Hen.union_nameColumn]));
                }
                set {
                    this[this.tableTable14Hen.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_2 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Hen._0_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0-2\' in table \'Table14Hen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Hen._0_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Hen._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table14Hen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Hen._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable14Hen._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table14Hen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Hen._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_2Null() {
                return this.IsNull(this.tableTable14Hen._0_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_2Null() {
                this[this.tableTable14Hen._0_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable14Hen._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable14Hen._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable14Hen._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable14Hen._4_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table15Row : global::System.Data.DataRow {
            
            private Table15DataTable tableTable15;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table15Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable15 = ((Table15DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable15.union_nameColumn]));
                }
                set {
                    this[this.tableTable15.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable15._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable15._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _1_2 {
                get {
                    return ((int)(this[this.tableTable15._1_2Column]));
                }
                set {
                    this[this.tableTable15._1_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable15.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable15.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable15._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable15._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable15._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable15._4_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable15.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable15.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable15.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable15.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table16Row : global::System.Data.DataRow {
            
            private Table16DataTable tableTable16;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table16Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable16 = ((Table16DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable16.union_nameColumn]));
                }
                set {
                    this[this.tableTable16.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0___3 {
                get {
                    return ((int)(this[this.tableTable16._0___3Column]));
                }
                set {
                    this[this.tableTable16._0___3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4___6 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._4___6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4 - 6\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._4___6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _7___9 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._7___9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'7 - 9\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._7___9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _10___11 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._10___11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'10 - 11\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._10___11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _12 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'12\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable16.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4___6Null() {
                return this.IsNull(this.tableTable16._4___6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4___6Null() {
                this[this.tableTable16._4___6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_7___9Null() {
                return this.IsNull(this.tableTable16._7___9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_7___9Null() {
                this[this.tableTable16._7___9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_10___11Null() {
                return this.IsNull(this.tableTable16._10___11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_10___11Null() {
                this[this.tableTable16._10___11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_12Null() {
                return this.IsNull(this.tableTable16._12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_12Null() {
                this[this.tableTable16._12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable16.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable16.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table17Row : global::System.Data.DataRow {
            
            private Table17DataTable tableTable17;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table17Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable17 = ((Table17DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable17.union_nameColumn]));
                }
                set {
                    this[this.tableTable17.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0___120 {
                get {
                    return ((int)(this[this.tableTable17._0___120Column]));
                }
                set {
                    this[this.tableTable17._0___120Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _121___180 {
                get {
                    try {
                        return ((int)(this[this.tableTable17._121___180Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'121 - 180\' in table \'Table17\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable17._121___180Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _181___240 {
                get {
                    try {
                        return ((int)(this[this.tableTable17._181___240Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'181 - 240\' in table \'Table17\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable17._181___240Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _241___300 {
                get {
                    try {
                        return ((int)(this[this.tableTable17._241___300Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'241 - 300\' in table \'Table17\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable17._241___300Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _300_ {
                get {
                    try {
                        return ((int)(this[this.tableTable17._300_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'300+\' in table \'Table17\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable17._300_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable17.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table17\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable17.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_121___180Null() {
                return this.IsNull(this.tableTable17._121___180Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_121___180Null() {
                this[this.tableTable17._121___180Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_181___240Null() {
                return this.IsNull(this.tableTable17._181___240Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_181___240Null() {
                this[this.tableTable17._181___240Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_241___300Null() {
                return this.IsNull(this.tableTable17._241___300Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_241___300Null() {
                this[this.tableTable17._241___300Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_300_Null() {
                return this.IsNull(this.tableTable17._300_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_300_Null() {
                this[this.tableTable17._300_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable17.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable17.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table20Row : global::System.Data.DataRow {
            
            private Table20DataTable tableTable20;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table20Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable20 = ((Table20DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unionname {
                get {
                    return ((string)(this[this.tableTable20.unionnameColumn]));
                }
                set {
                    this[this.tableTable20.unionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yes {
                get {
                    return ((int)(this[this.tableTable20.yesColumn]));
                }
                set {
                    this[this.tableTable20.yesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable20.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table20\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable20.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable20.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table20\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable20.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable20.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable20.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable20.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable20.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table11Row : global::System.Data.DataRow {
            
            private Table11DataTable tableTable11;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table11Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable11 = ((Table11DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unionname {
                get {
                    return ((string)(this[this.tableTable11.unionnameColumn]));
                }
                set {
                    this[this.tableTable11.unionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pacca {
                get {
                    return ((int)(this[this.tableTable11.paccaColumn]));
                }
                set {
                    this[this.tableTable11.paccaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tin {
                get {
                    try {
                        return ((int)(this[this.tableTable11.tinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tin\' in table \'Table11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11.tinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _straw_bamboo {
                get {
                    try {
                        return ((int)(this[this.tableTable11._straw_bambooColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'straw/bamboo\' in table \'Table11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11._straw_bambooColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int earth {
                get {
                    try {
                        return ((int)(this[this.tableTable11.earthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'earth\' in table \'Table11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11.earthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int others {
                get {
                    try {
                        return ((int)(this[this.tableTable11.othersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'others\' in table \'Table11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11.othersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable11.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table11\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstinNull() {
                return this.IsNull(this.tableTable11.tinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettinNull() {
                this[this.tableTable11.tinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_straw_bambooNull() {
                return this.IsNull(this.tableTable11._straw_bambooColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_straw_bambooNull() {
                this[this.tableTable11._straw_bambooColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsearthNull() {
                return this.IsNull(this.tableTable11.earthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetearthNull() {
                this[this.tableTable11.earthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsothersNull() {
                return this.IsNull(this.tableTable11.othersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetothersNull() {
                this[this.tableTable11.othersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable11.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable11.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table11ARow : global::System.Data.DataRow {
            
            private Table11ADataTable tableTable11A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table11ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable11A = ((Table11ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unionname {
                get {
                    return ((string)(this[this.tableTable11A.unionnameColumn]));
                }
                set {
                    this[this.tableTable11A.unionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pacca {
                get {
                    return ((int)(this[this.tableTable11A.paccaColumn]));
                }
                set {
                    this[this.tableTable11A.paccaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tin {
                get {
                    try {
                        return ((int)(this[this.tableTable11A.tinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tin\' in table \'Table11A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11A.tinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _straw_bamboo {
                get {
                    try {
                        return ((int)(this[this.tableTable11A._straw_bambooColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'straw/bamboo\' in table \'Table11A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11A._straw_bambooColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int earth {
                get {
                    try {
                        return ((int)(this[this.tableTable11A.earthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'earth\' in table \'Table11A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11A.earthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int others {
                get {
                    try {
                        return ((int)(this[this.tableTable11A.othersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'others\' in table \'Table11A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11A.othersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable11A.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table11A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11A.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstinNull() {
                return this.IsNull(this.tableTable11A.tinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettinNull() {
                this[this.tableTable11A.tinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_straw_bambooNull() {
                return this.IsNull(this.tableTable11A._straw_bambooColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_straw_bambooNull() {
                this[this.tableTable11A._straw_bambooColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsearthNull() {
                return this.IsNull(this.tableTable11A.earthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetearthNull() {
                this[this.tableTable11A.earthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsothersNull() {
                return this.IsNull(this.tableTable11A.othersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetothersNull() {
                this[this.tableTable11A.othersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable11A.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable11A.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table11BRow : global::System.Data.DataRow {
            
            private Table11BDataTable tableTable11B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table11BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable11B = ((Table11BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unionname {
                get {
                    return ((string)(this[this.tableTable11B.unionnameColumn]));
                }
                set {
                    this[this.tableTable11B.unionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pacca {
                get {
                    return ((int)(this[this.tableTable11B.paccaColumn]));
                }
                set {
                    this[this.tableTable11B.paccaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tin {
                get {
                    try {
                        return ((int)(this[this.tableTable11B.tinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tin\' in table \'Table11B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11B.tinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _straw_bamboo {
                get {
                    try {
                        return ((int)(this[this.tableTable11B._straw_bambooColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'straw/bamboo\' in table \'Table11B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11B._straw_bambooColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int earth {
                get {
                    try {
                        return ((int)(this[this.tableTable11B.earthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'earth\' in table \'Table11B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11B.earthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int others {
                get {
                    try {
                        return ((int)(this[this.tableTable11B.othersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'others\' in table \'Table11B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11B.othersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable11B.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table11B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable11B.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstinNull() {
                return this.IsNull(this.tableTable11B.tinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettinNull() {
                this[this.tableTable11B.tinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_straw_bambooNull() {
                return this.IsNull(this.tableTable11B._straw_bambooColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_straw_bambooNull() {
                this[this.tableTable11B._straw_bambooColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsearthNull() {
                return this.IsNull(this.tableTable11B.earthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetearthNull() {
                this[this.tableTable11B.earthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsothersNull() {
                return this.IsNull(this.tableTable11B.othersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetothersNull() {
                this[this.tableTable11B.othersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable11B.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable11B.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table10Row : global::System.Data.DataRow {
            
            private Table10DataTable tableTable10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table10Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable10 = ((Table10DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unionname {
                get {
                    return ((string)(this[this.tableTable10.unionnameColumn]));
                }
                set {
                    this[this.tableTable10.unionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5 {
                get {
                    return ((int)(this[this.tableTable10.@__5Column]));
                }
                set {
                    this[this.tableTable10.@__5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5_6 {
                get {
                    try {
                        return ((int)(this[this.tableTable10._5_6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5-6\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._5_6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _7_8 {
                get {
                    try {
                        return ((int)(this[this.tableTable10._7_8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'7-8\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._7_8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _9_10 {
                get {
                    try {
                        return ((int)(this[this.tableTable10._9_10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'9-10\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._9_10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _11_ {
                get {
                    try {
                        return ((int)(this[this.tableTable10._11_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'11+\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._11_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable10.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5_6Null() {
                return this.IsNull(this.tableTable10._5_6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5_6Null() {
                this[this.tableTable10._5_6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_7_8Null() {
                return this.IsNull(this.tableTable10._7_8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_7_8Null() {
                this[this.tableTable10._7_8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_9_10Null() {
                return this.IsNull(this.tableTable10._9_10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_9_10Null() {
                this[this.tableTable10._9_10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_11_Null() {
                return this.IsNull(this.tableTable10._11_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_11_Null() {
                this[this.tableTable10._11_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable10.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable10.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table21Row : global::System.Data.DataRow {
            
            private Table21DataTable tableTable21;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table21Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable21 = ((Table21DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable21.union_nameColumn]));
                }
                set {
                    this[this.tableTable21.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__3 {
                get {
                    return ((int)(this[this.tableTable21.@__3Column]));
                }
                set {
                    this[this.tableTable21.@__3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3_4 {
                get {
                    try {
                        return ((int)(this[this.tableTable21._3_4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3-4\' in table \'Table21\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable21._3_4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable21._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table21\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable21._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable21.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table21\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable21.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3_4Null() {
                return this.IsNull(this.tableTable21._3_4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3_4Null() {
                this[this.tableTable21._3_4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable21._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable21._4_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable21.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable21.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table18Row : global::System.Data.DataRow {
            
            private Table18DataTable tableTable18;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable18 = ((Table18DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable18.union_nameColumn]));
                }
                set {
                    this[this.tableTable18.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yes {
                get {
                    try {
                        return ((int)(this[this.tableTable18.yesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yes\' in table \'Table18\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18.yesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable18.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table18\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable18.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table18\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyesNull() {
                return this.IsNull(this.tableTable18.yesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyesNull() {
                this[this.tableTable18.yesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable18.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable18.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable18.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable18.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table18ARow : global::System.Data.DataRow {
            
            private Table18ADataTable tableTable18A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable18A = ((Table18ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable18A.union_nameColumn]));
                }
                set {
                    this[this.tableTable18A.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yes {
                get {
                    try {
                        return ((int)(this[this.tableTable18A.yesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yes\' in table \'Table18A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18A.yesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable18A.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table18A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18A.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable18A.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table18A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18A.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyesNull() {
                return this.IsNull(this.tableTable18A.yesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyesNull() {
                this[this.tableTable18A.yesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable18A.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable18A.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable18A.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable18A.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table18BRow : global::System.Data.DataRow {
            
            private Table18BDataTable tableTable18B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable18B = ((Table18BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable18B.union_nameColumn]));
                }
                set {
                    this[this.tableTable18B.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yes {
                get {
                    try {
                        return ((int)(this[this.tableTable18B.yesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yes\' in table \'Table18B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18B.yesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable18B.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table18B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18B.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable18B.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table18B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18B.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyesNull() {
                return this.IsNull(this.tableTable18B.yesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyesNull() {
                this[this.tableTable18B.yesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable18B.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable18B.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable18B.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable18B.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table18DRow : global::System.Data.DataRow {
            
            private Table18DDataTable tableTable18D;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18DRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable18D = ((Table18DDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable18D.union_nameColumn]));
                }
                set {
                    this[this.tableTable18D.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yes {
                get {
                    try {
                        return ((int)(this[this.tableTable18D.yesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yes\' in table \'Table18D\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18D.yesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable18D.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table18D\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18D.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable18D.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table18D\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18D.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyesNull() {
                return this.IsNull(this.tableTable18D.yesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyesNull() {
                this[this.tableTable18D.yesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable18D.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable18D.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable18D.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable18D.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table18CRow : global::System.Data.DataRow {
            
            private Table18CDataTable tableTable18C;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table18CRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable18C = ((Table18CDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable18C.union_nameColumn]));
                }
                set {
                    this[this.tableTable18C.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yes {
                get {
                    try {
                        return ((int)(this[this.tableTable18C.yesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yes\' in table \'Table18C\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18C.yesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no {
                get {
                    try {
                        return ((int)(this[this.tableTable18C.noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no\' in table \'Table18C\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18C.noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableTable18C.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'Table18C\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable18C.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyesNull() {
                return this.IsNull(this.tableTable18C.yesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyesNull() {
                this[this.tableTable18C.yesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoNull() {
                return this.IsNull(this.tableTable18C.noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoNull() {
                this[this.tableTable18C.noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableTable18C.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableTable18C.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table1RowChangeEvent : global::System.EventArgs {
            
            private Table1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1RowChangeEvent(Table1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table_3RowChangeEvent : global::System.EventArgs {
            
            private Table_3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3RowChangeEvent(Table_3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table6RowChangeEvent : global::System.EventArgs {
            
            private Table6Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6RowChangeEvent(Table6Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table7RowChangeEvent : global::System.EventArgs {
            
            private Table7Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7RowChangeEvent(Table7Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table8RowChangeEvent : global::System.EventArgs {
            
            private Table8Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8RowChangeEvent(Table8Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table9RowChangeEvent : global::System.EventArgs {
            
            private Table9Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9RowChangeEvent(Table9Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table12RowChangeEvent : global::System.EventArgs {
            
            private Table12Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12RowChangeEvent(Table12Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table13RowChangeEvent : global::System.EventArgs {
            
            private Table13Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13RowChangeEvent(Table13Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table13ARowChangeEvent : global::System.EventArgs {
            
            private Table13ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARowChangeEvent(Table13ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table13BRowChangeEvent : global::System.EventArgs {
            
            private Table13BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRowChangeEvent(Table13BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table14CowRowChangeEvent : global::System.EventArgs {
            
            private Table14CowRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRowChangeEvent(Table14CowRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table14GoatRowChangeEvent : global::System.EventArgs {
            
            private Table14GoatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRowChangeEvent(Table14GoatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table14HenRowChangeEvent : global::System.EventArgs {
            
            private Table14HenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRowChangeEvent(Table14HenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table15RowChangeEvent : global::System.EventArgs {
            
            private Table15Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15RowChangeEvent(Table15Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table16RowChangeEvent : global::System.EventArgs {
            
            private Table16Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16RowChangeEvent(Table16Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table17RowChangeEvent : global::System.EventArgs {
            
            private Table17Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table17RowChangeEvent(Table17Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table17Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table20RowChangeEvent : global::System.EventArgs {
            
            private Table20Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table20RowChangeEvent(Table20Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table20Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table11RowChangeEvent : global::System.EventArgs {
            
            private Table11Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11RowChangeEvent(Table11Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table11ARowChangeEvent : global::System.EventArgs {
            
            private Table11ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11ARowChangeEvent(Table11ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table11BRowChangeEvent : global::System.EventArgs {
            
            private Table11BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11BRowChangeEvent(Table11BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table11BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table10RowChangeEvent : global::System.EventArgs {
            
            private Table10Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10RowChangeEvent(Table10Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table21RowChangeEvent : global::System.EventArgs {
            
            private Table21Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table21RowChangeEvent(Table21Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table21Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table18RowChangeEvent : global::System.EventArgs {
            
            private Table18Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18RowChangeEvent(Table18Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table18ARowChangeEvent : global::System.EventArgs {
            
            private Table18ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18ARowChangeEvent(Table18ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table18BRowChangeEvent : global::System.EventArgs {
            
            private Table18BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18BRowChangeEvent(Table18BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table18DRowChangeEvent : global::System.EventArgs {
            
            private Table18DRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DRowChangeEvent(Table18DRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18DRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table18CRowChangeEvent : global::System.EventArgs {
            
            private Table18CRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18CRowChangeEvent(Table18CRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table18CRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ReportsApplication1.DataSet2TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     x.a AS status, x.b AS male, y.c AS female, x.b + y.c AS total
FROM         (SELECT     marital_status.status AS a, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              marital_status ON member.marital_no = marital_status.marital_no
                       WHERE      (member.sex_no = 1)
                       GROUP BY marital_status.status) AS x INNER JOIN
                          (SELECT     marital_status_1.status AS a, COUNT(member_1.member_id) AS c
                            FROM          member AS member_1 INNER JOIN
                                                   marital_status AS marital_status_1 ON member_1.marital_no = marital_status_1.marital_no
                            WHERE      (member_1.sex_no = 2)
                            GROUP BY marital_status_1.status) AS y ON x.a = y.a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.DataTable1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.DataTable1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.DataTable1DataTable dataTable = new DataSet2.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table1";
            tableMapping.ColumnMappings.Add("union_name", "union_name");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DISTINCT x.a AS union_name, x.b AS male, y.c AS female
FROM         (SELECT     [union].union_name AS a, COUNT(member.member_id) AS b
                       FROM          [union] INNER JOIN
                                              cnc ON [union].union_id = cnc.union_id INNER JOIN
                                              khana ON cnc.cnc_id = khana.cnc_id INNER JOIN
                                              member ON khana.khana_id = member.khana_id
                       WHERE      (member.sex_no = 1)
                       GROUP BY [union].union_name) x INNER JOIN
                          (SELECT     [union].union_name AS a, COUNT(member.member_id) AS c
                            FROM          [union] INNER JOIN
                                                   cnc ON [union].union_id = cnc.union_id INNER JOIN
                                                   khana ON cnc.cnc_id = khana.cnc_id INNER JOIN
                                                   member ON khana.khana_id = member.khana_id
                            WHERE      (member.sex_no = 2)
                            GROUP BY [union].union_name) y ON x.a = y.a



";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table1DataTable dataTable = new DataSet2.Table1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table_3TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table_3TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table 3";
            tableMapping.ColumnMappings.Add("union_name", "union_name");
            tableMapping.ColumnMappings.Add("self", "self");
            tableMapping.ColumnMappings.Add("wife", "wife");
            tableMapping.ColumnMappings.Add("husband", "husband");
            tableMapping.ColumnMappings.Add("son", "son");
            tableMapping.ColumnMappings.Add("daughter", "daughter");
            tableMapping.ColumnMappings.Add("fathermother", "fathermother");
            tableMapping.ColumnMappings.Add("others", "others");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DISTINCT \r\n                      a.a AS union_name, a.c AS self, b.c AS wi" +
                "fe, c.c AS husband, d.c AS son, e.c AS daughter, f.c AS fathermother, g.c AS oth" +
                "ers, ISNULL(a.c, 0) \r\n                      + ISNULL(b.c, 0) + ISNULL(c.c, 0) + " +
                "ISNULL(d.c, 0) + ISNULL(e.c, 0) + ISNULL(f.c, 0) + ISNULL(g.c, 0) AS total\r\nFROM" +
                "         (SELECT     [union].union_name AS a, isnull(x.b, 0) AS c\r\n             " +
                "          FROM          [union] LEFT OUTER JOIN\r\n                               " +
                "                   (SELECT     [union].union_name, COUNT(member.member_id) AS b\r" +
                "\n                                                    FROM          member INNER " +
                "JOIN\r\n                                                                          " +
                " relation ON member.relation_no = relation.relation_no INNER JOIN\r\n             " +
                "                                                              khana ON member.kh" +
                "ana_id = khana.khana_id INNER JOIN\r\n                                            " +
                "                               cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n    " +
                "                                                                       [union] O" +
                "N cnc.union_id = [union].union_id\r\n                                             " +
                "       WHERE      (member.relation_no = 1)\r\n                                    " +
                "                GROUP BY [union].union_name) x ON x.union_name = [union].union_n" +
                "ame) a LEFT OUTER JOIN\r\n                          (SELECT     [union].union_name" +
                " AS a, isnull(x.b, 0) AS c\r\n                            FROM          [union] LE" +
                "FT OUTER JOIN\r\n                                                       (SELECT   " +
                "  [union].union_name, COUNT(member.member_id) AS b\r\n                            " +
                "                             FROM          member INNER JOIN\r\n                  " +
                "                                                              relation ON member" +
                ".relation_no = relation.relation_no INNER JOIN\r\n                                " +
                "                                                khana ON member.khana_id = khana" +
                ".khana_id INNER JOIN\r\n                                                          " +
                "                      cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n             " +
                "                                                                   [union] ON cn" +
                "c.union_id = [union].union_id\r\n                                                 " +
                "        WHERE      (member.relation_no = 2)\r\n                                   " +
                "                      GROUP BY [union].union_name) x ON x.union_name = [union].u" +
                "nion_name) b ON a.a = b.a LEFT OUTER JOIN\r\n                          (SELECT    " +
                " [union].union_name AS a, isnull(x.b, 0) AS c\r\n                            FROM " +
                "         [union] LEFT OUTER JOIN\r\n                                              " +
                "         (SELECT     [union].union_name, COUNT(member.member_id) AS b\r\n         " +
                "                                                FROM          member INNER JOIN\r" +
                "\n                                                                               " +
                " relation ON member.relation_no = relation.relation_no INNER JOIN\r\n             " +
                "                                                                   khana ON memb" +
                "er.khana_id = khana.khana_id INNER JOIN\r\n                                       " +
                "                                         cnc ON khana.cnc_id = cnc.cnc_id INNER " +
                "JOIN\r\n                                                                          " +
                "      [union] ON cnc.union_id = [union].union_id\r\n                              " +
                "                           WHERE      (member.relation_no = 3)\r\n                " +
                "                                         GROUP BY [union].union_name) x ON x.uni" +
                "on_name = [union].union_name) c ON b.a = c.a LEFT OUTER JOIN\r\n                  " +
                "        (SELECT     [union].union_name AS a, isnull(x.b, 0) AS c\r\n              " +
                "              FROM          [union] LEFT OUTER JOIN\r\n                           " +
                "                            (SELECT     [union].union_name, COUNT(member.member_" +
                "id) AS b\r\n                                                         FROM         " +
                " member INNER JOIN\r\n                                                            " +
                "                    relation ON member.relation_no = relation.relation_no INNER " +
                "JOIN\r\n                                                                          " +
                "      khana ON member.khana_id = khana.khana_id INNER JOIN\r\n                    " +
                "                                                            cnc ON khana.cnc_id " +
                "= cnc.cnc_id INNER JOIN\r\n                                                       " +
                "                         [union] ON cnc.union_id = [union].union_id\r\n           " +
                "                                              WHERE      (member.relation_no = 4" +
                ")\r\n                                                         GROUP BY [union].uni" +
                "on_name) x ON x.union_name = [union].union_name) d ON c.a = d.a LEFT OUTER JOIN\r" +
                "\n                          (SELECT     [union].union_name AS a, isnull(x.b, 0) A" +
                "S c\r\n                            FROM          [union] LEFT OUTER JOIN\r\n        " +
                "                                               (SELECT     [union].union_name, C" +
                "OUNT(member.member_id) AS b\r\n                                                   " +
                "      FROM          member INNER JOIN\r\n                                         " +
                "                                       relation ON member.relation_no = relation" +
                ".relation_no INNER JOIN\r\n                                                       " +
                "                         khana ON member.khana_id = khana.khana_id INNER JOIN\r\n " +
                "                                                                               c" +
                "nc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                    " +
                "                                            [union] ON cnc.union_id = [union].un" +
                "ion_id\r\n                                                         WHERE      (mem" +
                "ber.relation_no = 5)\r\n                                                         G" +
                "ROUP BY [union].union_name) x ON x.union_name = [union].union_name) e ON d.a = e" +
                ".a LEFT OUTER JOIN\r\n                          (SELECT     [union].union_name AS " +
                "a, isnull(x.b, 0) AS c\r\n                            FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                       (SELECT     [u" +
                "nion].union_name, COUNT(member.member_id) AS b\r\n                                " +
                "                         FROM          member INNER JOIN\r\n                      " +
                "                                                          relation ON member.rel" +
                "ation_no = relation.relation_no INNER JOIN\r\n                                    " +
                "                                            khana ON member.khana_id = khana.kha" +
                "na_id INNER JOIN\r\n                                                              " +
                "                  cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                 " +
                "                                                               [union] ON cnc.un" +
                "ion_id = [union].union_id\r\n                                                     " +
                "    WHERE      (member.relation_no = 6)\r\n                                       " +
                "                  GROUP BY [union].union_name) x ON x.union_name = [union].union" +
                "_name) f ON e.a = f.a LEFT OUTER JOIN\r\n                          (SELECT     [un" +
                "ion].union_name AS a, isnull(x.b, 0) AS c\r\n                            FROM     " +
                "     [union] LEFT OUTER JOIN\r\n                                                  " +
                "     (SELECT     [union].union_name, COUNT(member.member_id) AS b\r\n             " +
                "                                            FROM          member INNER JOIN\r\n   " +
                "                                                                             rel" +
                "ation ON member.relation_no = relation.relation_no INNER JOIN\r\n                 " +
                "                                                               khana ON member.k" +
                "hana_id = khana.khana_id INNER JOIN\r\n                                           " +
                "                                     cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN" +
                "\r\n                                                                              " +
                "  [union] ON cnc.union_id = [union].union_id\r\n                                  " +
                "                       WHERE      (member.relation_no = 7)\r\n                    " +
                "                                     GROUP BY [union].union_name) x ON x.union_n" +
                "ame = [union].union_name) g ON f.a = g.a\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table_3DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table_3DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table_3DataTable dataTable = new DataSet2.Table_3DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table6TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table6TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table6";
            tableMapping.ColumnMappings.Add("litercystatus", "litercystatus");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.education AS litercystatus, a.b AS male, b.c AS female
FROM         (SELECT     education.education, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              education ON member.education_no = education.education_no
                       WHERE      (member.sex_no = 1) AND (member.age > 6)
                       GROUP BY education.education) a INNER JOIN
                          (SELECT     education.education, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   education ON member.education_no = education.education_no
                            WHERE      (member.sex_no = 2) AND (member.age > 6)
                            GROUP BY education.education) b ON a.education = b.education";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table6DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table6DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table6DataTable dataTable = new DataSet2.Table6DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table7TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table7TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table7";
            tableMapping.ColumnMappings.Add("litercystatus", "litercystatus");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"
SELECT     a.education AS litercystatus, a.b AS male, b.c AS female
FROM         (SELECT     education.education, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              education ON member.education_no = education.education_no
                       WHERE      (member.sex_no = 1) AND (relation_no = 1)
                       GROUP BY education.education) a INNER JOIN
                          (SELECT     education.education, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   education ON member.education_no = education.education_no
                            WHERE      (member.sex_no = 2) AND (relation_no = 1)
                            GROUP BY education.education) b ON a.education = b.education";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table7DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table7DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table7DataTable dataTable = new DataSet2.Table7DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table8TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table8TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table8";
            tableMapping.ColumnMappings.Add("occupation", "occupation");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     x.a AS occupation, x.b AS male, y.c AS female
FROM         (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              occupation ON member.occupation_no = occupation.occupation_no
                       WHERE      (member.age > 10) AND (member.sex_no = 1)
                       GROUP BY occupation.occupation) x INNER JOIN
                          (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   occupation ON member.occupation_no = occupation.occupation_no
                            WHERE      (member.age > 10) AND (member.sex_no = 2)
                            GROUP BY occupation.occupation) y ON x.a = y.a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table8DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table8DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table8DataTable dataTable = new DataSet2.Table8DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table9TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table9TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table9";
            tableMapping.ColumnMappings.Add("occupation", "occupation");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     x.a AS occupation, x.b AS male, y.c AS female
FROM         (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              occupation ON member.occupation_no = occupation.occupation_no
                       WHERE      (relation_no = 1) AND (member.sex_no = 1)
                       GROUP BY occupation.occupation) x INNER JOIN
                          (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   occupation ON member.occupation_no = occupation.occupation_no
                            WHERE      (relation_no = 1) AND (member.sex_no = 2)
                            GROUP BY occupation.occupation) y ON x.a = y.a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table9DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table9DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table9DataTable dataTable = new DataSet2.Table9DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table12TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table12TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table12";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<5000", "<5000");
            tableMapping.ColumnMappings.Add("5000-9999", "5000-9999");
            tableMapping.ColumnMappings.Add("10000-14999", "10000-14999");
            tableMapping.ColumnMappings.Add("15000-19999", "15000-19999");
            tableMapping.ColumnMappings.Add("20000-24999", "20000-24999");
            tableMapping.ColumnMappings.Add("25000-49999", "25000-49999");
            tableMapping.ColumnMappings.Add("50000+", "50000+");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nSELECT     a.x AS [union name], a.y AS [<5000], b.y AS [5000-9999], c.y AS [100" +
                "00-14999], d.y AS [15000-19999], e.y AS [20000-24999], f.y AS [25000-49999], \r\n " +
                "                     g.y AS [50000+], ISNULL(a.y, 0) + ISNULL(b.y, 0) + ISNULL(c" +
                ".y, 0) + ISNULL(d.y, 0) + ISNULL(e.y, 0) + ISNULL(f.y, 0) + ISNULL(g.y, 0) AS to" +
                "tal\r\nFROM         (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n    " +
                "                   FROM          [union] LEFT OUTER JOIN\r\n                      " +
                "                            (SELECT     union_name, COUNT(khana_id) AS y\r\n      " +
                "                                              FROM          khana INNER JOIN\r\n  " +
                "                                                                         cnc ON " +
                "khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                          " +
                "                                 [union] ON cnc.union_id = [union].union_id\r\n   " +
                "                                                 WHERE      (khana.house_price <" +
                " 5000)\r\n                                                    GROUP BY union_name)" +
                " a ON a.union_name = [union].union_name) a LEFT OUTER JOIN\r\n                    " +
                "      (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                " +
                "            FROM          [union] LEFT OUTER JOIN\r\n                             " +
                "                          (SELECT     union_name, COUNT(khana_id) AS y\r\n        " +
                "                                                 FROM          khana INNER JOIN\r" +
                "\n                                                                               " +
                " cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                  " +
                "                                              [union] ON cnc.union_id = [union]." +
                "union_id\r\n                                                         WHERE      (k" +
                "hana.house_price BETWEEN 5000 AND 9999)\r\n                                       " +
                "                  GROUP BY union_name) a ON a.union_name = [union].union_name) b" +
                " ON a.x = b.x LEFT OUTER JOIN\r\n                          (SELECT     [union].uni" +
                "on_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [un" +
                "ion] LEFT OUTER JOIN\r\n                                                       (SE" +
                "LECT     union_name, COUNT(khana_id) AS y\r\n                                     " +
                "                    FROM          khana INNER JOIN\r\n                            " +
                "                                                    cnc ON khana.cnc_id = cnc.cn" +
                "c_id INNER JOIN\r\n                                                               " +
                "                 [union] ON cnc.union_id = [union].union_id\r\n                   " +
                "                                      WHERE      (khana.house_price BETWEEN 1000" +
                "0 AND 14999)\r\n                                                         GROUP BY " +
                "union_name) a ON a.union_name = [union].union_name) g RIGHT OUTER JOIN\r\n        " +
                "                  (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n    " +
                "                        FROM          [union] LEFT OUTER JOIN\r\n                 " +
                "                                      (SELECT     union_name, COUNT(khana_id) AS" +
                " y\r\n                                                         FROM          khana" +
                " INNER JOIN\r\n                                                                   " +
                "             cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                      " +
                "                                                          [union] ON cnc.union_i" +
                "d = [union].union_id\r\n                                                         W" +
                "HERE      (khana.house_price BETWEEN 15000 AND 19999)\r\n                         " +
                "                                GROUP BY union_name) a ON a.union_name = [union]" +
                ".union_name) f ON g.x = f.x RIGHT OUTER JOIN\r\n                          (SELECT " +
                "    [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FR" +
                "OM          [union] LEFT OUTER JOIN\r\n                                           " +
                "            (SELECT     union_name, COUNT(khana_id) AS y\r\n                      " +
                "                                   FROM          khana INNER JOIN\r\n             " +
                "                                                                   cnc ON khana." +
                "cnc_id = cnc.cnc_id INNER JOIN\r\n                                                " +
                "                                [union] ON cnc.union_id = [union].union_id\r\n    " +
                "                                                     WHERE      (khana.house_pri" +
                "ce BETWEEN 20000 AND 24999)\r\n                                                   " +
                "      GROUP BY union_name) a ON a.union_name = [union].union_name) e ON f.x = e." +
                "x RIGHT OUTER JOIN\r\n                          (SELECT     [union].union_name AS " +
                "x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                       (SELECT     un" +
                "ion_name, COUNT(khana_id) AS y\r\n                                                " +
                "         FROM          khana INNER JOIN\r\n                                       " +
                "                                         cnc ON khana.cnc_id = cnc.cnc_id INNER " +
                "JOIN\r\n                                                                          " +
                "      [union] ON cnc.union_id = [union].union_id\r\n                              " +
                "                           WHERE      (khana.house_price BETWEEN 25000 AND 49000" +
                ")\r\n                                                         GROUP BY union_name)" +
                " a ON a.union_name = [union].union_name) d ON e.x = d.x RIGHT OUTER JOIN\r\n      " +
                "                    (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n  " +
                "                          FROM          [union] LEFT OUTER JOIN\r\n               " +
                "                                        (SELECT     union_name, COUNT(khana_id) " +
                "AS y\r\n                                                         FROM          kha" +
                "na INNER JOIN\r\n                                                                 " +
                "               cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                    " +
                "                                                            [union] ON cnc.union" +
                "_id = [union].union_id\r\n                                                        " +
                " WHERE      (khana.house_price > 50000)\r\n                                       " +
                "                  GROUP BY union_name) a ON a.union_name = [union].union_name) c" +
                " ON d.x = c.x ON b.x = c.x";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table12DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table12DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table12DataTable dataTable = new DataSet2.Table12DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table13TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table13TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table13";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("no land", "no land");
            tableMapping.ColumnMappings.Add("0.25 - 0.49", "0_25 - 0_49");
            tableMapping.ColumnMappings.Add("0.50 - 0.99", "0_50 - 0_99");
            tableMapping.ColumnMappings.Add("1.0 - 1.49", "1_0 - 1_49");
            tableMapping.ColumnMappings.Add("1.5-1.99", "1_5-1_99");
            tableMapping.ColumnMappings.Add("2+", "2+");
            tableMapping.ColumnMappings.Add("<.05", "<_05");
            tableMapping.ColumnMappings.Add("0.05 - 0.24", "0_05 - 0_24");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [no land], b.y AS [<.05], c.y AS [0.05 - 0" +
                ".24], d.y AS [0.25 - 0.49], e.y AS [0.50 - 0.99], f.y AS [1.0 - 1.49], g.y AS [1" +
                ".5-1.99], \r\n                      h.y AS [2+], ISNULL(a.y, 0) + ISNULL(b.y, 0) +" +
                " ISNULL(c.y, 0) + ISNULL(d.y, 0) + ISNULL(e.y, 0) + ISNULL(f.y, 0) + ISNULL(g.y," +
                " 0) + ISNULL(h.y, 0) \r\n                      AS total\r\nFROM         (SELECT     " +
                "[union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                       FROM       " +
                "   [union] LEFT OUTER JOIN\r\n                                                  (S" +
                "ELECT     union_name, COUNT(khana_id) AS y\r\n                                    " +
                "                FROM          khana INNER JOIN\r\n                                " +
                "                                           cnc ON khana.cnc_id = cnc.cnc_id INNE" +
                "R JOIN\r\n                                                                        " +
                "   [union] ON cnc.union_id = [union].union_id\r\n                                 " +
                "                   WHERE      (khana.land_amount = 0)\r\n                         " +
                "                           GROUP BY union_name) a ON a.union_name = [union].unio" +
                "n_name) a LEFT OUTER JOIN\r\n                          (SELECT     [union].union_n" +
                "ame AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union]" +
                " LEFT OUTER JOIN\r\n                                                       (SELECT" +
                "     union_name, COUNT(khana_id) AS y\r\n                                         " +
                "                FROM          khana INNER JOIN\r\n                                " +
                "                                                cnc ON khana.cnc_id = cnc.cnc_id" +
                " INNER JOIN\r\n                                                                   " +
                "             [union] ON cnc.union_id = [union].union_id\r\n                       " +
                "                                  WHERE      (khana.land_amount < 5)\r\n          " +
                "                                               GROUP BY union_name) a ON a.union" +
                "_name = [union].union_name) b ON a.x = b.x LEFT OUTER JOIN\r\n                    " +
                "      (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                " +
                "            FROM          [union] LEFT OUTER JOIN\r\n                             " +
                "                          (SELECT     union_name, COUNT(khana_id) AS y\r\n        " +
                "                                                 FROM          khana INNER JOIN\r" +
                "\n                                                                               " +
                " cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                  " +
                "                                              [union] ON cnc.union_id = [union]." +
                "union_id\r\n                                                         WHERE      (k" +
                "hana.land_amount BETWEEN 5 AND 24)\r\n                                            " +
                "             GROUP BY union_name) a ON a.union_name = [union].union_name) c ON b" +
                ".x = c.x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_na" +
                "me AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union] " +
                "LEFT OUTER JOIN\r\n                                                       (SELECT " +
                "    union_name, COUNT(khana_id) AS y\r\n                                          " +
                "               FROM          khana INNER JOIN\r\n                                 " +
                "                                               cnc ON khana.cnc_id = cnc.cnc_id " +
                "INNER JOIN\r\n                                                                    " +
                "            [union] ON cnc.union_id = [union].union_id\r\n                        " +
                "                                 WHERE      (khana.land_amount BETWEEN 25 AND 49" +
                ")\r\n                                                         GROUP BY union_name)" +
                " a ON a.union_name = [union].union_name) d ON c.x = d.x LEFT OUTER JOIN\r\n       " +
                "                   (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n   " +
                "                         FROM          [union] LEFT OUTER JOIN\r\n                " +
                "                                       (SELECT     union_name, COUNT(khana_id) A" +
                "S y\r\n                                                         FROM          khan" +
                "a INNER JOIN\r\n                                                                  " +
                "              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                     " +
                "                                                           [union] ON cnc.union_" +
                "id = [union].union_id\r\n                                                         " +
                "WHERE      (khana.land_amount BETWEEN 50 AND 99)\r\n                              " +
                "                           GROUP BY union_name) a ON a.union_name = [union].unio" +
                "n_name) e ON d.x = e.x LEFT OUTER JOIN\r\n                          (SELECT     [u" +
                "nion].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM    " +
                "      [union] LEFT OUTER JOIN\r\n                                                 " +
                "      (SELECT     union_name, COUNT(khana_id) AS y\r\n                            " +
                "                             FROM          khana INNER JOIN\r\n                   " +
                "                                                             cnc ON khana.cnc_id" +
                " = cnc.cnc_id INNER JOIN\r\n                                                      " +
                "                          [union] ON cnc.union_id = [union].union_id\r\n          " +
                "                                               WHERE      (khana.land_amount BET" +
                "WEEN 100 AND 149)\r\n                                                         GROU" +
                "P BY union_name) a ON a.union_name = [union].union_name) f ON e.x = f.x LEFT OUT" +
                "ER JOIN\r\n                          (SELECT     [union].union_name AS x, ISNULL(a" +
                ".y, 0) AS y\r\n                            FROM          [union] LEFT OUTER JOIN\r\n" +
                "                                                       (SELECT     union_name, C" +
                "OUNT(khana_id) AS y\r\n                                                         FR" +
                "OM          khana INNER JOIN\r\n                                                  " +
                "                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n     " +
                "                                                                           [unio" +
                "n] ON cnc.union_id = [union].union_id\r\n                                         " +
                "                WHERE      (khana.land_amount BETWEEN 150 AND 199)\r\n            " +
                "                                             GROUP BY union_name) a ON a.union_n" +
                "ame = [union].union_name) g ON f.x = g.x LEFT OUTER JOIN\r\n                      " +
                "    (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                  " +
                "          FROM          [union] LEFT OUTER JOIN\r\n                               " +
                "                        (SELECT     union_name, COUNT(khana_id) AS y\r\n          " +
                "                                               FROM          khana INNER JOIN\r\n " +
                "                                                                               c" +
                "nc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                    " +
                "                                            [union] ON cnc.union_id = [union].un" +
                "ion_id\r\n                                                         WHERE      (kha" +
                "na.land_amount > 200)\r\n                                                         " +
                "GROUP BY union_name) a ON a.union_name = [union].union_name) h ON g.x = h.x\r\n\r\n\r" +
                "\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table13DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table13DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table13DataTable dataTable = new DataSet2.Table13DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table13ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table13ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table13A";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<5000", "<5000");
            tableMapping.ColumnMappings.Add("5000-9999", "5000-9999");
            tableMapping.ColumnMappings.Add("10000-14999", "10000-14999");
            tableMapping.ColumnMappings.Add("15000-19999", "15000-19999");
            tableMapping.ColumnMappings.Add("20000-24999", "20000-24999");
            tableMapping.ColumnMappings.Add("25000-49999", "25000-49999");
            tableMapping.ColumnMappings.Add("50000+", "50000+");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [<5000], b.y AS [5000-9999], c.y AS [10000" +
                "-14999], d.y AS [15000-19999], e.y AS [20000-24999], f.y AS [25000-49999], \r\n   " +
                "                   g.y AS [50000+], ISNULL(a.y, 0) + ISNULL(b.y, 0) + ISNULL(c.y" +
                ", 0) + ISNULL(d.y, 0) + ISNULL(e.y, 0) + ISNULL(f.y, 0) + ISNULL(g.y, 0) AS tota" +
                "l\r\nFROM         (SELECT     [union].union_name x, ISNULL(a.y, 0) AS y\r\n         " +
                "              FROM          [union] LEFT OUTER JOIN\r\n                           " +
                "                       (SELECT     union_name, COUNT(khana_id) AS y\r\n           " +
                "                                         FROM          khana INNER JOIN\r\n       " +
                "                                                                    cnc ON khana" +
                ".cnc_id = cnc.cnc_id INNER JOIN\r\n                                               " +
                "                            [union] ON cnc.union_id = [union].union_id\r\n        " +
                "                                            WHERE      (khana.land_price < 5000)" +
                "\r\n                                                    GROUP BY union_name) a ON " +
                "a.union_name = [union].union_name) a LEFT OUTER JOIN\r\n                          " +
                "(SELECT     [union].union_name x, ISNULL(a.y, 0) AS y\r\n                         " +
                "   FROM          [union] LEFT OUTER JOIN\r\n                                      " +
                "                 (SELECT     union_name, COUNT(khana_id) AS y\r\n                 " +
                "                                        FROM          khana INNER JOIN\r\n        " +
                "                                                                        cnc ON k" +
                "hana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                           " +
                "                                     [union] ON cnc.union_id = [union].union_id\r" +
                "\n                                                         WHERE      (khana.land" +
                "_price BETWEEN 5000 AND 9999)\r\n                                                 " +
                "        GROUP BY union_name) a ON a.union_name = [union].union_name) b ON a.x = " +
                "b.x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_name x," +
                " ISNULL(a.y, 0) AS y\r\n                            FROM          [union] LEFT OUT" +
                "ER JOIN\r\n                                                       (SELECT     unio" +
                "n_name, COUNT(khana_id) AS y\r\n                                                  " +
                "       FROM          khana INNER JOIN\r\n                                         " +
                "                                       cnc ON khana.cnc_id = cnc.cnc_id INNER JO" +
                "IN\r\n                                                                            " +
                "    [union] ON cnc.union_id = [union].union_id\r\n                                " +
                "                         WHERE      (khana.land_price BETWEEN 10000 AND 14999)\r\n" +
                "                                                         GROUP BY union_name) a " +
                "ON a.union_name = [union].union_name) c ON b.x = c.x LEFT OUTER JOIN\r\n          " +
                "                (SELECT     [union].union_name x, ISNULL(a.y, 0) AS y\r\n         " +
                "                   FROM          [union] LEFT OUTER JOIN\r\n                      " +
                "                                 (SELECT     union_name, COUNT(khana_id) AS y\r\n " +
                "                                                        FROM          khana INNE" +
                "R JOIN\r\n                                                                        " +
                "        cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                           " +
                "                                                     [union] ON cnc.union_id = [" +
                "union].union_id\r\n                                                         WHERE " +
                "     (khana.land_price BETWEEN 15000 AND 19999)\r\n                               " +
                "                          GROUP BY union_name) a ON a.union_name = [union].union" +
                "_name) d ON c.x = d.x LEFT OUTER JOIN\r\n                          (SELECT     [un" +
                "ion].union_name x, ISNULL(a.y, 0) AS y\r\n                            FROM        " +
                "  [union] LEFT OUTER JOIN\r\n                                                     " +
                "  (SELECT     union_name, COUNT(khana_id) AS y\r\n                                " +
                "                         FROM          khana INNER JOIN\r\n                       " +
                "                                                         cnc ON khana.cnc_id = c" +
                "nc.cnc_id INNER JOIN\r\n                                                          " +
                "                      [union] ON cnc.union_id = [union].union_id\r\n              " +
                "                                           WHERE      (khana.land_price BETWEEN " +
                "20000 AND 24999)\r\n                                                         GROUP" +
                " BY union_name) a ON a.union_name = [union].union_name) e ON d.x = e.x LEFT OUTE" +
                "R JOIN\r\n                          (SELECT     [union].union_name x, ISNULL(a.y, " +
                "0) AS y\r\n                            FROM          [union] LEFT OUTER JOIN\r\n    " +
                "                                                   (SELECT     union_name, COUNT" +
                "(khana_id) AS y\r\n                                                         FROM  " +
                "        khana INNER JOIN\r\n                                                      " +
                "                          cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n         " +
                "                                                                       [union] O" +
                "N cnc.union_id = [union].union_id\r\n                                             " +
                "            WHERE      (khana.land_price BETWEEN 25000 AND 49999)\r\n             " +
                "                                            GROUP BY union_name) a ON a.union_na" +
                "me = [union].union_name) f ON e.x = f.x LEFT OUTER JOIN\r\n                       " +
                "   (SELECT     [union].union_name x, ISNULL(a.y, 0) AS y\r\n                      " +
                "      FROM          [union] LEFT OUTER JOIN\r\n                                   " +
                "                    (SELECT     union_name, COUNT(khana_id) AS y\r\n              " +
                "                                           FROM          khana INNER JOIN\r\n     " +
                "                                                                           cnc O" +
                "N khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                        " +
                "                                        [union] ON cnc.union_id = [union].union_" +
                "id\r\n                                                         WHERE      (khana.l" +
                "and_price > 50000)\r\n                                                         GRO" +
                "UP BY union_name) a ON a.union_name = [union].union_name) g ON f.x = g.x\r\n\r\n\r\n\r\n" +
                "\r\n\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table13ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table13ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table13ADataTable dataTable = new DataSet2.Table13ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table13BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table13BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table13B";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<5", "<5");
            tableMapping.ColumnMappings.Add("11 - 15", "11 - 15");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("5 - 10", "5 - 10");
            tableMapping.ColumnMappings.Add("16 - 20", "16 - 20");
            tableMapping.ColumnMappings.Add("20+", "20+");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS no, b.y AS [<5], c.y AS [5 - 10], d.y AS [" +
                "11 - 15], e.y AS [16 - 20], f.y AS [20+], ISNULL(a.y, 0) + ISNULL(b.y, 0) + ISNU" +
                "LL(c.y, 0)\r\n                       + ISNULL(d.y, 0) + ISNULL(e.y, 0) + ISNULL(f." +
                "y, 0) AS total\r\nFROM         (SELECT     [union].union_name AS x, ISNULL(a.y, 0)" +
                " AS y\r\n                       FROM          [union] LEFT OUTER JOIN\r\n           " +
                "                                       (SELECT     [union].union_name, COUNT(kha" +
                "na.khana_id) AS y\r\n                                                    FROM     " +
                "     khana INNER JOIN\r\n                                                         " +
                "                  cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                 " +
                "                                                          [union] ON cnc.union_i" +
                "d = [union].union_id\r\n                                                    WHERE " +
                "     (khana.vegitable_land = 0)\r\n                                               " +
                "     GROUP BY [union].union_name) a ON a.union_name = [union].union_name) a LEFT" +
                " OUTER JOIN\r\n                          (SELECT     [union].union_name AS x, ISNU" +
                "LL(a.y, 0) AS y\r\n                            FROM          [union] LEFT OUTER JO" +
                "IN\r\n                                                       (SELECT     [union].u" +
                "nion_name, COUNT(khana.khana_id) AS y\r\n                                         " +
                "                FROM          khana INNER JOIN\r\n                                " +
                "                                                cnc ON khana.cnc_id = cnc.cnc_id" +
                " INNER JOIN\r\n                                                                   " +
                "             [union] ON cnc.union_id = [union].union_id\r\n                       " +
                "                                  WHERE      (khana.vegitable_land < 5)\r\n       " +
                "                                                  GROUP BY [union].union_name) a" +
                " ON a.union_name = [union].union_name) b ON a.x = b.x LEFT OUTER JOIN\r\n         " +
                "                 (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n     " +
                "                       FROM          [union] LEFT OUTER JOIN\r\n                  " +
                "                                     (SELECT     [union].union_name, COUNT(khana" +
                ".khana_id) AS y\r\n                                                         FROM  " +
                "        khana INNER JOIN\r\n                                                      " +
                "                          cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n         " +
                "                                                                       [union] O" +
                "N cnc.union_id = [union].union_id\r\n                                             " +
                "            WHERE      (khana.vegitable_land BETWEEN 5 AND 10)\r\n                " +
                "                                         GROUP BY [union].union_name) a ON a.uni" +
                "on_name = [union].union_name) c ON b.x = c.x LEFT OUTER JOIN\r\n                  " +
                "        (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n              " +
                "              FROM          [union] LEFT OUTER JOIN\r\n                           " +
                "                            (SELECT     [union].union_name, COUNT(khana.khana_id" +
                ") AS y\r\n                                                         FROM          k" +
                "hana INNER JOIN\r\n                                                               " +
                "                 cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                  " +
                "                                                              [union] ON cnc.uni" +
                "on_id = [union].union_id\r\n                                                      " +
                "   WHERE      (khana.vegitable_land BETWEEN 11 AND 15)\r\n                        " +
                "                                 GROUP BY [union].union_name) a ON a.union_name " +
                "= [union].union_name) d ON c.x = d.x LEFT OUTER JOIN\r\n                          " +
                "(SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                      " +
                "      FROM          [union] LEFT OUTER JOIN\r\n                                   " +
                "                    (SELECT     [union].union_name, COUNT(khana.khana_id) AS y\r\n" +
                "                                                         FROM          khana INN" +
                "ER JOIN\r\n                                                                       " +
                "         cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                          " +
                "                                                      [union] ON cnc.union_id = " +
                "[union].union_id\r\n                                                         WHERE" +
                "      (khana.vegitable_land BETWEEN 16 AND 20)\r\n                                " +
                "                         GROUP BY [union].union_name) a ON a.union_name = [union" +
                "].union_name) e ON d.x = e.x LEFT OUTER JOIN\r\n                          (SELECT " +
                "    [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FR" +
                "OM          [union] LEFT OUTER JOIN\r\n                                           " +
                "            (SELECT     [union].union_name, COUNT(khana.khana_id) AS y\r\n        " +
                "                                                 FROM          khana INNER JOIN\r" +
                "\n                                                                               " +
                " cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                  " +
                "                                              [union] ON cnc.union_id = [union]." +
                "union_id\r\n                                                         WHERE      (k" +
                "hana.vegitable_land > 20)\r\n                                                     " +
                "    GROUP BY [union].union_name) a ON a.union_name = [union].union_name) f ON e." +
                "x = f.x\r\n\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "\r\nSELECT     a.x AS [union name], a.y AS [<5], b.y AS [6 - 10], c.y AS [11 - 15]," +
                " d.y AS [16+]\r\nFROM         (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n " +
                "                      FROM          khana INNER JOIN\r\n                          " +
                "                    cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n               " +
                "                               [union] ON cnc.union_id = [union].union_id\r\n     " +
                "                  WHERE      (khana.vegitable_land < 5)\r\n                       " +
                "GROUP BY union_name) a INNER JOIN\r\n                          (SELECT     union_n" +
                "ame AS x, COUNT(khana_id) AS y\r\n                            FROM          khana " +
                "INNER JOIN\r\n                                                   cnc ON khana.cnc_" +
                "id = cnc.cnc_id INNER JOIN\r\n                                                   [" +
                "union] ON cnc.union_id = [union].union_id\r\n                            WHERE    " +
                "  (khana.vegitable_land BETWEEN 6 AND 10)\r\n                            GROUP BY " +
                "union_name) b ON a.x = b.x INNER JOIN\r\n                          (SELECT     uni" +
                "on_name AS x, COUNT(khana_id) AS y\r\n                            FROM          kh" +
                "ana INNER JOIN\r\n                                                   cnc ON khana." +
                "cnc_id = cnc.cnc_id INNER JOIN\r\n                                                " +
                "   [union] ON cnc.union_id = [union].union_id\r\n                            WHERE" +
                "      (khana.vegitable_land BETWEEN 11 AND 15)\r\n                            GROU" +
                "P BY union_name) c ON b.x = c.x INNER JOIN\r\n                          (SELECT   " +
                "  union_name AS x, COUNT(khana_id) AS y\r\n                            FROM       " +
                "   khana INNER JOIN\r\n                                                   cnc ON k" +
                "hana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                           " +
                "        [union] ON cnc.union_id = [union].union_id\r\n                            " +
                "WHERE      (khana.vegitable_land > 16)\r\n                            GROUP BY uni" +
                "on_name) d ON c.x = d.x";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table13BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table13BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table13BDataTable dataTable = new DataSet2.Table13BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(DataSet2.Table13BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual DataSet2.Table13BDataTable GetDataBy() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            DataSet2.Table13BDataTable dataTable = new DataSet2.Table13BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table14CowTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table14CowTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table14Cow";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            tableMapping.ColumnMappings.Add("1-2", "1-2");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [1-2], b.y AS [3 - 4], c.y AS [4+], d.y AS" +
                " no, ISNULL(a.y, 0) + ISNULL(b.y, 0) + ISNULL(c.y, 0) + ISNULL(d.y, 0) AS total\r" +
                "\nFROM         (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n        " +
                "               FROM          [union] LEFT OUTER JOIN\r\n                          " +
                "                        (SELECT     [union].union_name, COUNT(khana.khana_id) AS" +
                " y\r\n                                                    FROM          khana INNE" +
                "R JOIN\r\n                                                                        " +
                "   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                " +
                "                                           [union] ON cnc.union_id = [union].uni" +
                "on_id\r\n                                                    WHERE      (khana.cow" +
                " BETWEEN 1 AND 2)\r\n                                                    GROUP BY " +
                "[union].union_name) a ON a.union_name = [union].union_name) a LEFT OUTER JOIN\r\n " +
                "                         (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS " +
                "y\r\n                            FROM          [union] LEFT OUTER JOIN\r\n          " +
                "                                             (SELECT     [union].union_name, COU" +
                "NT(khana.khana_id) AS y\r\n                                                       " +
                "  FROM          khana INNER JOIN\r\n                                              " +
                "                                  cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n " +
                "                                                                               [" +
                "union] ON cnc.union_id = [union].union_id\r\n                                     " +
                "                    WHERE      (khana.cow BETWEEN 3 AND 4)\r\n                    " +
                "                                     GROUP BY [union].union_name) a ON a.union_n" +
                "ame = [union].union_name) b ON a.x = b.x LEFT OUTER JOIN\r\n                      " +
                "    (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                  " +
                "          FROM          [union] LEFT OUTER JOIN\r\n                               " +
                "                        (SELECT     [union].union_name, COUNT(khana.khana_id) AS" +
                " y\r\n                                                         FROM          khana" +
                " INNER JOIN\r\n                                                                   " +
                "             cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                      " +
                "                                                          [union] ON cnc.union_i" +
                "d = [union].union_id\r\n                                                         W" +
                "HERE      (khana.cow > 4)\r\n                                                     " +
                "    GROUP BY [union].union_name) a ON a.union_name = [union].union_name) c ON b." +
                "x = c.x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union] L" +
                "EFT OUTER JOIN\r\n                                                       (SELECT  " +
                "   [union].union_name, COUNT(khana.khana_id) AS y\r\n                             " +
                "                            FROM          khana INNER JOIN\r\n                    " +
                "                                                            cnc ON khana.cnc_id " +
                "= cnc.cnc_id INNER JOIN\r\n                                                       " +
                "                         [union] ON cnc.union_id = [union].union_id\r\n           " +
                "                                              WHERE      (khana.cow = 0)\r\n      " +
                "                                                   GROUP BY [union].union_name) " +
                "a ON a.union_name = [union].union_name) d ON c.x = d.x\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table14CowDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table14CowDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table14CowDataTable dataTable = new DataSet2.Table14CowDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table14GoatTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table14GoatTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table14Goat";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0-2", "0-2");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.x AS [union name], a.y AS [0-2], b.y AS [3 - 4], c.y AS [4+]
FROM         (SELECT     union_name AS x, COUNT(khana_id) AS y
                       FROM          khana INNER JOIN
                                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                              [union] ON cnc.union_id = [union].union_id
                       WHERE      (khana.goat < 3)
                       GROUP BY union_name) a INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.goat BETWEEN 3 AND 4)
                            GROUP BY union_name) b ON a.x = b.x INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.goat >= 5)
                            GROUP BY union_name) c ON b.x = c.x
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table14GoatDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table14GoatDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table14GoatDataTable dataTable = new DataSet2.Table14GoatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table14HenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table14HenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table14Hen";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0-2", "0-2");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.x AS [union name], a.y AS [0-2], b.y AS [3 - 4], c.y AS [4+]
FROM         (SELECT     union_name AS x, COUNT(khana_id) AS y
                       FROM          khana INNER JOIN
                                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                              [union] ON cnc.union_id = [union].union_id
                       WHERE      (khana.hen < 3)
                       GROUP BY union_name) a INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.hen BETWEEN 3 AND 4)
                            GROUP BY union_name) b ON a.x = b.x INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.hen >= 5)
                            GROUP BY union_name) c ON b.x = c.x
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table14HenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table14HenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table14HenDataTable dataTable = new DataSet2.Table14HenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table15TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table15TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table15";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            tableMapping.ColumnMappings.Add("1-2", "1-2");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [1-2], b.y AS [3 - 4], c.y AS [4+], d.y AS" +
                " no, ISNULL(a.y, 0) + ISNULL(b.y, 0) + ISNULL(c.y, 0) + ISNULL(d.y, 0) AS total\r" +
                "\nFROM         (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n        " +
                "               FROM          [union] LEFT OUTER JOIN\r\n                          " +
                "                        (SELECT     union_name, COUNT(khana_id) AS y\r\n          " +
                "                                          FROM          khana INNER JOIN\r\n      " +
                "                                                                     cnc ON khan" +
                "a.cnc_id = cnc.cnc_id INNER JOIN\r\n                                              " +
                "                             [union] ON cnc.union_id = [union].union_id\r\n       " +
                "                                             WHERE      (khana.fruit_tree BETWEE" +
                "N 1 AND 2)\r\n                                                    GROUP BY union_n" +
                "ame) a ON a.union_name = [union].union_name) a LEFT OUTER JOIN\r\n                " +
                "          (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n            " +
                "                FROM          [union] LEFT OUTER JOIN\r\n                         " +
                "                              (SELECT     union_name, COUNT(khana_id) AS y\r\n    " +
                "                                                     FROM          khana INNER J" +
                "OIN\r\n                                                                           " +
                "     cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                              " +
                "                                                  [union] ON cnc.union_id = [uni" +
                "on].union_id\r\n                                                         WHERE    " +
                "  (khana.fruit_tree BETWEEN 3 AND 4)\r\n                                          " +
                "               GROUP BY union_name) a ON a.union_name = [union].union_name) b ON" +
                " a.x = b.x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_" +
                "name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union" +
                "] LEFT OUTER JOIN\r\n                                                       (SELEC" +
                "T     union_name, COUNT(khana_id) AS y\r\n                                        " +
                "                 FROM          khana INNER JOIN\r\n                               " +
                "                                                 cnc ON khana.cnc_id = cnc.cnc_i" +
                "d INNER JOIN\r\n                                                                  " +
                "              [union] ON cnc.union_id = [union].union_id\r\n                      " +
                "                                   WHERE      (khana.fruit_tree > 4)\r\n          " +
                "                                               GROUP BY union_name) a ON a.union" +
                "_name = [union].union_name) c ON b.x = c.x LEFT OUTER JOIN\r\n                    " +
                "      (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                " +
                "            FROM          [union] LEFT OUTER JOIN\r\n                             " +
                "                          (SELECT     union_name, COUNT(khana_id) AS y\r\n        " +
                "                                                 FROM          khana INNER JOIN\r" +
                "\n                                                                               " +
                " cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                  " +
                "                                              [union] ON cnc.union_id = [union]." +
                "union_id\r\n                                                         WHERE      (k" +
                "hana.fruit_tree = 0)\r\n                                                         G" +
                "ROUP BY union_name) a ON a.union_name = [union].union_name) d ON c.x = d.x\r\n\r\n\r\n" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table15DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table15DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table15DataTable dataTable = new DataSet2.Table15DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table16TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table16TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table16";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0 - 3", "0 - 3");
            tableMapping.ColumnMappings.Add("4 - 6", "4 - 6");
            tableMapping.ColumnMappings.Add("7 - 9", "7 - 9");
            tableMapping.ColumnMappings.Add("10 - 11", "10 - 11");
            tableMapping.ColumnMappings.Add("12", "12");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [0 - 3], b.y AS [4 - 6], c.y AS [7 - 9], d" +
                ".y AS [10 - 11], e.y AS [12], ISNULL(a.y, 0) + ISNULL(b.y, 0) + ISNULL(c.y, 0) \r" +
                "\n                      + ISNULL(d.y, 0) + ISNULL(e.y, 0) AS total\r\nFROM         " +
                "(SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                      " +
                " FROM          [union] LEFT OUTER JOIN\r\n                                        " +
                "          (SELECT     union_name, COUNT(khana_id) AS y\r\n                        " +
                "                            FROM          khana INNER JOIN\r\n                    " +
                "                                                       cnc ON khana.cnc_id = cnc" +
                ".cnc_id INNER JOIN\r\n                                                            " +
                "               [union] ON cnc.union_id = [union].union_id\r\n                     " +
                "                               WHERE      (khana.month_covered < 3)\r\n           " +
                "                                         GROUP BY union_name) a ON a.union_name " +
                "= [union].union_name) a LEFT OUTER JOIN\r\n                          (SELECT     [" +
                "union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM   " +
                "       [union] LEFT OUTER JOIN\r\n                                                " +
                "       (SELECT     union_name, COUNT(khana_id) AS y\r\n                           " +
                "                              FROM          khana INNER JOIN\r\n                  " +
                "                                                              cnc ON khana.cnc_i" +
                "d = cnc.cnc_id INNER JOIN\r\n                                                     " +
                "                           [union] ON cnc.union_id = [union].union_id\r\n         " +
                "                                                WHERE      (khana.month_covered " +
                "BETWEEN 4 AND 6)\r\n                                                         GROUP" +
                " BY union_name) a ON a.union_name = [union].union_name) b ON a.x = b.x LEFT OUTE" +
                "R JOIN\r\n                          (SELECT     [union].union_name AS x, ISNULL(a." +
                "y, 0) AS y\r\n                            FROM          [union] LEFT OUTER JOIN\r\n " +
                "                                                      (SELECT     union_name, CO" +
                "UNT(khana_id) AS y\r\n                                                         FRO" +
                "M          khana INNER JOIN\r\n                                                   " +
                "                             cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n      " +
                "                                                                          [union" +
                "] ON cnc.union_id = [union].union_id\r\n                                          " +
                "               WHERE      (khana.month_covered BETWEEN 7 AND 9)\r\n               " +
                "                                          GROUP BY union_name) a ON a.union_name" +
                " = [union].union_name) c ON b.x = c.x LEFT OUTER JOIN\r\n                         " +
                " (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                     " +
                "       FROM          [union] LEFT OUTER JOIN\r\n                                  " +
                "                     (SELECT     union_name, COUNT(khana_id) AS y\r\n             " +
                "                                            FROM          khana INNER JOIN\r\n    " +
                "                                                                            cnc " +
                "ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                       " +
                "                                         [union] ON cnc.union_id = [union].union" +
                "_id\r\n                                                         WHERE      (khana." +
                "month_covered BETWEEN 10 AND 11)\r\n                                              " +
                "           GROUP BY union_name) a ON a.union_name = [union].union_name) d ON c.x" +
                " = d.x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_name" +
                " AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union] LE" +
                "FT OUTER JOIN\r\n                                                       (SELECT   " +
                "  union_name, COUNT(khana_id) AS y\r\n                                            " +
                "             FROM          khana INNER JOIN\r\n                                   " +
                "                                             cnc ON khana.cnc_id = cnc.cnc_id IN" +
                "NER JOIN\r\n                                                                      " +
                "          [union] ON cnc.union_id = [union].union_id\r\n                          " +
                "                               WHERE      (khana.month_covered = 12)\r\n          " +
                "                                               GROUP BY union_name) a ON a.union" +
                "_name = [union].union_name) e ON d.x = e.x\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table16DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table16DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table16DataTable dataTable = new DataSet2.Table16DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table17TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table17TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table17";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0 - 120", "0 - 120");
            tableMapping.ColumnMappings.Add("121 - 180", "121 - 180");
            tableMapping.ColumnMappings.Add("181 - 240", "181 - 240");
            tableMapping.ColumnMappings.Add("241 - 300", "241 - 300");
            tableMapping.ColumnMappings.Add("300+", "300+");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [0 - 120], b.y AS [121 - 180], c.y AS [181" +
                " - 240], d.y AS [241 - 300], e.y AS [300+], ISNULL(a.y, 0) + ISNULL(b.y, 0) \r\n  " +
                "                    + ISNULL(c.y, 0) + ISNULL(d.y, 0) + ISNULL(e.y, 0) AS total\r" +
                "\nFROM         (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n        " +
                "               FROM          [union] LEFT OUTER JOIN\r\n                          " +
                "                        (SELECT     union_name, COUNT(khana_id) AS y\r\n          " +
                "                                          FROM          khana INNER JOIN\r\n      " +
                "                                                                     cnc ON khan" +
                "a.cnc_id = cnc.cnc_id INNER JOIN\r\n                                              " +
                "                             [union] ON cnc.union_id = [union].union_id\r\n       " +
                "                                             WHERE      (khana.labour_days <= 12" +
                "0)\r\n                                                    GROUP BY union_name) a O" +
                "N a.union_name = [union].union_name) a LEFT OUTER JOIN\r\n                        " +
                "  (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                    " +
                "        FROM          [union] LEFT OUTER JOIN\r\n                                 " +
                "                      (SELECT     union_name, COUNT(khana_id) AS y\r\n            " +
                "                                             FROM          khana INNER JOIN\r\n   " +
                "                                                                             cnc" +
                " ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                      " +
                "                                          [union] ON cnc.union_id = [union].unio" +
                "n_id\r\n                                                         WHERE      (khana" +
                ".labour_days BETWEEN 121 AND 180)\r\n                                             " +
                "            GROUP BY union_name) a ON a.union_name = [union].union_name) b ON a." +
                "x = b.x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          [union] L" +
                "EFT OUTER JOIN\r\n                                                       (SELECT  " +
                "   union_name, COUNT(khana_id) AS y\r\n                                           " +
                "              FROM          khana INNER JOIN\r\n                                  " +
                "                                              cnc ON khana.cnc_id = cnc.cnc_id I" +
                "NNER JOIN\r\n                                                                     " +
                "           [union] ON cnc.union_id = [union].union_id\r\n                         " +
                "                                WHERE      (khana.labour_days BETWEEN 181 AND 24" +
                "0)\r\n                                                         GROUP BY union_name" +
                ") a ON a.union_name = [union].union_name) c ON b.x = c.x LEFT OUTER JOIN\r\n      " +
                "                    (SELECT     [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n  " +
                "                          FROM          [union] LEFT OUTER JOIN\r\n               " +
                "                                        (SELECT     union_name, COUNT(khana_id) " +
                "AS y\r\n                                                         FROM          kha" +
                "na INNER JOIN\r\n                                                                 " +
                "               cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                    " +
                "                                                            [union] ON cnc.union" +
                "_id = [union].union_id\r\n                                                        " +
                " WHERE      (khana.labour_days BETWEEN 241 AND 300)\r\n                           " +
                "                              GROUP BY union_name) a ON a.union_name = [union].u" +
                "nion_name) d ON c.x = d.x LEFT OUTER JOIN\r\n                          (SELECT    " +
                " [union].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM " +
                "         [union] LEFT OUTER JOIN\r\n                                              " +
                "         (SELECT     union_name, COUNT(khana_id) AS y\r\n                         " +
                "                                FROM          khana INNER JOIN\r\n                " +
                "                                                                cnc ON khana.cnc" +
                "_id = cnc.cnc_id INNER JOIN\r\n                                                   " +
                "                             [union] ON cnc.union_id = [union].union_id\r\n       " +
                "                                                  WHERE      (khana.labour_days " +
                "> 300)\r\n                                                         GROUP BY union_" +
                "name) a ON a.union_name = [union].union_name) e ON d.x = e.x\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table17DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table17DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table17DataTable dataTable = new DataSet2.Table17DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table20TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table20TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table20";
            tableMapping.ColumnMappings.Add("unionname", "unionname");
            tableMapping.ColumnMappings.Add("yes", "yes");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     x.a AS unionname, x.b AS yes, y.b AS no, ISNULL(x.b, 0) + ISNULL(y.b, " +
                "0) AS total\r\nFROM         (SELECT     [union].union_name AS a, ISNULL(p.b, 0) AS" +
                " b\r\n                       FROM          [union] LEFT OUTER JOIN\r\n              " +
                "                                    (SELECT     [union].union_name, COUNT(khana." +
                "khana_id) AS b\r\n                                                    FROM        " +
                "  khana INNER JOIN\r\n                                                            " +
                "               cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                    " +
                "                                                       [union] ON cnc.union_id =" +
                " [union].union_id\r\n                                                    WHERE    " +
                "  (khana.latrine = 1)\r\n                                                    GROUP" +
                " BY [union].union_name) p ON [union].union_name = p.union_name) x LEFT OUTER JOI" +
                "N\r\n                          (SELECT     [union].union_name AS a, ISNULL(p.b, 0)" +
                " AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n      " +
                "                                                 (SELECT     [union].union_name," +
                " COUNT(khana.khana_id) AS b\r\n                                                   " +
                "      FROM          khana INNER JOIN\r\n                                          " +
                "                                      cnc ON khana.cnc_id = cnc.cnc_id INNER JOI" +
                "N\r\n                                                                             " +
                "   [union] ON cnc.union_id = [union].union_id\r\n                                 " +
                "                        WHERE      (khana.latrine = 2)\r\n                        " +
                "                                 GROUP BY [union].union_name) p ON [union].union" +
                "_name = p.union_name) y ON x.a = y.a\r\n\r\n\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table20DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table20DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table20DataTable dataTable = new DataSet2.Table20DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table11TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table11TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table11";
            tableMapping.ColumnMappings.Add("unionname", "unionname");
            tableMapping.ColumnMappings.Add("pacca", "pacca");
            tableMapping.ColumnMappings.Add("tin", "tin");
            tableMapping.ColumnMappings.Add("straw/bamboo", "straw/bamboo");
            tableMapping.ColumnMappings.Add("earth", "earth");
            tableMapping.ColumnMappings.Add("others", "others");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a1.a AS unionname, a1.b AS pacca, a2.b AS tin, a3.b AS [straw/bamboo]," +
                " a4.b AS earth, a5.b AS others, ISNULL(a1.b, 0) + ISNULL(a2.b, 0) \r\n            " +
                "          + ISNULL(a3.b, 0) + ISNULL(a4.b, 0) + ISNULL(a5.b, 0) AS total\r\nFROM  " +
                "       (SELECT     [union].union_name AS a, ISNULL(x.b, 0) AS b\r\n               " +
                "        FROM          [union] LEFT OUTER JOIN\r\n                                 " +
                "                 (SELECT     a AS union_name, COUNT(c) AS b\r\n                   " +
                "                                 FROM          (SELECT     [union].union_name AS" +
                " a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                         " +
                "                                                   FROM          cnc INNER JOIN\r" +
                "\n                                                                               " +
                "                    khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n             " +
                "                                                                                " +
                "      roof ON khana.roof_no = roof.roof_no INNER JOIN\r\n                         " +
                "                                                                          [union" +
                "] ON cnc.union_id = [union].union_id INNER JOIN\r\n                               " +
                "                                                                    member ON kh" +
                "ana.khana_id = member.khana_id\r\n                                                " +
                "                            WHERE      (khana.roof_no = 1)\r\n                    " +
                "                                                        GROUP BY [union].union_n" +
                "ame, khana.khana_id) DERIVEDTBL\r\n                                               " +
                "     GROUP BY a) x ON [union].union_name = x.union_name) a1 LEFT OUTER JOIN\r\n   " +
                "                       (SELECT     [union].union_name AS a, ISNULL(x.b, 0) AS b\r" +
                "\n                            FROM          [union] LEFT OUTER JOIN\r\n            " +
                "                                           (SELECT     a AS union_name, COUNT(c)" +
                " AS b\r\n                                                         FROM          (S" +
                "ELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member.member_id) " +
                "AS c\r\n                                                                          " +
                "       FROM          cnc INNER JOIN\r\n                                           " +
                "                                                             khana ON cnc.cnc_id" +
                " = khana.cnc_id INNER JOIN\r\n                                                    " +
                "                                                    roof ON khana.roof_no = roof" +
                ".roof_no INNER JOIN\r\n                                                           " +
                "                                             [union] ON cnc.union_id = [union].u" +
                "nion_id INNER JOIN\r\n                                                            " +
                "                                            member ON khana.khana_id = member.kh" +
                "ana_id\r\n                                                                        " +
                "         WHERE      (khana.roof_no = 2)\r\n                                       " +
                "                                          GROUP BY [union].union_name, khana.kha" +
                "na_id) DERIVEDTBL\r\n                                                         GROU" +
                "P BY a) x ON [union].union_name = x.union_name) a2 ON a1.a = a2.a LEFT OUTER JOI" +
                "N\r\n                          (SELECT     [union].union_name AS a, ISNULL(x.b, 0)" +
                " AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n      " +
                "                                                 (SELECT     a AS union_name, CO" +
                "UNT(c) AS b\r\n                                                         FROM      " +
                "    (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member.membe" +
                "r_id) AS c\r\n                                                                    " +
                "             FROM          cnc INNER JOIN\r\n                                     " +
                "                                                                   khana ON cnc." +
                "cnc_id = khana.cnc_id INNER JOIN\r\n                                              " +
                "                                                          roof ON khana.roof_no " +
                "= roof.roof_no INNER JOIN\r\n                                                     " +
                "                                                   [union] ON cnc.union_id = [un" +
                "ion].union_id INNER JOIN\r\n                                                      " +
                "                                                  member ON khana.khana_id = mem" +
                "ber.khana_id\r\n                                                                  " +
                "               WHERE      (khana.roof_no = 3)\r\n                                 " +
                "                                                GROUP BY [union].union_name, kha" +
                "na.khana_id) DERIVEDTBL\r\n                                                       " +
                "  GROUP BY a) x ON [union].union_name = x.union_name) a3 ON a2.a = a3.a LEFT OUT" +
                "ER JOIN\r\n                          (SELECT     [union].union_name AS a, ISNULL(x" +
                ".b, 0) AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n" +
                "                                                       (SELECT     a AS union_na" +
                "me, COUNT(c) AS b\r\n                                                         FROM" +
                "          (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member" +
                ".member_id) AS c\r\n                                                              " +
                "                   FROM          cnc INNER JOIN\r\n                               " +
                "                                                                         khana O" +
                "N cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                                        " +
                "                                                                roof ON khana.ro" +
                "of_no = roof.roof_no INNER JOIN\r\n                                               " +
                "                                                         [union] ON cnc.union_id" +
                " = [union].union_id INNER JOIN\r\n                                                " +
                "                                                        member ON khana.khana_id" +
                " = member.khana_id\r\n                                                            " +
                "                     WHERE      (khana.roof_no = 4)\r\n                           " +
                "                                                      GROUP BY [union].union_nam" +
                "e, khana.khana_id) DERIVEDTBL\r\n                                                 " +
                "        GROUP BY a) x ON [union].union_name = x.union_name) a4 ON a3.a = a4.a LE" +
                "FT OUTER JOIN\r\n                          (SELECT     [union].union_name AS a, IS" +
                "NULL(x.b, 0) AS b\r\n                            FROM          [union] LEFT OUTER " +
                "JOIN\r\n                                                       (SELECT     a AS un" +
                "ion_name, COUNT(c) AS b\r\n                                                       " +
                "  FROM          (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(" +
                "member.member_id) AS c\r\n                                                        " +
                "                         FROM          cnc INNER JOIN\r\n                         " +
                "                                                                               k" +
                "hana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                                  " +
                "                                                                      roof ON kh" +
                "ana.roof_no = roof.roof_no INNER JOIN\r\n                                         " +
                "                                                               [union] ON cnc.un" +
                "ion_id = [union].union_id INNER JOIN\r\n                                          " +
                "                                                              member ON khana.kh" +
                "ana_id = member.khana_id\r\n                                                      " +
                "                           WHERE      (khana.roof_no = 5)\r\n                     " +
                "                                                            GROUP BY [union].uni" +
                "on_name, khana.khana_id) DERIVEDTBL\r\n                                           " +
                "              GROUP BY a) x ON [union].union_name = x.union_name) a5 ON a4.a = a" +
                "5.a\r\n\r\n\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table11DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table11DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table11DataTable dataTable = new DataSet2.Table11DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table11ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table11ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table11A";
            tableMapping.ColumnMappings.Add("unionname", "unionname");
            tableMapping.ColumnMappings.Add("pacca", "pacca");
            tableMapping.ColumnMappings.Add("tin", "tin");
            tableMapping.ColumnMappings.Add("straw/bamboo", "straw/bamboo");
            tableMapping.ColumnMappings.Add("earth", "earth");
            tableMapping.ColumnMappings.Add("others", "others");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a1.a AS unionname, a1.b AS pacca, a2.b AS tin, a3.b AS [straw/bamboo]," +
                " a4.b AS earth, a5.b AS others, ISNULL(a1.b, 0) + ISNULL(a2.b, 0) \r\n            " +
                "          + ISNULL(a3.b, 0) + ISNULL(a4.b, 0) + ISNULL(a5.b, 0) AS total\r\nFROM  " +
                "       (SELECT     [union].union_name AS a, ISNULL(x.b, 0) AS b\r\n               " +
                "        FROM          [union] LEFT OUTER JOIN\r\n                                 " +
                "                 (SELECT     a AS union_name, COUNT(c) AS b\r\n                   " +
                "                                 FROM          (SELECT     [union].union_name AS" +
                " a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                         " +
                "                                                   FROM          cnc INNER JOIN\r" +
                "\n                                                                               " +
                "                    khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n             " +
                "                                                                                " +
                "      wall ON khana.wall_no = wall.wall_no INNER JOIN\r\n                         " +
                "                                                                          [union" +
                "] ON cnc.union_id = [union].union_id INNER JOIN\r\n                               " +
                "                                                                    member ON kh" +
                "ana.khana_id = member.khana_id\r\n                                                " +
                "                            WHERE      (khana.wall_no = 1)\r\n                    " +
                "                                                        GROUP BY [union].union_n" +
                "ame, khana.khana_id) DERIVEDTBL\r\n                                               " +
                "     GROUP BY a) x ON [union].union_name = x.union_name) a1 LEFT OUTER JOIN\r\n   " +
                "                       (SELECT     [union].union_name AS a, ISNULL(x.b, 0) AS b\r" +
                "\n                            FROM          [union] LEFT OUTER JOIN\r\n            " +
                "                                           (SELECT     a AS union_name, COUNT(c)" +
                " AS b\r\n                                                         FROM          (S" +
                "ELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member.member_id) " +
                "AS c\r\n                                                                          " +
                "       FROM          cnc INNER JOIN\r\n                                           " +
                "                                                             khana ON cnc.cnc_id" +
                " = khana.cnc_id INNER JOIN\r\n                                                    " +
                "                                                    wall ON khana.wall_no = wall" +
                ".wall_no INNER JOIN\r\n                                                           " +
                "                                             [union] ON cnc.union_id = [union].u" +
                "nion_id INNER JOIN\r\n                                                            " +
                "                                            member ON khana.khana_id = member.kh" +
                "ana_id\r\n                                                                        " +
                "         WHERE      (khana.wall_no = 2)\r\n                                       " +
                "                                          GROUP BY [union].union_name, khana.kha" +
                "na_id) DERIVEDTBL\r\n                                                         GROU" +
                "P BY a) x ON [union].union_name = x.union_name) a2 ON a1.a = a2.a LEFT OUTER JOI" +
                "N\r\n                          (SELECT     [union].union_name AS a, ISNULL(x.b, 0)" +
                " AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n      " +
                "                                                 (SELECT     a AS union_name, CO" +
                "UNT(c) AS b\r\n                                                         FROM      " +
                "    (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member.membe" +
                "r_id) AS c\r\n                                                                    " +
                "             FROM          cnc INNER JOIN\r\n                                     " +
                "                                                                   khana ON cnc." +
                "cnc_id = khana.cnc_id INNER JOIN\r\n                                              " +
                "                                                          wall ON khana.wall_no " +
                "= wall.wall_no INNER JOIN\r\n                                                     " +
                "                                                   [union] ON cnc.union_id = [un" +
                "ion].union_id INNER JOIN\r\n                                                      " +
                "                                                  member ON khana.khana_id = mem" +
                "ber.khana_id\r\n                                                                  " +
                "               WHERE      (khana.wall_no = 3)\r\n                                 " +
                "                                                GROUP BY [union].union_name, kha" +
                "na.khana_id) DERIVEDTBL\r\n                                                       " +
                "  GROUP BY a) x ON [union].union_name = x.union_name) a3 ON a2.a = a3.a LEFT OUT" +
                "ER JOIN\r\n                          (SELECT     [union].union_name AS a, ISNULL(x" +
                ".b, 0) AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n" +
                "                                                       (SELECT     a AS union_na" +
                "me, COUNT(c) AS b\r\n                                                         FROM" +
                "          (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member" +
                ".member_id) AS c\r\n                                                              " +
                "                   FROM          cnc INNER JOIN\r\n                               " +
                "                                                                         khana O" +
                "N cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                                        " +
                "                                                                wall ON khana.wa" +
                "ll_no = wall.wall_no INNER JOIN\r\n                                               " +
                "                                                         [union] ON cnc.union_id" +
                " = [union].union_id INNER JOIN\r\n                                                " +
                "                                                        member ON khana.khana_id" +
                " = member.khana_id\r\n                                                            " +
                "                     WHERE      (khana.wall_no = 4)\r\n                           " +
                "                                                      GROUP BY [union].union_nam" +
                "e, khana.khana_id) DERIVEDTBL\r\n                                                 " +
                "        GROUP BY a) x ON [union].union_name = x.union_name) a4 ON a3.a = a4.a LE" +
                "FT OUTER JOIN\r\n                          (SELECT     [union].union_name AS a, IS" +
                "NULL(x.b, 0) AS b\r\n                            FROM          [union] LEFT OUTER " +
                "JOIN\r\n                                                       (SELECT     a AS un" +
                "ion_name, COUNT(c) AS b\r\n                                                       " +
                "  FROM          (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(" +
                "member.member_id) AS c\r\n                                                        " +
                "                         FROM          cnc INNER JOIN\r\n                         " +
                "                                                                               k" +
                "hana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                                  " +
                "                                                                      wall ON kh" +
                "ana.wall_no = wall.wall_no INNER JOIN\r\n                                         " +
                "                                                               [union] ON cnc.un" +
                "ion_id = [union].union_id INNER JOIN\r\n                                          " +
                "                                                              member ON khana.kh" +
                "ana_id = member.khana_id\r\n                                                      " +
                "                           WHERE      (khana.wall_no = 5)\r\n                     " +
                "                                                            GROUP BY [union].uni" +
                "on_name, khana.khana_id) DERIVEDTBL\r\n                                           " +
                "              GROUP BY a) x ON [union].union_name = x.union_name) a5 ON a4.a = a" +
                "5.a\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table11ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table11ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table11ADataTable dataTable = new DataSet2.Table11ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table11BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table11BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table11B";
            tableMapping.ColumnMappings.Add("unionname", "unionname");
            tableMapping.ColumnMappings.Add("pacca", "pacca");
            tableMapping.ColumnMappings.Add("tin", "tin");
            tableMapping.ColumnMappings.Add("straw/bamboo", "straw/bamboo");
            tableMapping.ColumnMappings.Add("earth", "earth");
            tableMapping.ColumnMappings.Add("others", "others");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a1.a AS unionname, a1.b AS pacca, a2.b AS tin, a3.b AS [straw/bamboo]," +
                " a4.b AS earth, a5.b AS others, ISNULL(a1.b, 0) + ISNULL(a2.b, 0) \r\n            " +
                "          + ISNULL(a3.b, 0) + ISNULL(a4.b, 0) + ISNULL(a5.b, 0) AS total\r\nFROM  " +
                "       (SELECT     [union].union_name AS a, ISNULL(x.b, 0) AS b\r\n               " +
                "        FROM          [union] LEFT OUTER JOIN\r\n                                 " +
                "                 (SELECT     a AS union_name, COUNT(c) AS b\r\n                   " +
                "                                 FROM          (SELECT     [union].union_name AS" +
                " a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                         " +
                "                                                   FROM          cnc INNER JOIN\r" +
                "\n                                                                               " +
                "                    khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n             " +
                "                                                                                " +
                "      floor ON khana.floor_no = floor.floor_no INNER JOIN\r\n                     " +
                "                                                                              [u" +
                "nion] ON cnc.union_id = [union].union_id INNER JOIN\r\n                           " +
                "                                                                        member O" +
                "N khana.khana_id = member.khana_id\r\n                                            " +
                "                                WHERE      (khana.floor_no = 1)\r\n               " +
                "                                                             GROUP BY [union].un" +
                "ion_name, khana.khana_id) DERIVEDTBL\r\n                                          " +
                "          GROUP BY a) x ON [union].union_name = x.union_name) a1 LEFT OUTER JOIN" +
                "\r\n                          (SELECT     [union].union_name AS a, ISNULL(x.b, 0) " +
                "AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n       " +
                "                                                (SELECT     a AS union_name, COU" +
                "NT(c) AS b\r\n                                                         FROM       " +
                "   (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(member.member" +
                "_id) AS c\r\n                                                                     " +
                "            FROM          cnc INNER JOIN\r\n                                      " +
                "                                                                  khana ON cnc.c" +
                "nc_id = khana.cnc_id INNER JOIN\r\n                                               " +
                "                                                         floor ON khana.floor_no" +
                " = floor.floor_no INNER JOIN\r\n                                                  " +
                "                                                      [union] ON cnc.union_id = " +
                "[union].union_id INNER JOIN\r\n                                                   " +
                "                                                     member ON khana.khana_id = " +
                "member.khana_id\r\n                                                               " +
                "                  WHERE      (khana.floor_no = 2)\r\n                             " +
                "                                                    GROUP BY [union].union_name," +
                " khana.khana_id) DERIVEDTBL\r\n                                                   " +
                "      GROUP BY a) x ON [union].union_name = x.union_name) a2 ON a1.a = a2.a LEFT" +
                " OUTER JOIN\r\n                          (SELECT     [union].union_name AS a, ISNU" +
                "LL(x.b, 0) AS b\r\n                            FROM          [union] LEFT OUTER JO" +
                "IN\r\n                                                       (SELECT     a AS unio" +
                "n_name, COUNT(c) AS b\r\n                                                         " +
                "FROM          (SELECT     [union].union_name AS a, khana.khana_id AS b, COUNT(me" +
                "mber.member_id) AS c\r\n                                                          " +
                "                       FROM          cnc INNER JOIN\r\n                           " +
                "                                                                             kha" +
                "na ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                                    " +
                "                                                                    floor ON kha" +
                "na.floor_no = floor.floor_no INNER JOIN\r\n                                       " +
                "                                                                 [union] ON cnc." +
                "union_id = [union].union_id INNER JOIN\r\n                                        " +
                "                                                                member ON khana." +
                "khana_id = member.khana_id\r\n                                                    " +
                "                             WHERE      (khana.floor_no = 3)\r\n                  " +
                "                                                               GROUP BY [union]." +
                "union_name, khana.khana_id) DERIVEDTBL\r\n                                        " +
                "                 GROUP BY a) x ON [union].union_name = x.union_name) a3 ON a2.a " +
                "= a3.a LEFT OUTER JOIN\r\n                          (SELECT     [union].union_name" +
                " AS a, ISNULL(x.b, 0) AS b\r\n                            FROM          [union] LE" +
                "FT OUTER JOIN\r\n                                                       (SELECT   " +
                "  a AS union_name, COUNT(c) AS b\r\n                                              " +
                "           FROM          (SELECT     [union].union_name AS a, khana.khana_id AS " +
                "b, COUNT(member.member_id) AS c\r\n                                               " +
                "                                  FROM          cnc INNER JOIN\r\n                " +
                "                                                                                " +
                "        khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                         " +
                "                                                                               f" +
                "loor ON khana.floor_no = floor.floor_no INNER JOIN\r\n                            " +
                "                                                                            [uni" +
                "on] ON cnc.union_id = [union].union_id INNER JOIN\r\n                             " +
                "                                                                           membe" +
                "r ON khana.khana_id = member.khana_id\r\n                                         " +
                "                                        WHERE      (khana.floor_no = 4)\r\n       " +
                "                                                                          GROUP " +
                "BY [union].union_name, khana.khana_id) DERIVEDTBL\r\n                             " +
                "                            GROUP BY a) x ON [union].union_name = x.union_name) " +
                "a4 ON a3.a = a4.a LEFT OUTER JOIN\r\n                          (SELECT     [union]" +
                ".union_name AS a, ISNULL(x.b, 0) AS b\r\n                            FROM         " +
                " [union] LEFT OUTER JOIN\r\n                                                      " +
                " (SELECT     a AS union_name, COUNT(c) AS b\r\n                                   " +
                "                      FROM          (SELECT     [union].union_name AS a, khana.k" +
                "hana_id AS b, COUNT(member.member_id) AS c\r\n                                    " +
                "                                             FROM          cnc INNER JOIN\r\n     " +
                "                                                                                " +
                "                   khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n              " +
                "                                                                                " +
                "          floor ON khana.floor_no = floor.floor_no INNER JOIN\r\n                 " +
                "                                                                                " +
                "       [union] ON cnc.union_id = [union].union_id INNER JOIN\r\n                  " +
                "                                                                                " +
                "      member ON khana.khana_id = member.khana_id\r\n                              " +
                "                                                   WHERE      (khana.floor_no = " +
                "5)\r\n                                                                            " +
                "     GROUP BY [union].union_name, khana.khana_id) DERIVEDTBL\r\n                  " +
                "                                       GROUP BY a) x ON [union].union_name = x.u" +
                "nion_name) a5 ON a4.a = a5.a\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table11BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table11BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table11BDataTable dataTable = new DataSet2.Table11BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table10TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table10TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table10";
            tableMapping.ColumnMappings.Add("unionname", "unionname");
            tableMapping.ColumnMappings.Add("<5", "<5");
            tableMapping.ColumnMappings.Add("5-6", "5-6");
            tableMapping.ColumnMappings.Add("7-8", "7-8");
            tableMapping.ColumnMappings.Add("9-10", "9-10");
            tableMapping.ColumnMappings.Add("11+", "11+");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a1.unionname, a1.khana AS [<5], a2.khana AS [5-6], a3.khana AS [7-8], " +
                "a4.khana AS [9-10], a5.khana AS [11+], ISNULL(a1.khana, 0) + ISNULL(a2.khana, \r\n" +
                "                      0) + ISNULL(a3.khana, 0) + ISNULL(a4.khana, 0) + ISNULL(a5" +
                ".khana, 0) AS total\r\nFROM         (SELECT     [union].union_name AS unionname, I" +
                "SNULL(p.khana, 0) AS khana\r\n                       FROM          [union] LEFT OU" +
                "TER JOIN\r\n                                                  (SELECT     union_na" +
                "me, isnull(COUNT(b), 0) AS khana\r\n                                              " +
                "      FROM          (SELECT     [union].union_name, khana.khana_id AS b, COUNT(m" +
                "ember.member_id) AS c\r\n                                                         " +
                "                   FROM          khana INNER JOIN\r\n                             " +
                "                                                                      cnc ON kha" +
                "na.cnc_id = cnc.cnc_id INNER JOIN\r\n                                             " +
                "                                                      [union] ON cnc.union_id = " +
                "[union].union_id INNER JOIN\r\n                                                   " +
                "                                                member ON khana.khana_id = membe" +
                "r.khana_id\r\n                                                                    " +
                "        GROUP BY [union].union_name, khana.khana_id\r\n                           " +
                "                                                 HAVING      (COUNT(member.membe" +
                "r_id) < 5)) DERIVEDTBL\r\n                                                    GROU" +
                "P BY union_name) p ON p.union_name = [union].union_name) a1 LEFT OUTER JOIN\r\n   " +
                "                       (SELECT     [union].union_name AS unionname, ISNULL(p.kha" +
                "na, 0) AS khana\r\n                            FROM          [union] LEFT OUTER JO" +
                "IN\r\n                                                       (SELECT     union_nam" +
                "e, isnull(COUNT(b), 0) AS khana\r\n                                               " +
                "          FROM          (SELECT     [union].union_name, khana.khana_id AS b, COU" +
                "NT(member.member_id) AS c\r\n                                                     " +
                "                            FROM          khana INNER JOIN\r\n                    " +
                "                                                                                " +
                "    cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                               " +
                "                                                                         [union]" +
                " ON cnc.union_id = [union].union_id INNER JOIN\r\n                                " +
                "                                                                        member O" +
                "N khana.khana_id = member.khana_id\r\n                                            " +
                "                                     GROUP BY [union].union_name, khana.khana_id" +
                "\r\n                                                                              " +
                "   HAVING      (COUNT(member.member_id) BETWEEN 5 AND 6)) DERIVEDTBL\r\n          " +
                "                                               GROUP BY union_name) p ON p.union" +
                "_name = [union].union_name) a2 ON a1.unionname = a2.unionname LEFT OUTER JOIN\r\n " +
                "                         (SELECT     [union].union_name AS unionname, ISNULL(p.k" +
                "hana, 0) AS khana\r\n                            FROM          [union] LEFT OUTER " +
                "JOIN\r\n                                                       (SELECT     union_n" +
                "ame, isnull(COUNT(b), 0) AS khana\r\n                                             " +
                "            FROM          (SELECT     [union].union_name, khana.khana_id AS b, C" +
                "OUNT(member.member_id) AS c\r\n                                                   " +
                "                              FROM          khana INNER JOIN\r\n                  " +
                "                                                                                " +
                "      cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                             " +
                "                                                                           [unio" +
                "n] ON cnc.union_id = [union].union_id INNER JOIN\r\n                              " +
                "                                                                          member" +
                " ON khana.khana_id = member.khana_id\r\n                                          " +
                "                                       GROUP BY [union].union_name, khana.khana_" +
                "id\r\n                                                                            " +
                "     HAVING      (COUNT(member.member_id) BETWEEN 7 AND 8)) DERIVEDTBL\r\n        " +
                "                                                 GROUP BY union_name) p ON p.uni" +
                "on_name = [union].union_name) a3 ON a2.unionname = a3.unionname LEFT OUTER JOIN\r" +
                "\n                          (SELECT     [union].union_name AS unionname, ISNULL(p" +
                ".khana, 0) AS khana\r\n                            FROM          [union] LEFT OUTE" +
                "R JOIN\r\n                                                       (SELECT     union" +
                "_name, isnull(COUNT(b), 0) AS khana\r\n                                           " +
                "              FROM          (SELECT     [union].union_name, khana.khana_id AS b," +
                " COUNT(member.member_id) AS c\r\n                                                 " +
                "                                FROM          khana INNER JOIN\r\n                " +
                "                                                                                " +
                "        cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                           " +
                "                                                                             [un" +
                "ion] ON cnc.union_id = [union].union_id INNER JOIN\r\n                            " +
                "                                                                            memb" +
                "er ON khana.khana_id = member.khana_id\r\n                                        " +
                "                                         GROUP BY [union].union_name, khana.khan" +
                "a_id\r\n                                                                          " +
                "       HAVING      (COUNT(member.member_id) BETWEEN 9 AND 10)) DERIVEDTBL\r\n     " +
                "                                                    GROUP BY union_name) p ON p." +
                "union_name = [union].union_name) a4 ON a3.unionname = a4.unionname LEFT OUTER JO" +
                "IN\r\n                          (SELECT     [union].union_name AS unionname, ISNUL" +
                "L(p.khana, 0) AS khana\r\n                            FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                       (SELECT     un" +
                "ion_name, isnull(COUNT(b), 0) AS khana\r\n                                        " +
                "                 FROM          (SELECT     [union].union_name, khana.khana_id AS" +
                " b, COUNT(member.member_id) AS c\r\n                                              " +
                "                                   FROM          khana INNER JOIN\r\n             " +
                "                                                                                " +
                "           cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                        " +
                "                                                                                " +
                "[union] ON cnc.union_id = [union].union_id INNER JOIN\r\n                         " +
                "                                                                               m" +
                "ember ON khana.khana_id = member.khana_id\r\n                                     " +
                "                                            GROUP BY [union].union_name, khana.k" +
                "hana_id\r\n                                                                       " +
                "          HAVING      (COUNT(member.member_id) > 11)) DERIVEDTBL\r\n              " +
                "                                           GROUP BY union_name) p ON p.union_nam" +
                "e = [union].union_name) a5 ON a4.unionname = a5.unionname\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table10DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table10DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table10DataTable dataTable = new DataSet2.Table10DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table21TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table21TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table21";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<3", "<3");
            tableMapping.ColumnMappings.Add("3-4", "3-4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     x.a AS [union name], x.b AS [<3], y.b AS [3-4], z.b AS [4+], ISNULL(x." +
                "b, 0) + ISNULL(z.b, 0) + ISNULL(y.b, 0) AS total\r\nFROM         (SELECT     [unio" +
                "n].union_name AS a, ISNULL(a.b, 0) AS b\r\n                       FROM          [u" +
                "nion] LEFT OUTER JOIN\r\n                                                  (SELECT" +
                "     [union].union_name, COUNT(member.member_id) AS b\r\n                         " +
                "                           FROM          cnc INNER JOIN\r\n                       " +
                "                                                    [union] ON cnc.union_id = [u" +
                "nion].union_id INNER JOIN\r\n                                                     " +
                "                      khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n           " +
                "                                                                member ON khana." +
                "khana_id = member.khana_id\r\n                                                    " +
                "WHERE      (member.weight < 3 AND weight <= 2)\r\n                                " +
                "                    GROUP BY [union].union_name) a ON a.union_name = [union].uni" +
                "on_name) x LEFT OUTER JOIN\r\n                          (SELECT     [union].union_" +
                "name AS a, ISNULL(a.b, 0) AS b\r\n                            FROM          [union" +
                "] LEFT OUTER JOIN\r\n                                                       (SELEC" +
                "T     [union].union_name, COUNT(member.member_id) AS b\r\n                        " +
                "                                 FROM          cnc INNER JOIN\r\n                 " +
                "                                                               [union] ON cnc.un" +
                "ion_id = [union].union_id INNER JOIN\r\n                                          " +
                "                                      khana ON cnc.cnc_id = khana.cnc_id INNER J" +
                "OIN\r\n                                                                           " +
                "     member ON khana.khana_id = member.khana_id\r\n                               " +
                "                          WHERE      (member.weight BETWEEN 3 AND 4 AND weight <" +
                "= 2)\r\n                                                         GROUP BY [union]." +
                "union_name) a ON a.union_name = [union].union_name) y ON x.a = y.a LEFT OUTER JO" +
                "IN\r\n                          (SELECT     [union].union_name AS a, ISNULL(a.b, 0" +
                ") AS b\r\n                            FROM          [union] LEFT OUTER JOIN\r\n     " +
                "                                                  (SELECT     [union].union_name" +
                ", COUNT(member.member_id) AS b\r\n                                                " +
                "         FROM          cnc INNER JOIN\r\n                                         " +
                "                                       [union] ON cnc.union_id = [union].union_i" +
                "d INNER JOIN\r\n                                                                  " +
                "              khana ON cnc.cnc_id = khana.cnc_id INNER JOIN\r\n                   " +
                "                                                             member ON khana.kha" +
                "na_id = member.khana_id\r\n                                                       " +
                "  WHERE      (member.weight > 4 AND weight <= 2)\r\n                              " +
                "                           GROUP BY [union].union_name) a ON a.union_name = [uni" +
                "on].union_name) z ON y.a = z.a\r\n\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table21DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table21DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table21DataTable dataTable = new DataSet2.Table21DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table18TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table18TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table18";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("yes", "yes");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], ISNULL(a.y, 0) AS yes, ISNULL(b.y, 0) AS no, ISNU" +
                "LL(a.y, 0) + ISNULL(b.y, 0) AS total\r\nFROM         (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                       FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                  (SELECT     [union]" +
                ".union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n                            " +
                "                        FROM          khana INNER JOIN\r\n                        " +
                "                                                   cnc ON khana.cnc_id = cnc.cnc" +
                "_id INNER JOIN\r\n                                                                " +
                "           [union] ON cnc.union_id = [union].union_id\r\n                         " +
                "                           WHERE      (khana.bed = 1)\r\n                         " +
                "                           GROUP BY [union].union_name) a ON a.union_name = [uni" +
                "on].union_name) a LEFT OUTER JOIN\r\n                          (SELECT     [union]" +
                ".union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM         " +
                " [union] LEFT OUTER JOIN\r\n                                                      " +
                " (SELECT     [union].union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n        " +
                "                                                 FROM          khana INNER JOIN\r" +
                "\n                                                                               " +
                " cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                  " +
                "                                              [union] ON cnc.union_id = [union]." +
                "union_id\r\n                                                         WHERE      (k" +
                "hana.bed = 2)\r\n                                                         GROUP BY" +
                " [union].union_name) a ON a.union_name = [union].union_name) b ON a.x = b.x";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table18DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table18DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table18DataTable dataTable = new DataSet2.Table18DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table18ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table18ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table18A";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("yes", "yes");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], ISNULL(a.y, 0) AS yes, ISNULL(b.y, 0) AS no, ISNU" +
                "LL(a.y, 0) + ISNULL(b.y, 0) AS total\r\nFROM         (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                       FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                  (SELECT     [union]" +
                ".union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n                            " +
                "                        FROM          khana INNER JOIN\r\n                        " +
                "                                                   cnc ON khana.cnc_id = cnc.cnc" +
                "_id INNER JOIN\r\n                                                                " +
                "           [union] ON cnc.union_id = [union].union_id\r\n                         " +
                "                           WHERE      (khana.chair = 1)\r\n                       " +
                "                             GROUP BY [union].union_name) a ON a.union_name = [u" +
                "nion].union_name) a LEFT OUTER JOIN\r\n                          (SELECT     [unio" +
                "n].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM       " +
                "   [union] LEFT OUTER JOIN\r\n                                                    " +
                "   (SELECT     [union].union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n      " +
                "                                                   FROM          khana INNER JOI" +
                "N\r\n                                                                             " +
                "   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                " +
                "                                                [union] ON cnc.union_id = [union" +
                "].union_id\r\n                                                         WHERE      " +
                "(khana.chair = 2)\r\n                                                         GROU" +
                "P BY [union].union_name) a ON a.union_name = [union].union_name) b ON a.x = b.x\r" +
                "\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table18ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table18ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table18ADataTable dataTable = new DataSet2.Table18ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table18BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table18BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table18B";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("yes", "yes");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], ISNULL(a.y, 0) AS yes, ISNULL(b.y, 0) AS no, ISNU" +
                "LL(a.y, 0) + ISNULL(b.y, 0) AS total\r\nFROM         (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                       FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                  (SELECT     [union]" +
                ".union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n                            " +
                "                        FROM          khana INNER JOIN\r\n                        " +
                "                                                   cnc ON khana.cnc_id = cnc.cnc" +
                "_id INNER JOIN\r\n                                                                " +
                "           [union] ON cnc.union_id = [union].union_id\r\n                         " +
                "                           WHERE      (khana.radio = 1)\r\n                       " +
                "                             GROUP BY [union].union_name) a ON a.union_name = [u" +
                "nion].union_name) a LEFT OUTER JOIN\r\n                          (SELECT     [unio" +
                "n].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM       " +
                "   [union] LEFT OUTER JOIN\r\n                                                    " +
                "   (SELECT     [union].union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n      " +
                "                                                   FROM          khana INNER JOI" +
                "N\r\n                                                                             " +
                "   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                " +
                "                                                [union] ON cnc.union_id = [union" +
                "].union_id\r\n                                                         WHERE      " +
                "(khana.radio = 2)\r\n                                                         GROU" +
                "P BY [union].union_name) a ON a.union_name = [union].union_name) b ON a.x = b.x\r" +
                "\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table18BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table18BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table18BDataTable dataTable = new DataSet2.Table18BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table18DTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table18DTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table18D";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("yes", "yes");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], ISNULL(a.y, 0) AS yes, ISNULL(b.y, 0) AS no, ISNU" +
                "LL(a.y, 0) + ISNULL(b.y, 0) AS total\r\nFROM         (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                       FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                  (SELECT     [union]" +
                ".union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n                            " +
                "                        FROM          khana INNER JOIN\r\n                        " +
                "                                                   cnc ON khana.cnc_id = cnc.cnc" +
                "_id INNER JOIN\r\n                                                                " +
                "           [union] ON cnc.union_id = [union].union_id\r\n                         " +
                "                           WHERE      (khana.tubewell = 1)\r\n                    " +
                "                                GROUP BY [union].union_name) a ON a.union_name =" +
                " [union].union_name) a LEFT OUTER JOIN\r\n                          (SELECT     [u" +
                "nion].union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM    " +
                "      [union] LEFT OUTER JOIN\r\n                                                 " +
                "      (SELECT     [union].union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n   " +
                "                                                      FROM          khana INNER " +
                "JOIN\r\n                                                                          " +
                "      cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                             " +
                "                                                   [union] ON cnc.union_id = [un" +
                "ion].union_id\r\n                                                         WHERE   " +
                "   (khana.tubewell = 2)\r\n                                                       " +
                "  GROUP BY [union].union_name) a ON a.union_name = [union].union_name) b ON a.x " +
                "= b.x\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table18DDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table18DDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table18DDataTable dataTable = new DataSet2.Table18DDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table18CTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table18CTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table18C";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("yes", "yes");
            tableMapping.ColumnMappings.Add("no", "no");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], ISNULL(a.y, 0) AS yes, ISNULL(b.y, 0) AS no, ISNU" +
                "LL(a.y, 0) + ISNULL(b.y, 0) AS total\r\nFROM         (SELECT     [union].union_nam" +
                "e AS x, ISNULL(a.y, 0) AS y\r\n                       FROM          [union] LEFT O" +
                "UTER JOIN\r\n                                                  (SELECT     [union]" +
                ".union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n                            " +
                "                        FROM          khana INNER JOIN\r\n                        " +
                "                                                   cnc ON khana.cnc_id = cnc.cnc" +
                "_id INNER JOIN\r\n                                                                " +
                "           [union] ON cnc.union_id = [union].union_id\r\n                         " +
                "                           WHERE      (khana.tv = 1)\r\n                          " +
                "                          GROUP BY [union].union_name) a ON a.union_name = [unio" +
                "n].union_name) a LEFT OUTER JOIN\r\n                          (SELECT     [union]." +
                "union_name AS x, ISNULL(a.y, 0) AS y\r\n                            FROM          " +
                "[union] LEFT OUTER JOIN\r\n                                                       " +
                "(SELECT     [union].union_name, ISNULL(COUNT(khana.khana_id), 0) AS y\r\n         " +
                "                                                FROM          khana INNER JOIN\r\n" +
                "                                                                                " +
                "cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                   " +
                "                                             [union] ON cnc.union_id = [union].u" +
                "nion_id\r\n                                                         WHERE      (kh" +
                "ana.tv = 2)\r\n                                                         GROUP BY [" +
                "union].union_name) a ON a.union_name = [union].union_name) b ON a.x = b.x\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table18CDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table18CDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table18CDataTable dataTable = new DataSet2.Table18CDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DataSet2 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591