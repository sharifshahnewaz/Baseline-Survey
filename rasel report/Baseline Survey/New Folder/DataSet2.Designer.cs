//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ReportsApplication1 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet2 : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private Table1DataTable tableTable1;
        
        private Table_3DataTable tableTable_3;
        
        private Table6DataTable tableTable6;
        
        private Table7DataTable tableTable7;
        
        private Table8DataTable tableTable8;
        
        private Table9DataTable tableTable9;
        
        private Table10DataTable tableTable10;
        
        private Table12DataTable tableTable12;
        
        private Table13DataTable tableTable13;
        
        private Table13ADataTable tableTable13A;
        
        private Table13BDataTable tableTable13B;
        
        private Table14CowDataTable tableTable14Cow;
        
        private Table14GoatDataTable tableTable14Goat;
        
        private Table14HenDataTable tableTable14Hen;
        
        private Table15DataTable tableTable15;
        
        private Table16DataTable tableTable16;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table 3"] != null)) {
                    base.Tables.Add(new Table_3DataTable(ds.Tables["Table 3"]));
                }
                if ((ds.Tables["Table6"] != null)) {
                    base.Tables.Add(new Table6DataTable(ds.Tables["Table6"]));
                }
                if ((ds.Tables["Table7"] != null)) {
                    base.Tables.Add(new Table7DataTable(ds.Tables["Table7"]));
                }
                if ((ds.Tables["Table8"] != null)) {
                    base.Tables.Add(new Table8DataTable(ds.Tables["Table8"]));
                }
                if ((ds.Tables["Table9"] != null)) {
                    base.Tables.Add(new Table9DataTable(ds.Tables["Table9"]));
                }
                if ((ds.Tables["Table10"] != null)) {
                    base.Tables.Add(new Table10DataTable(ds.Tables["Table10"]));
                }
                if ((ds.Tables["Table12"] != null)) {
                    base.Tables.Add(new Table12DataTable(ds.Tables["Table12"]));
                }
                if ((ds.Tables["Table13"] != null)) {
                    base.Tables.Add(new Table13DataTable(ds.Tables["Table13"]));
                }
                if ((ds.Tables["Table13A"] != null)) {
                    base.Tables.Add(new Table13ADataTable(ds.Tables["Table13A"]));
                }
                if ((ds.Tables["Table13B"] != null)) {
                    base.Tables.Add(new Table13BDataTable(ds.Tables["Table13B"]));
                }
                if ((ds.Tables["Table14Cow"] != null)) {
                    base.Tables.Add(new Table14CowDataTable(ds.Tables["Table14Cow"]));
                }
                if ((ds.Tables["Table14Goat"] != null)) {
                    base.Tables.Add(new Table14GoatDataTable(ds.Tables["Table14Goat"]));
                }
                if ((ds.Tables["Table14Hen"] != null)) {
                    base.Tables.Add(new Table14HenDataTable(ds.Tables["Table14Hen"]));
                }
                if ((ds.Tables["Table15"] != null)) {
                    base.Tables.Add(new Table15DataTable(ds.Tables["Table15"]));
                }
                if ((ds.Tables["Table16"] != null)) {
                    base.Tables.Add(new Table16DataTable(ds.Tables["Table16"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table1DataTable Table1 {
            get {
                return this.tableTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table_3DataTable Table_3 {
            get {
                return this.tableTable_3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table6DataTable Table6 {
            get {
                return this.tableTable6;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table7DataTable Table7 {
            get {
                return this.tableTable7;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table8DataTable Table8 {
            get {
                return this.tableTable8;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table9DataTable Table9 {
            get {
                return this.tableTable9;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table10DataTable Table10 {
            get {
                return this.tableTable10;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table12DataTable Table12 {
            get {
                return this.tableTable12;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table13DataTable Table13 {
            get {
                return this.tableTable13;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table13ADataTable Table13A {
            get {
                return this.tableTable13A;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table13BDataTable Table13B {
            get {
                return this.tableTable13B;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table14CowDataTable Table14Cow {
            get {
                return this.tableTable14Cow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table14GoatDataTable Table14Goat {
            get {
                return this.tableTable14Goat;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table14HenDataTable Table14Hen {
            get {
                return this.tableTable14Hen;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table15DataTable Table15 {
            get {
                return this.tableTable15;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Table16DataTable Table16 {
            get {
                return this.tableTable16;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["Table1"] != null)) {
                    base.Tables.Add(new Table1DataTable(ds.Tables["Table1"]));
                }
                if ((ds.Tables["Table 3"] != null)) {
                    base.Tables.Add(new Table_3DataTable(ds.Tables["Table 3"]));
                }
                if ((ds.Tables["Table6"] != null)) {
                    base.Tables.Add(new Table6DataTable(ds.Tables["Table6"]));
                }
                if ((ds.Tables["Table7"] != null)) {
                    base.Tables.Add(new Table7DataTable(ds.Tables["Table7"]));
                }
                if ((ds.Tables["Table8"] != null)) {
                    base.Tables.Add(new Table8DataTable(ds.Tables["Table8"]));
                }
                if ((ds.Tables["Table9"] != null)) {
                    base.Tables.Add(new Table9DataTable(ds.Tables["Table9"]));
                }
                if ((ds.Tables["Table10"] != null)) {
                    base.Tables.Add(new Table10DataTable(ds.Tables["Table10"]));
                }
                if ((ds.Tables["Table12"] != null)) {
                    base.Tables.Add(new Table12DataTable(ds.Tables["Table12"]));
                }
                if ((ds.Tables["Table13"] != null)) {
                    base.Tables.Add(new Table13DataTable(ds.Tables["Table13"]));
                }
                if ((ds.Tables["Table13A"] != null)) {
                    base.Tables.Add(new Table13ADataTable(ds.Tables["Table13A"]));
                }
                if ((ds.Tables["Table13B"] != null)) {
                    base.Tables.Add(new Table13BDataTable(ds.Tables["Table13B"]));
                }
                if ((ds.Tables["Table14Cow"] != null)) {
                    base.Tables.Add(new Table14CowDataTable(ds.Tables["Table14Cow"]));
                }
                if ((ds.Tables["Table14Goat"] != null)) {
                    base.Tables.Add(new Table14GoatDataTable(ds.Tables["Table14Goat"]));
                }
                if ((ds.Tables["Table14Hen"] != null)) {
                    base.Tables.Add(new Table14HenDataTable(ds.Tables["Table14Hen"]));
                }
                if ((ds.Tables["Table15"] != null)) {
                    base.Tables.Add(new Table15DataTable(ds.Tables["Table15"]));
                }
                if ((ds.Tables["Table16"] != null)) {
                    base.Tables.Add(new Table16DataTable(ds.Tables["Table16"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableTable1 = ((Table1DataTable)(base.Tables["Table1"]));
            if ((initTable == true)) {
                if ((this.tableTable1 != null)) {
                    this.tableTable1.InitVars();
                }
            }
            this.tableTable_3 = ((Table_3DataTable)(base.Tables["Table 3"]));
            if ((initTable == true)) {
                if ((this.tableTable_3 != null)) {
                    this.tableTable_3.InitVars();
                }
            }
            this.tableTable6 = ((Table6DataTable)(base.Tables["Table6"]));
            if ((initTable == true)) {
                if ((this.tableTable6 != null)) {
                    this.tableTable6.InitVars();
                }
            }
            this.tableTable7 = ((Table7DataTable)(base.Tables["Table7"]));
            if ((initTable == true)) {
                if ((this.tableTable7 != null)) {
                    this.tableTable7.InitVars();
                }
            }
            this.tableTable8 = ((Table8DataTable)(base.Tables["Table8"]));
            if ((initTable == true)) {
                if ((this.tableTable8 != null)) {
                    this.tableTable8.InitVars();
                }
            }
            this.tableTable9 = ((Table9DataTable)(base.Tables["Table9"]));
            if ((initTable == true)) {
                if ((this.tableTable9 != null)) {
                    this.tableTable9.InitVars();
                }
            }
            this.tableTable10 = ((Table10DataTable)(base.Tables["Table10"]));
            if ((initTable == true)) {
                if ((this.tableTable10 != null)) {
                    this.tableTable10.InitVars();
                }
            }
            this.tableTable12 = ((Table12DataTable)(base.Tables["Table12"]));
            if ((initTable == true)) {
                if ((this.tableTable12 != null)) {
                    this.tableTable12.InitVars();
                }
            }
            this.tableTable13 = ((Table13DataTable)(base.Tables["Table13"]));
            if ((initTable == true)) {
                if ((this.tableTable13 != null)) {
                    this.tableTable13.InitVars();
                }
            }
            this.tableTable13A = ((Table13ADataTable)(base.Tables["Table13A"]));
            if ((initTable == true)) {
                if ((this.tableTable13A != null)) {
                    this.tableTable13A.InitVars();
                }
            }
            this.tableTable13B = ((Table13BDataTable)(base.Tables["Table13B"]));
            if ((initTable == true)) {
                if ((this.tableTable13B != null)) {
                    this.tableTable13B.InitVars();
                }
            }
            this.tableTable14Cow = ((Table14CowDataTable)(base.Tables["Table14Cow"]));
            if ((initTable == true)) {
                if ((this.tableTable14Cow != null)) {
                    this.tableTable14Cow.InitVars();
                }
            }
            this.tableTable14Goat = ((Table14GoatDataTable)(base.Tables["Table14Goat"]));
            if ((initTable == true)) {
                if ((this.tableTable14Goat != null)) {
                    this.tableTable14Goat.InitVars();
                }
            }
            this.tableTable14Hen = ((Table14HenDataTable)(base.Tables["Table14Hen"]));
            if ((initTable == true)) {
                if ((this.tableTable14Hen != null)) {
                    this.tableTable14Hen.InitVars();
                }
            }
            this.tableTable15 = ((Table15DataTable)(base.Tables["Table15"]));
            if ((initTable == true)) {
                if ((this.tableTable15 != null)) {
                    this.tableTable15.InitVars();
                }
            }
            this.tableTable16 = ((Table16DataTable)(base.Tables["Table16"]));
            if ((initTable == true)) {
                if ((this.tableTable16 != null)) {
                    this.tableTable16.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableTable1 = new Table1DataTable();
            base.Tables.Add(this.tableTable1);
            this.tableTable_3 = new Table_3DataTable();
            base.Tables.Add(this.tableTable_3);
            this.tableTable6 = new Table6DataTable();
            base.Tables.Add(this.tableTable6);
            this.tableTable7 = new Table7DataTable();
            base.Tables.Add(this.tableTable7);
            this.tableTable8 = new Table8DataTable();
            base.Tables.Add(this.tableTable8);
            this.tableTable9 = new Table9DataTable();
            base.Tables.Add(this.tableTable9);
            this.tableTable10 = new Table10DataTable();
            base.Tables.Add(this.tableTable10);
            this.tableTable12 = new Table12DataTable();
            base.Tables.Add(this.tableTable12);
            this.tableTable13 = new Table13DataTable();
            base.Tables.Add(this.tableTable13);
            this.tableTable13A = new Table13ADataTable();
            base.Tables.Add(this.tableTable13A);
            this.tableTable13B = new Table13BDataTable();
            base.Tables.Add(this.tableTable13B);
            this.tableTable14Cow = new Table14CowDataTable();
            base.Tables.Add(this.tableTable14Cow);
            this.tableTable14Goat = new Table14GoatDataTable();
            base.Tables.Add(this.tableTable14Goat);
            this.tableTable14Hen = new Table14HenDataTable();
            base.Tables.Add(this.tableTable14Hen);
            this.tableTable15 = new Table15DataTable();
            base.Tables.Add(this.tableTable15);
            this.tableTable16 = new Table16DataTable();
            base.Tables.Add(this.tableTable16);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable_3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable6() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable7() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable8() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable9() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable10() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable12() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable13() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable13A() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable13B() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable14Cow() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable14Goat() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable14Hen() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable15() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTable16() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet2 ds = new DataSet2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        public delegate void Table1RowChangeEventHandler(object sender, Table1RowChangeEvent e);
        
        public delegate void Table_3RowChangeEventHandler(object sender, Table_3RowChangeEvent e);
        
        public delegate void Table6RowChangeEventHandler(object sender, Table6RowChangeEvent e);
        
        public delegate void Table7RowChangeEventHandler(object sender, Table7RowChangeEvent e);
        
        public delegate void Table8RowChangeEventHandler(object sender, Table8RowChangeEvent e);
        
        public delegate void Table9RowChangeEventHandler(object sender, Table9RowChangeEvent e);
        
        public delegate void Table10RowChangeEventHandler(object sender, Table10RowChangeEvent e);
        
        public delegate void Table12RowChangeEventHandler(object sender, Table12RowChangeEvent e);
        
        public delegate void Table13RowChangeEventHandler(object sender, Table13RowChangeEvent e);
        
        public delegate void Table13ARowChangeEventHandler(object sender, Table13ARowChangeEvent e);
        
        public delegate void Table13BRowChangeEventHandler(object sender, Table13BRowChangeEvent e);
        
        public delegate void Table14CowRowChangeEventHandler(object sender, Table14CowRowChangeEvent e);
        
        public delegate void Table14GoatRowChangeEventHandler(object sender, Table14GoatRowChangeEvent e);
        
        public delegate void Table14HenRowChangeEventHandler(object sender, Table14HenRowChangeEvent e);
        
        public delegate void Table15RowChangeEventHandler(object sender, Table15RowChangeEvent e);
        
        public delegate void Table16RowChangeEventHandler(object sender, Table16RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.TypedTableBase<DataTable1Row> {
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            private global::System.Data.DataColumn columntotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row AddDataTable1Row(string status, int male, int female, int total) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        status,
                        male,
                        female,
                        total};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstatus = base.Columns["status"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
                this.columntotal = base.Columns["total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotal);
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.MaxLength = 15;
                this.columntotal.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table1DataTable : global::System.Data.TypedTableBase<Table1Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1DataTable() {
                this.TableName = "Table1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row this[int index] {
                get {
                    return ((Table1Row)(this.Rows[index]));
                }
            }
            
            public event Table1RowChangeEventHandler Table1RowChanging;
            
            public event Table1RowChangeEventHandler Table1RowChanged;
            
            public event Table1RowChangeEventHandler Table1RowDeleting;
            
            public event Table1RowChangeEventHandler Table1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable1Row(Table1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row AddTable1Row(string union_name, int male, int female) {
                Table1Row rowTable1Row = ((Table1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        male,
                        female};
                rowTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable1Row);
                return rowTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table1DataTable cln = ((Table1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union_name"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunion_name);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row NewTable1Row() {
                return ((Table1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table1RowChanged != null)) {
                    this.Table1RowChanged(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table1RowChanging != null)) {
                    this.Table1RowChanging(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table1RowDeleted != null)) {
                    this.Table1RowDeleted(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table1RowDeleting != null)) {
                    this.Table1RowDeleting(this, new Table1RowChangeEvent(((Table1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable1Row(Table1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table_3DataTable : global::System.Data.TypedTableBase<Table_3Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnself;
            
            private global::System.Data.DataColumn columnwife;
            
            private global::System.Data.DataColumn columnhusband;
            
            private global::System.Data.DataColumn columnson;
            
            private global::System.Data.DataColumn columndaughter;
            
            private global::System.Data.DataColumn columnfathermother;
            
            private global::System.Data.DataColumn columnothers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3DataTable() {
                this.TableName = "Table 3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table_3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table_3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selfColumn {
                get {
                    return this.columnself;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wifeColumn {
                get {
                    return this.columnwife;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn husbandColumn {
                get {
                    return this.columnhusband;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sonColumn {
                get {
                    return this.columnson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daughterColumn {
                get {
                    return this.columndaughter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fathermotherColumn {
                get {
                    return this.columnfathermother;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn othersColumn {
                get {
                    return this.columnothers;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row this[int index] {
                get {
                    return ((Table_3Row)(this.Rows[index]));
                }
            }
            
            public event Table_3RowChangeEventHandler Table_3RowChanging;
            
            public event Table_3RowChangeEventHandler Table_3RowChanged;
            
            public event Table_3RowChangeEventHandler Table_3RowDeleting;
            
            public event Table_3RowChangeEventHandler Table_3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable_3Row(Table_3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row AddTable_3Row(string union_name, int self, int wife, int husband, int son, int daughter, int fathermother, int others) {
                Table_3Row rowTable_3Row = ((Table_3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        self,
                        wife,
                        husband,
                        son,
                        daughter,
                        fathermother,
                        others};
                rowTable_3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable_3Row);
                return rowTable_3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table_3DataTable cln = ((Table_3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table_3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union_name"];
                this.columnself = base.Columns["self"];
                this.columnwife = base.Columns["wife"];
                this.columnhusband = base.Columns["husband"];
                this.columnson = base.Columns["son"];
                this.columndaughter = base.Columns["daughter"];
                this.columnfathermother = base.Columns["fathermother"];
                this.columnothers = base.Columns["others"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunion_name);
                this.columnself = new global::System.Data.DataColumn("self", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnself);
                this.columnwife = new global::System.Data.DataColumn("wife", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwife);
                this.columnhusband = new global::System.Data.DataColumn("husband", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhusband);
                this.columnson = new global::System.Data.DataColumn("son", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnson);
                this.columndaughter = new global::System.Data.DataColumn("daughter", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndaughter);
                this.columnfathermother = new global::System.Data.DataColumn("fathermother", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfathermother);
                this.columnothers = new global::System.Data.DataColumn("others", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnothers);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row NewTable_3Row() {
                return ((Table_3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table_3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table_3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table_3RowChanged != null)) {
                    this.Table_3RowChanged(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table_3RowChanging != null)) {
                    this.Table_3RowChanging(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table_3RowDeleted != null)) {
                    this.Table_3RowDeleted(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table_3RowDeleting != null)) {
                    this.Table_3RowDeleting(this, new Table_3RowChangeEvent(((Table_3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable_3Row(Table_3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table_3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table6DataTable : global::System.Data.TypedTableBase<Table6Row> {
            
            private global::System.Data.DataColumn columnlitercystatus;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6DataTable() {
                this.TableName = "Table6";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table6DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table6DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn litercystatusColumn {
                get {
                    return this.columnlitercystatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row this[int index] {
                get {
                    return ((Table6Row)(this.Rows[index]));
                }
            }
            
            public event Table6RowChangeEventHandler Table6RowChanging;
            
            public event Table6RowChangeEventHandler Table6RowChanged;
            
            public event Table6RowChangeEventHandler Table6RowDeleting;
            
            public event Table6RowChangeEventHandler Table6RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable6Row(Table6Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row AddTable6Row(string litercystatus, int male, int female) {
                Table6Row rowTable6Row = ((Table6Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        litercystatus,
                        male,
                        female};
                rowTable6Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable6Row);
                return rowTable6Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table6DataTable cln = ((Table6DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table6DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlitercystatus = base.Columns["litercystatus"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlitercystatus = new global::System.Data.DataColumn("litercystatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlitercystatus);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnlitercystatus.AllowDBNull = false;
                this.columnlitercystatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row NewTable6Row() {
                return ((Table6Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table6Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table6Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table6RowChanged != null)) {
                    this.Table6RowChanged(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table6RowChanging != null)) {
                    this.Table6RowChanging(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table6RowDeleted != null)) {
                    this.Table6RowDeleted(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table6RowDeleting != null)) {
                    this.Table6RowDeleting(this, new Table6RowChangeEvent(((Table6Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable6Row(Table6Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table6DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table7DataTable : global::System.Data.TypedTableBase<Table7Row> {
            
            private global::System.Data.DataColumn columnlitercystatus;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7DataTable() {
                this.TableName = "Table7";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table7DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table7DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn litercystatusColumn {
                get {
                    return this.columnlitercystatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row this[int index] {
                get {
                    return ((Table7Row)(this.Rows[index]));
                }
            }
            
            public event Table7RowChangeEventHandler Table7RowChanging;
            
            public event Table7RowChangeEventHandler Table7RowChanged;
            
            public event Table7RowChangeEventHandler Table7RowDeleting;
            
            public event Table7RowChangeEventHandler Table7RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable7Row(Table7Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row AddTable7Row(string litercystatus, int male, int female) {
                Table7Row rowTable7Row = ((Table7Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        litercystatus,
                        male,
                        female};
                rowTable7Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable7Row);
                return rowTable7Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table7DataTable cln = ((Table7DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table7DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlitercystatus = base.Columns["litercystatus"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlitercystatus = new global::System.Data.DataColumn("litercystatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlitercystatus);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnlitercystatus.AllowDBNull = false;
                this.columnlitercystatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row NewTable7Row() {
                return ((Table7Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table7Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table7Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table7RowChanged != null)) {
                    this.Table7RowChanged(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table7RowChanging != null)) {
                    this.Table7RowChanging(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table7RowDeleted != null)) {
                    this.Table7RowDeleted(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table7RowDeleting != null)) {
                    this.Table7RowDeleting(this, new Table7RowChangeEvent(((Table7Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable7Row(Table7Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table7DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table8DataTable : global::System.Data.TypedTableBase<Table8Row> {
            
            private global::System.Data.DataColumn columnoccupation;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8DataTable() {
                this.TableName = "Table8";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table8DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table8DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn occupationColumn {
                get {
                    return this.columnoccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row this[int index] {
                get {
                    return ((Table8Row)(this.Rows[index]));
                }
            }
            
            public event Table8RowChangeEventHandler Table8RowChanging;
            
            public event Table8RowChangeEventHandler Table8RowChanged;
            
            public event Table8RowChangeEventHandler Table8RowDeleting;
            
            public event Table8RowChangeEventHandler Table8RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable8Row(Table8Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row AddTable8Row(string occupation, int male, int female) {
                Table8Row rowTable8Row = ((Table8Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        occupation,
                        male,
                        female};
                rowTable8Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable8Row);
                return rowTable8Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table8DataTable cln = ((Table8DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table8DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoccupation = base.Columns["occupation"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoccupation = new global::System.Data.DataColumn("occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoccupation);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnoccupation.AllowDBNull = false;
                this.columnoccupation.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row NewTable8Row() {
                return ((Table8Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table8Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table8Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table8RowChanged != null)) {
                    this.Table8RowChanged(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table8RowChanging != null)) {
                    this.Table8RowChanging(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table8RowDeleted != null)) {
                    this.Table8RowDeleted(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table8RowDeleting != null)) {
                    this.Table8RowDeleting(this, new Table8RowChangeEvent(((Table8Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable8Row(Table8Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table8DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table9DataTable : global::System.Data.TypedTableBase<Table9Row> {
            
            private global::System.Data.DataColumn columnoccupation;
            
            private global::System.Data.DataColumn columnmale;
            
            private global::System.Data.DataColumn columnfemale;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9DataTable() {
                this.TableName = "Table9";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table9DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table9DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn occupationColumn {
                get {
                    return this.columnoccupation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn maleColumn {
                get {
                    return this.columnmale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn femaleColumn {
                get {
                    return this.columnfemale;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row this[int index] {
                get {
                    return ((Table9Row)(this.Rows[index]));
                }
            }
            
            public event Table9RowChangeEventHandler Table9RowChanging;
            
            public event Table9RowChangeEventHandler Table9RowChanged;
            
            public event Table9RowChangeEventHandler Table9RowDeleting;
            
            public event Table9RowChangeEventHandler Table9RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable9Row(Table9Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row AddTable9Row(string occupation, int male, int female) {
                Table9Row rowTable9Row = ((Table9Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        occupation,
                        male,
                        female};
                rowTable9Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable9Row);
                return rowTable9Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table9DataTable cln = ((Table9DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table9DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoccupation = base.Columns["occupation"];
                this.columnmale = base.Columns["male"];
                this.columnfemale = base.Columns["female"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoccupation = new global::System.Data.DataColumn("occupation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoccupation);
                this.columnmale = new global::System.Data.DataColumn("male", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmale);
                this.columnfemale = new global::System.Data.DataColumn("female", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfemale);
                this.columnoccupation.AllowDBNull = false;
                this.columnoccupation.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row NewTable9Row() {
                return ((Table9Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table9Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table9Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table9RowChanged != null)) {
                    this.Table9RowChanged(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table9RowChanging != null)) {
                    this.Table9RowChanging(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table9RowDeleted != null)) {
                    this.Table9RowDeleted(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table9RowDeleting != null)) {
                    this.Table9RowDeleting(this, new Table9RowChangeEvent(((Table9Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable9Row(Table9Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table9DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table10DataTable : global::System.Data.TypedTableBase<Table10Row> {
            
            private global::System.Data.DataColumn columnunionname;
            
            private global::System.Data.DataColumn _column_5;
            
            private global::System.Data.DataColumn _column5_6;
            
            private global::System.Data.DataColumn _column7_8;
            
            private global::System.Data.DataColumn _column9_10;
            
            private global::System.Data.DataColumn _column11_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10DataTable() {
                this.TableName = "Table10";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table10DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table10DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unionnameColumn {
                get {
                    return this.columnunionname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5Column {
                get {
                    return this._column_5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5_6Column {
                get {
                    return this._column5_6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _7_8Column {
                get {
                    return this._column7_8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _9_10Column {
                get {
                    return this._column9_10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _11_Column {
                get {
                    return this._column11_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row this[int index] {
                get {
                    return ((Table10Row)(this.Rows[index]));
                }
            }
            
            public event Table10RowChangeEventHandler Table10RowChanging;
            
            public event Table10RowChangeEventHandler Table10RowChanged;
            
            public event Table10RowChangeEventHandler Table10RowDeleting;
            
            public event Table10RowChangeEventHandler Table10RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable10Row(Table10Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row AddTable10Row(string unionname, int @__5, int _5_6, int _7_8, int _9_10, int _11_) {
                Table10Row rowTable10Row = ((Table10Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        unionname,
                        @__5,
                        _5_6,
                        _7_8,
                        _9_10,
                        _11_};
                rowTable10Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable10Row);
                return rowTable10Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table10DataTable cln = ((Table10DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table10DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunionname = base.Columns["unionname"];
                this._column_5 = base.Columns["<5"];
                this._column5_6 = base.Columns["5-6"];
                this._column7_8 = base.Columns["7-8"];
                this._column9_10 = base.Columns["9-10"];
                this._column11_ = base.Columns["11-"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunionname = new global::System.Data.DataColumn("unionname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunionname);
                this._column_5 = new global::System.Data.DataColumn("<5", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5");
                this._column_5.ExtendedProperties.Add("Generator_UserColumnName", "<5");
                base.Columns.Add(this._column_5);
                this._column5_6 = new global::System.Data.DataColumn("5-6", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5_6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5_6");
                this._column5_6.ExtendedProperties.Add("Generator_UserColumnName", "5-6");
                base.Columns.Add(this._column5_6);
                this._column7_8 = new global::System.Data.DataColumn("7-8", typeof(int), null, global::System.Data.MappingType.Element);
                this._column7_8.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column7_8");
                this._column7_8.ExtendedProperties.Add("Generator_UserColumnName", "7-8");
                base.Columns.Add(this._column7_8);
                this._column9_10 = new global::System.Data.DataColumn("9-10", typeof(int), null, global::System.Data.MappingType.Element);
                this._column9_10.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column9_10");
                this._column9_10.ExtendedProperties.Add("Generator_UserColumnName", "9-10");
                base.Columns.Add(this._column9_10);
                this._column11_ = new global::System.Data.DataColumn("11-", typeof(int), null, global::System.Data.MappingType.Element);
                this._column11_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column11_");
                this._column11_.ExtendedProperties.Add("Generator_UserColumnName", "11-");
                base.Columns.Add(this._column11_);
                this.columnunionname.AllowDBNull = false;
                this.columnunionname.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row NewTable10Row() {
                return ((Table10Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table10Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table10Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table10RowChanged != null)) {
                    this.Table10RowChanged(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table10RowChanging != null)) {
                    this.Table10RowChanging(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table10RowDeleted != null)) {
                    this.Table10RowDeleted(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table10RowDeleting != null)) {
                    this.Table10RowDeleting(this, new Table10RowChangeEvent(((Table10Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable10Row(Table10Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table10DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table12DataTable : global::System.Data.TypedTableBase<Table12Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_5000;
            
            private global::System.Data.DataColumn _column5000_9999;
            
            private global::System.Data.DataColumn _column10000_14999;
            
            private global::System.Data.DataColumn _column15000_19999;
            
            private global::System.Data.DataColumn _column20000_24999;
            
            private global::System.Data.DataColumn _column25000_49999;
            
            private global::System.Data.DataColumn _column50000_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12DataTable() {
                this.TableName = "Table12";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table12DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table12DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5000Column {
                get {
                    return this._column_5000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5000_9999Column {
                get {
                    return this._column5000_9999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _10000_14999Column {
                get {
                    return this._column10000_14999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _15000_19999Column {
                get {
                    return this._column15000_19999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _20000_24999Column {
                get {
                    return this._column20000_24999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _25000_49999Column {
                get {
                    return this._column25000_49999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _50000_Column {
                get {
                    return this._column50000_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row this[int index] {
                get {
                    return ((Table12Row)(this.Rows[index]));
                }
            }
            
            public event Table12RowChangeEventHandler Table12RowChanging;
            
            public event Table12RowChangeEventHandler Table12RowChanged;
            
            public event Table12RowChangeEventHandler Table12RowDeleting;
            
            public event Table12RowChangeEventHandler Table12RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable12Row(Table12Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row AddTable12Row(string union_name, int @__5000, int _5000_9999, int _10000_14999, int _15000_19999, int _20000_24999, int _25000_49999, int _50000_) {
                Table12Row rowTable12Row = ((Table12Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__5000,
                        _5000_9999,
                        _10000_14999,
                        _15000_19999,
                        _20000_24999,
                        _25000_49999,
                        _50000_};
                rowTable12Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable12Row);
                return rowTable12Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table12DataTable cln = ((Table12DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table12DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_5000 = base.Columns["<5000"];
                this._column5000_9999 = base.Columns["5000-9999"];
                this._column10000_14999 = base.Columns["10000-14999"];
                this._column15000_19999 = base.Columns["15000-19999"];
                this._column20000_24999 = base.Columns["20000-24999"];
                this._column25000_49999 = base.Columns["25000-49999"];
                this._column50000_ = base.Columns["50000+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_5000 = new global::System.Data.DataColumn("<5000", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5000");
                this._column_5000.ExtendedProperties.Add("Generator_UserColumnName", "<5000");
                base.Columns.Add(this._column_5000);
                this._column5000_9999 = new global::System.Data.DataColumn("5000-9999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5000_9999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5000_9999");
                this._column5000_9999.ExtendedProperties.Add("Generator_UserColumnName", "5000-9999");
                base.Columns.Add(this._column5000_9999);
                this._column10000_14999 = new global::System.Data.DataColumn("10000-14999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column10000_14999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column10000_14999");
                this._column10000_14999.ExtendedProperties.Add("Generator_UserColumnName", "10000-14999");
                base.Columns.Add(this._column10000_14999);
                this._column15000_19999 = new global::System.Data.DataColumn("15000-19999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column15000_19999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column15000_19999");
                this._column15000_19999.ExtendedProperties.Add("Generator_UserColumnName", "15000-19999");
                base.Columns.Add(this._column15000_19999);
                this._column20000_24999 = new global::System.Data.DataColumn("20000-24999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column20000_24999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column20000_24999");
                this._column20000_24999.ExtendedProperties.Add("Generator_UserColumnName", "20000-24999");
                base.Columns.Add(this._column20000_24999);
                this._column25000_49999 = new global::System.Data.DataColumn("25000-49999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column25000_49999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column25000_49999");
                this._column25000_49999.ExtendedProperties.Add("Generator_UserColumnName", "25000-49999");
                base.Columns.Add(this._column25000_49999);
                this._column50000_ = new global::System.Data.DataColumn("50000+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column50000_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column50000_");
                this._column50000_.ExtendedProperties.Add("Generator_UserColumnName", "50000+");
                base.Columns.Add(this._column50000_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row NewTable12Row() {
                return ((Table12Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table12Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table12Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table12RowChanged != null)) {
                    this.Table12RowChanged(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table12RowChanging != null)) {
                    this.Table12RowChanging(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table12RowDeleted != null)) {
                    this.Table12RowDeleted(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table12RowDeleting != null)) {
                    this.Table12RowDeleting(this, new Table12RowChangeEvent(((Table12Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable12Row(Table12Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table12DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table13DataTable : global::System.Data.TypedTableBase<Table13Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn columnno_land;
            
            private global::System.Data.DataColumn _column__05_y_AS__0_05___0_24;
            
            private global::System.Data.DataColumn _column0_25___0_49;
            
            private global::System.Data.DataColumn _column0_50___0_99;
            
            private global::System.Data.DataColumn _column1_0___1_49;
            
            private global::System.Data.DataColumn _column1_5_1_99;
            
            private global::System.Data.DataColumn _column2_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13DataTable() {
                this.TableName = "Table13";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table13DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn no_landColumn {
                get {
                    return this.columnno_land;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ___05_y_AS__0_05___0_24Column {
                get {
                    return this._column__05_y_AS__0_05___0_24;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_25___0_49Column {
                get {
                    return this._column0_25___0_49;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_50___0_99Column {
                get {
                    return this._column0_50___0_99;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_0___1_49Column {
                get {
                    return this._column1_0___1_49;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _1_5_1_99Column {
                get {
                    return this._column1_5_1_99;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _2_Column {
                get {
                    return this._column2_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row this[int index] {
                get {
                    return ((Table13Row)(this.Rows[index]));
                }
            }
            
            public event Table13RowChangeEventHandler Table13RowChanging;
            
            public event Table13RowChangeEventHandler Table13RowChanged;
            
            public event Table13RowChangeEventHandler Table13RowDeleting;
            
            public event Table13RowChangeEventHandler Table13RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable13Row(Table13Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row AddTable13Row(string union_name, int no_land, int ___05_y_AS__0_05___0_24, int _0_25___0_49, int _0_50___0_99, int _1_0___1_49, int _1_5_1_99, int _2_) {
                Table13Row rowTable13Row = ((Table13Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        no_land,
                        ___05_y_AS__0_05___0_24,
                        _0_25___0_49,
                        _0_50___0_99,
                        _1_0___1_49,
                        _1_5_1_99,
                        _2_};
                rowTable13Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable13Row);
                return rowTable13Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table13DataTable cln = ((Table13DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table13DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this.columnno_land = base.Columns["no land"];
                this._column__05_y_AS__0_05___0_24 = base.Columns["<_05_y AS [0_05 - 0_24"];
                this._column0_25___0_49 = base.Columns["0_25 - 0_49"];
                this._column0_50___0_99 = base.Columns["0_50 - 0_99"];
                this._column1_0___1_49 = base.Columns["1_0 - 1_49"];
                this._column1_5_1_99 = base.Columns["1_5-1_99"];
                this._column2_ = base.Columns["2+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this.columnno_land = new global::System.Data.DataColumn("no land", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnno_land);
                this._column__05_y_AS__0_05___0_24 = new global::System.Data.DataColumn("<_05_y AS [0_05 - 0_24", typeof(int), null, global::System.Data.MappingType.Element);
                this._column__05_y_AS__0_05___0_24.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column__05_y_AS__0_05___0_24");
                this._column__05_y_AS__0_05___0_24.ExtendedProperties.Add("Generator_UserColumnName", "<_05_y AS [0_05 - 0_24");
                base.Columns.Add(this._column__05_y_AS__0_05___0_24);
                this._column0_25___0_49 = new global::System.Data.DataColumn("0_25 - 0_49", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_25___0_49.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_25___0_49");
                this._column0_25___0_49.ExtendedProperties.Add("Generator_UserColumnName", "0_25 - 0_49");
                base.Columns.Add(this._column0_25___0_49);
                this._column0_50___0_99 = new global::System.Data.DataColumn("0_50 - 0_99", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_50___0_99.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_50___0_99");
                this._column0_50___0_99.ExtendedProperties.Add("Generator_UserColumnName", "0_50 - 0_99");
                base.Columns.Add(this._column0_50___0_99);
                this._column1_0___1_49 = new global::System.Data.DataColumn("1_0 - 1_49", typeof(int), null, global::System.Data.MappingType.Element);
                this._column1_0___1_49.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_0___1_49");
                this._column1_0___1_49.ExtendedProperties.Add("Generator_UserColumnName", "1_0 - 1_49");
                base.Columns.Add(this._column1_0___1_49);
                this._column1_5_1_99 = new global::System.Data.DataColumn("1_5-1_99", typeof(int), null, global::System.Data.MappingType.Element);
                this._column1_5_1_99.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column1_5_1_99");
                this._column1_5_1_99.ExtendedProperties.Add("Generator_UserColumnName", "1_5-1_99");
                base.Columns.Add(this._column1_5_1_99);
                this._column2_ = new global::System.Data.DataColumn("2+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column2_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column2_");
                this._column2_.ExtendedProperties.Add("Generator_UserColumnName", "2+");
                base.Columns.Add(this._column2_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
                this._column__05_y_AS__0_05___0_24.Caption = "<.05.y AS [0.05 - 0.24";
                this._column0_25___0_49.Caption = "0.25 - 0.49";
                this._column0_50___0_99.Caption = "0.50 - 0.99";
                this._column1_0___1_49.Caption = "1.0 - 1.49";
                this._column1_5_1_99.Caption = "1.5-1.99";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row NewTable13Row() {
                return ((Table13Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table13Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table13Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table13RowChanged != null)) {
                    this.Table13RowChanged(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table13RowChanging != null)) {
                    this.Table13RowChanging(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table13RowDeleted != null)) {
                    this.Table13RowDeleted(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table13RowDeleting != null)) {
                    this.Table13RowDeleting(this, new Table13RowChangeEvent(((Table13Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable13Row(Table13Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table13DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table13ADataTable : global::System.Data.TypedTableBase<Table13ARow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_5000;
            
            private global::System.Data.DataColumn _column5000_9999;
            
            private global::System.Data.DataColumn _column10000_14999;
            
            private global::System.Data.DataColumn _column15000_19999;
            
            private global::System.Data.DataColumn _column20000_24999;
            
            private global::System.Data.DataColumn _column25000_49999;
            
            private global::System.Data.DataColumn _column50000_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ADataTable() {
                this.TableName = "Table13A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13ADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table13ADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5000Column {
                get {
                    return this._column_5000;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _5000_9999Column {
                get {
                    return this._column5000_9999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _10000_14999Column {
                get {
                    return this._column10000_14999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _15000_19999Column {
                get {
                    return this._column15000_19999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _20000_24999Column {
                get {
                    return this._column20000_24999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _25000_49999Column {
                get {
                    return this._column25000_49999;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _50000_Column {
                get {
                    return this._column50000_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow this[int index] {
                get {
                    return ((Table13ARow)(this.Rows[index]));
                }
            }
            
            public event Table13ARowChangeEventHandler Table13ARowChanging;
            
            public event Table13ARowChangeEventHandler Table13ARowChanged;
            
            public event Table13ARowChangeEventHandler Table13ARowDeleting;
            
            public event Table13ARowChangeEventHandler Table13ARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable13ARow(Table13ARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow AddTable13ARow(string union_name, int @__5000, int _5000_9999, int _10000_14999, int _15000_19999, int _20000_24999, int _25000_49999, int _50000_) {
                Table13ARow rowTable13ARow = ((Table13ARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__5000,
                        _5000_9999,
                        _10000_14999,
                        _15000_19999,
                        _20000_24999,
                        _25000_49999,
                        _50000_};
                rowTable13ARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable13ARow);
                return rowTable13ARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table13ADataTable cln = ((Table13ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table13ADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_5000 = base.Columns["<5000"];
                this._column5000_9999 = base.Columns["5000-9999"];
                this._column10000_14999 = base.Columns["10000-14999"];
                this._column15000_19999 = base.Columns["15000-19999"];
                this._column20000_24999 = base.Columns["20000-24999"];
                this._column25000_49999 = base.Columns["25000-49999"];
                this._column50000_ = base.Columns["50000+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_5000 = new global::System.Data.DataColumn("<5000", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5000.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5000");
                this._column_5000.ExtendedProperties.Add("Generator_UserColumnName", "<5000");
                base.Columns.Add(this._column_5000);
                this._column5000_9999 = new global::System.Data.DataColumn("5000-9999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column5000_9999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column5000_9999");
                this._column5000_9999.ExtendedProperties.Add("Generator_UserColumnName", "5000-9999");
                base.Columns.Add(this._column5000_9999);
                this._column10000_14999 = new global::System.Data.DataColumn("10000-14999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column10000_14999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column10000_14999");
                this._column10000_14999.ExtendedProperties.Add("Generator_UserColumnName", "10000-14999");
                base.Columns.Add(this._column10000_14999);
                this._column15000_19999 = new global::System.Data.DataColumn("15000-19999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column15000_19999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column15000_19999");
                this._column15000_19999.ExtendedProperties.Add("Generator_UserColumnName", "15000-19999");
                base.Columns.Add(this._column15000_19999);
                this._column20000_24999 = new global::System.Data.DataColumn("20000-24999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column20000_24999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column20000_24999");
                this._column20000_24999.ExtendedProperties.Add("Generator_UserColumnName", "20000-24999");
                base.Columns.Add(this._column20000_24999);
                this._column25000_49999 = new global::System.Data.DataColumn("25000-49999", typeof(int), null, global::System.Data.MappingType.Element);
                this._column25000_49999.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column25000_49999");
                this._column25000_49999.ExtendedProperties.Add("Generator_UserColumnName", "25000-49999");
                base.Columns.Add(this._column25000_49999);
                this._column50000_ = new global::System.Data.DataColumn("50000+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column50000_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column50000_");
                this._column50000_.ExtendedProperties.Add("Generator_UserColumnName", "50000+");
                base.Columns.Add(this._column50000_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow NewTable13ARow() {
                return ((Table13ARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table13ARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table13ARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table13ARowChanged != null)) {
                    this.Table13ARowChanged(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table13ARowChanging != null)) {
                    this.Table13ARowChanging(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table13ARowDeleted != null)) {
                    this.Table13ARowDeleted(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table13ARowDeleting != null)) {
                    this.Table13ARowDeleting(this, new Table13ARowChangeEvent(((Table13ARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable13ARow(Table13ARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table13ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table13BDataTable : global::System.Data.TypedTableBase<Table13BRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column_5;
            
            private global::System.Data.DataColumn _column6___10;
            
            private global::System.Data.DataColumn _column11___15;
            
            private global::System.Data.DataColumn _column16_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BDataTable() {
                this.TableName = "Table13B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13BDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table13BDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn @__5Column {
                get {
                    return this._column_5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _6___10Column {
                get {
                    return this._column6___10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _11___15Column {
                get {
                    return this._column11___15;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _16_Column {
                get {
                    return this._column16_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow this[int index] {
                get {
                    return ((Table13BRow)(this.Rows[index]));
                }
            }
            
            public event Table13BRowChangeEventHandler Table13BRowChanging;
            
            public event Table13BRowChangeEventHandler Table13BRowChanged;
            
            public event Table13BRowChangeEventHandler Table13BRowDeleting;
            
            public event Table13BRowChangeEventHandler Table13BRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable13BRow(Table13BRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow AddTable13BRow(string union_name, int @__5, int _6___10, int _11___15, int _16_) {
                Table13BRow rowTable13BRow = ((Table13BRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        @__5,
                        _6___10,
                        _11___15,
                        _16_};
                rowTable13BRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable13BRow);
                return rowTable13BRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table13BDataTable cln = ((Table13BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table13BDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column_5 = base.Columns["<5"];
                this._column6___10 = base.Columns["6 - 10"];
                this._column11___15 = base.Columns["11 - 15"];
                this._column16_ = base.Columns["16+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column_5 = new global::System.Data.DataColumn("<5", typeof(int), null, global::System.Data.MappingType.Element);
                this._column_5.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_5");
                this._column_5.ExtendedProperties.Add("Generator_UserColumnName", "<5");
                base.Columns.Add(this._column_5);
                this._column6___10 = new global::System.Data.DataColumn("6 - 10", typeof(int), null, global::System.Data.MappingType.Element);
                this._column6___10.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column6___10");
                this._column6___10.ExtendedProperties.Add("Generator_UserColumnName", "6 - 10");
                base.Columns.Add(this._column6___10);
                this._column11___15 = new global::System.Data.DataColumn("11 - 15", typeof(int), null, global::System.Data.MappingType.Element);
                this._column11___15.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column11___15");
                this._column11___15.ExtendedProperties.Add("Generator_UserColumnName", "11 - 15");
                base.Columns.Add(this._column11___15);
                this._column16_ = new global::System.Data.DataColumn("16+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column16_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column16_");
                this._column16_.ExtendedProperties.Add("Generator_UserColumnName", "16+");
                base.Columns.Add(this._column16_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow NewTable13BRow() {
                return ((Table13BRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table13BRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table13BRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table13BRowChanged != null)) {
                    this.Table13BRowChanged(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table13BRowChanging != null)) {
                    this.Table13BRowChanging(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table13BRowDeleted != null)) {
                    this.Table13BRowDeleted(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table13BRowDeleting != null)) {
                    this.Table13BRowDeleting(this, new Table13BRowChangeEvent(((Table13BRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable13BRow(Table13BRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table13BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table14CowDataTable : global::System.Data.TypedTableBase<Table14CowRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0_2;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowDataTable() {
                this.TableName = "Table14Cow";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14CowDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table14CowDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_2Column {
                get {
                    return this._column0_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow this[int index] {
                get {
                    return ((Table14CowRow)(this.Rows[index]));
                }
            }
            
            public event Table14CowRowChangeEventHandler Table14CowRowChanging;
            
            public event Table14CowRowChangeEventHandler Table14CowRowChanged;
            
            public event Table14CowRowChangeEventHandler Table14CowRowDeleting;
            
            public event Table14CowRowChangeEventHandler Table14CowRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable14CowRow(Table14CowRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow AddTable14CowRow(string union_name, int _0_2, int _3___4, int _4_) {
                Table14CowRow rowTable14CowRow = ((Table14CowRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0_2,
                        _3___4,
                        _4_};
                rowTable14CowRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable14CowRow);
                return rowTable14CowRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table14CowDataTable cln = ((Table14CowDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table14CowDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0_2 = base.Columns["0-2"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0_2 = new global::System.Data.DataColumn("0-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_2");
                this._column0_2.ExtendedProperties.Add("Generator_UserColumnName", "0-2");
                base.Columns.Add(this._column0_2);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow NewTable14CowRow() {
                return ((Table14CowRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table14CowRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table14CowRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table14CowRowChanged != null)) {
                    this.Table14CowRowChanged(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table14CowRowChanging != null)) {
                    this.Table14CowRowChanging(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table14CowRowDeleted != null)) {
                    this.Table14CowRowDeleted(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table14CowRowDeleting != null)) {
                    this.Table14CowRowDeleting(this, new Table14CowRowChangeEvent(((Table14CowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable14CowRow(Table14CowRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table14CowDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table14GoatDataTable : global::System.Data.TypedTableBase<Table14GoatRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0_2;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatDataTable() {
                this.TableName = "Table14Goat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14GoatDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table14GoatDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_2Column {
                get {
                    return this._column0_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow this[int index] {
                get {
                    return ((Table14GoatRow)(this.Rows[index]));
                }
            }
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowChanging;
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowChanged;
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowDeleting;
            
            public event Table14GoatRowChangeEventHandler Table14GoatRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable14GoatRow(Table14GoatRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow AddTable14GoatRow(string union_name, int _0_2, int _3___4, int _4_) {
                Table14GoatRow rowTable14GoatRow = ((Table14GoatRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0_2,
                        _3___4,
                        _4_};
                rowTable14GoatRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable14GoatRow);
                return rowTable14GoatRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table14GoatDataTable cln = ((Table14GoatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table14GoatDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0_2 = base.Columns["0-2"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0_2 = new global::System.Data.DataColumn("0-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_2");
                this._column0_2.ExtendedProperties.Add("Generator_UserColumnName", "0-2");
                base.Columns.Add(this._column0_2);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow NewTable14GoatRow() {
                return ((Table14GoatRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table14GoatRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table14GoatRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table14GoatRowChanged != null)) {
                    this.Table14GoatRowChanged(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table14GoatRowChanging != null)) {
                    this.Table14GoatRowChanging(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table14GoatRowDeleted != null)) {
                    this.Table14GoatRowDeleted(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table14GoatRowDeleting != null)) {
                    this.Table14GoatRowDeleting(this, new Table14GoatRowChangeEvent(((Table14GoatRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable14GoatRow(Table14GoatRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table14GoatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table14HenDataTable : global::System.Data.TypedTableBase<Table14HenRow> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0_2;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenDataTable() {
                this.TableName = "Table14Hen";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14HenDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table14HenDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_2Column {
                get {
                    return this._column0_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow this[int index] {
                get {
                    return ((Table14HenRow)(this.Rows[index]));
                }
            }
            
            public event Table14HenRowChangeEventHandler Table14HenRowChanging;
            
            public event Table14HenRowChangeEventHandler Table14HenRowChanged;
            
            public event Table14HenRowChangeEventHandler Table14HenRowDeleting;
            
            public event Table14HenRowChangeEventHandler Table14HenRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable14HenRow(Table14HenRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow AddTable14HenRow(string union_name, int _0_2, int _3___4, int _4_) {
                Table14HenRow rowTable14HenRow = ((Table14HenRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0_2,
                        _3___4,
                        _4_};
                rowTable14HenRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable14HenRow);
                return rowTable14HenRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table14HenDataTable cln = ((Table14HenDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table14HenDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0_2 = base.Columns["0-2"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0_2 = new global::System.Data.DataColumn("0-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_2");
                this._column0_2.ExtendedProperties.Add("Generator_UserColumnName", "0-2");
                base.Columns.Add(this._column0_2);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow NewTable14HenRow() {
                return ((Table14HenRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table14HenRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table14HenRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table14HenRowChanged != null)) {
                    this.Table14HenRowChanged(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table14HenRowChanging != null)) {
                    this.Table14HenRowChanging(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table14HenRowDeleted != null)) {
                    this.Table14HenRowDeleted(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table14HenRowDeleting != null)) {
                    this.Table14HenRowDeleting(this, new Table14HenRowChangeEvent(((Table14HenRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable14HenRow(Table14HenRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table14HenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table15DataTable : global::System.Data.TypedTableBase<Table15Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0_2;
            
            private global::System.Data.DataColumn _column3___4;
            
            private global::System.Data.DataColumn _column4_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15DataTable() {
                this.TableName = "Table15";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table15DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table15DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0_2Column {
                get {
                    return this._column0_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _3___4Column {
                get {
                    return this._column3___4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4_Column {
                get {
                    return this._column4_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row this[int index] {
                get {
                    return ((Table15Row)(this.Rows[index]));
                }
            }
            
            public event Table15RowChangeEventHandler Table15RowChanging;
            
            public event Table15RowChangeEventHandler Table15RowChanged;
            
            public event Table15RowChangeEventHandler Table15RowDeleting;
            
            public event Table15RowChangeEventHandler Table15RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable15Row(Table15Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row AddTable15Row(string union_name, int _0_2, int _3___4, int _4_) {
                Table15Row rowTable15Row = ((Table15Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0_2,
                        _3___4,
                        _4_};
                rowTable15Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable15Row);
                return rowTable15Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table15DataTable cln = ((Table15DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table15DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0_2 = base.Columns["0-2"];
                this._column3___4 = base.Columns["3 - 4"];
                this._column4_ = base.Columns["4+"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0_2 = new global::System.Data.DataColumn("0-2", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0_2.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0_2");
                this._column0_2.ExtendedProperties.Add("Generator_UserColumnName", "0-2");
                base.Columns.Add(this._column0_2);
                this._column3___4 = new global::System.Data.DataColumn("3 - 4", typeof(int), null, global::System.Data.MappingType.Element);
                this._column3___4.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column3___4");
                this._column3___4.ExtendedProperties.Add("Generator_UserColumnName", "3 - 4");
                base.Columns.Add(this._column3___4);
                this._column4_ = new global::System.Data.DataColumn("4+", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4_");
                this._column4_.ExtendedProperties.Add("Generator_UserColumnName", "4+");
                base.Columns.Add(this._column4_);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row NewTable15Row() {
                return ((Table15Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table15Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table15Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table15RowChanged != null)) {
                    this.Table15RowChanged(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table15RowChanging != null)) {
                    this.Table15RowChanging(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table15RowDeleted != null)) {
                    this.Table15RowDeleted(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table15RowDeleting != null)) {
                    this.Table15RowDeleting(this, new Table15RowChangeEvent(((Table15Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable15Row(Table15Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table15DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Table16DataTable : global::System.Data.TypedTableBase<Table16Row> {
            
            private global::System.Data.DataColumn columnunion_name;
            
            private global::System.Data.DataColumn _column0___3;
            
            private global::System.Data.DataColumn _column4___6;
            
            private global::System.Data.DataColumn _column7___9;
            
            private global::System.Data.DataColumn _column10___11;
            
            private global::System.Data.DataColumn column12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16DataTable() {
                this.TableName = "Table16";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table16DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Table16DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn union_nameColumn {
                get {
                    return this.columnunion_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _0___3Column {
                get {
                    return this._column0___3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _4___6Column {
                get {
                    return this._column4___6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _7___9Column {
                get {
                    return this._column7___9;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _10___11Column {
                get {
                    return this._column10___11;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _12Column {
                get {
                    return this.column12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row this[int index] {
                get {
                    return ((Table16Row)(this.Rows[index]));
                }
            }
            
            public event Table16RowChangeEventHandler Table16RowChanging;
            
            public event Table16RowChangeEventHandler Table16RowChanged;
            
            public event Table16RowChangeEventHandler Table16RowDeleting;
            
            public event Table16RowChangeEventHandler Table16RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTable16Row(Table16Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row AddTable16Row(string union_name, int _0___3, int _4___6, int _7___9, int _10___11, int _12) {
                Table16Row rowTable16Row = ((Table16Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        union_name,
                        _0___3,
                        _4___6,
                        _7___9,
                        _10___11,
                        _12};
                rowTable16Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTable16Row);
                return rowTable16Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Table16DataTable cln = ((Table16DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Table16DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnunion_name = base.Columns["union name"];
                this._column0___3 = base.Columns["0 - 3"];
                this._column4___6 = base.Columns["4 - 6"];
                this._column7___9 = base.Columns["7 - 9"];
                this._column10___11 = base.Columns["10 - 11"];
                this.column12 = base.Columns["12"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnunion_name = new global::System.Data.DataColumn("union name", typeof(string), null, global::System.Data.MappingType.Element);
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "union_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "union_nameColumn");
                this.columnunion_name.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnunion_name");
                this.columnunion_name.ExtendedProperties.Add("Generator_UserColumnName", "union name");
                base.Columns.Add(this.columnunion_name);
                this._column0___3 = new global::System.Data.DataColumn("0 - 3", typeof(int), null, global::System.Data.MappingType.Element);
                this._column0___3.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column0___3");
                this._column0___3.ExtendedProperties.Add("Generator_UserColumnName", "0 - 3");
                base.Columns.Add(this._column0___3);
                this._column4___6 = new global::System.Data.DataColumn("4 - 6", typeof(int), null, global::System.Data.MappingType.Element);
                this._column4___6.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column4___6");
                this._column4___6.ExtendedProperties.Add("Generator_UserColumnName", "4 - 6");
                base.Columns.Add(this._column4___6);
                this._column7___9 = new global::System.Data.DataColumn("7 - 9", typeof(int), null, global::System.Data.MappingType.Element);
                this._column7___9.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column7___9");
                this._column7___9.ExtendedProperties.Add("Generator_UserColumnName", "7 - 9");
                base.Columns.Add(this._column7___9);
                this._column10___11 = new global::System.Data.DataColumn("10 - 11", typeof(int), null, global::System.Data.MappingType.Element);
                this._column10___11.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column10___11");
                this._column10___11.ExtendedProperties.Add("Generator_UserColumnName", "10 - 11");
                base.Columns.Add(this._column10___11);
                this.column12 = new global::System.Data.DataColumn("12", typeof(int), null, global::System.Data.MappingType.Element);
                this.column12.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column12");
                this.column12.ExtendedProperties.Add("Generator_UserColumnName", "12");
                base.Columns.Add(this.column12);
                this.columnunion_name.AllowDBNull = false;
                this.columnunion_name.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row NewTable16Row() {
                return ((Table16Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Table16Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Table16Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Table16RowChanged != null)) {
                    this.Table16RowChanged(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Table16RowChanging != null)) {
                    this.Table16RowChanging(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Table16RowDeleted != null)) {
                    this.Table16RowDeleted(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Table16RowDeleting != null)) {
                    this.Table16RowDeleting(this, new Table16RowChangeEvent(((Table16Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTable16Row(Table16Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Table16DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tableDataTable1.statusColumn]));
                }
                set {
                    this[this.tableDataTable1.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int total {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'total\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableDataTable1.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableDataTable1.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableDataTable1.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableDataTable1.femaleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tableDataTable1.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tableDataTable1.totalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table1Row : global::System.Data.DataRow {
            
            private Table1DataTable tableTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable1 = ((Table1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable1.union_nameColumn]));
                }
                set {
                    this[this.tableTable1.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable1.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable1.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable1.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable1.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable1.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable1.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable1.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table_3Row : global::System.Data.DataRow {
            
            private Table_3DataTable tableTable_3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table_3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable_3 = ((Table_3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable_3.union_nameColumn]));
                }
                set {
                    this[this.tableTable_3.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int self {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.selfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'self\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.selfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int wife {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.wifeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'wife\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.wifeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int husband {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.husbandColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'husband\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.husbandColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int son {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.sonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'son\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.sonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int daughter {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.daughterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'daughter\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.daughterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fathermother {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.fathermotherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fathermother\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.fathermotherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int others {
                get {
                    try {
                        return ((int)(this[this.tableTable_3.othersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'others\' in table \'Table 3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable_3.othersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsselfNull() {
                return this.IsNull(this.tableTable_3.selfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetselfNull() {
                this[this.tableTable_3.selfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswifeNull() {
                return this.IsNull(this.tableTable_3.wifeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwifeNull() {
                this[this.tableTable_3.wifeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshusbandNull() {
                return this.IsNull(this.tableTable_3.husbandColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethusbandNull() {
                this[this.tableTable_3.husbandColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssonNull() {
                return this.IsNull(this.tableTable_3.sonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsonNull() {
                this[this.tableTable_3.sonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdaughterNull() {
                return this.IsNull(this.tableTable_3.daughterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdaughterNull() {
                this[this.tableTable_3.daughterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfathermotherNull() {
                return this.IsNull(this.tableTable_3.fathermotherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfathermotherNull() {
                this[this.tableTable_3.fathermotherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsothersNull() {
                return this.IsNull(this.tableTable_3.othersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetothersNull() {
                this[this.tableTable_3.othersColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table6Row : global::System.Data.DataRow {
            
            private Table6DataTable tableTable6;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table6Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable6 = ((Table6DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string litercystatus {
                get {
                    return ((string)(this[this.tableTable6.litercystatusColumn]));
                }
                set {
                    this[this.tableTable6.litercystatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable6.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable6.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable6.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable6.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable6.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable6.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable6.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable6.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table7Row : global::System.Data.DataRow {
            
            private Table7DataTable tableTable7;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table7Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable7 = ((Table7DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string litercystatus {
                get {
                    return ((string)(this[this.tableTable7.litercystatusColumn]));
                }
                set {
                    this[this.tableTable7.litercystatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable7.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable7.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable7.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable7.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable7.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable7.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable7.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable7.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table8Row : global::System.Data.DataRow {
            
            private Table8DataTable tableTable8;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table8Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable8 = ((Table8DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string occupation {
                get {
                    return ((string)(this[this.tableTable8.occupationColumn]));
                }
                set {
                    this[this.tableTable8.occupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable8.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable8.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable8.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable8.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable8.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable8.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable8.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable8.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table9Row : global::System.Data.DataRow {
            
            private Table9DataTable tableTable9;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table9Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable9 = ((Table9DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string occupation {
                get {
                    return ((string)(this[this.tableTable9.occupationColumn]));
                }
                set {
                    this[this.tableTable9.occupationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int male {
                get {
                    try {
                        return ((int)(this[this.tableTable9.maleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'male\' in table \'Table9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable9.maleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int female {
                get {
                    try {
                        return ((int)(this[this.tableTable9.femaleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'female\' in table \'Table9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable9.femaleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmaleNull() {
                return this.IsNull(this.tableTable9.maleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmaleNull() {
                this[this.tableTable9.maleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfemaleNull() {
                return this.IsNull(this.tableTable9.femaleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfemaleNull() {
                this[this.tableTable9.femaleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table10Row : global::System.Data.DataRow {
            
            private Table10DataTable tableTable10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table10Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable10 = ((Table10DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unionname {
                get {
                    return ((string)(this[this.tableTable10.unionnameColumn]));
                }
                set {
                    this[this.tableTable10.unionnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5 {
                get {
                    try {
                        return ((int)(this[this.tableTable10.@__5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<5\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10.@__5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5_6 {
                get {
                    try {
                        return ((int)(this[this.tableTable10._5_6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5-6\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._5_6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _7_8 {
                get {
                    try {
                        return ((int)(this[this.tableTable10._7_8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'7-8\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._7_8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _9_10 {
                get {
                    try {
                        return ((int)(this[this.tableTable10._9_10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'9-10\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._9_10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _11_ {
                get {
                    try {
                        return ((int)(this[this.tableTable10._11_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'11-\' in table \'Table10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable10._11_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is__5Null() {
                return this.IsNull(this.tableTable10.@__5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set__5Null() {
                this[this.tableTable10.@__5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5_6Null() {
                return this.IsNull(this.tableTable10._5_6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5_6Null() {
                this[this.tableTable10._5_6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_7_8Null() {
                return this.IsNull(this.tableTable10._7_8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_7_8Null() {
                this[this.tableTable10._7_8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_9_10Null() {
                return this.IsNull(this.tableTable10._9_10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_9_10Null() {
                this[this.tableTable10._9_10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_11_Null() {
                return this.IsNull(this.tableTable10._11_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_11_Null() {
                this[this.tableTable10._11_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table12Row : global::System.Data.DataRow {
            
            private Table12DataTable tableTable12;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table12Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable12 = ((Table12DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable12.union_nameColumn]));
                }
                set {
                    this[this.tableTable12.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5000 {
                get {
                    try {
                        return ((int)(this[this.tableTable12.@__5000Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<5000\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12.@__5000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5000_9999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._5000_9999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5000-9999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._5000_9999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _10000_14999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._10000_14999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'10000-14999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._10000_14999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _15000_19999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._15000_19999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'15000-19999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._15000_19999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _20000_24999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._20000_24999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'20000-24999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._20000_24999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _25000_49999 {
                get {
                    try {
                        return ((int)(this[this.tableTable12._25000_49999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'25000-49999\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._25000_49999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _50000_ {
                get {
                    try {
                        return ((int)(this[this.tableTable12._50000_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'50000+\' in table \'Table12\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable12._50000_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is__5000Null() {
                return this.IsNull(this.tableTable12.@__5000Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set__5000Null() {
                this[this.tableTable12.@__5000Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5000_9999Null() {
                return this.IsNull(this.tableTable12._5000_9999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5000_9999Null() {
                this[this.tableTable12._5000_9999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_10000_14999Null() {
                return this.IsNull(this.tableTable12._10000_14999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_10000_14999Null() {
                this[this.tableTable12._10000_14999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_15000_19999Null() {
                return this.IsNull(this.tableTable12._15000_19999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_15000_19999Null() {
                this[this.tableTable12._15000_19999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_20000_24999Null() {
                return this.IsNull(this.tableTable12._20000_24999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_20000_24999Null() {
                this[this.tableTable12._20000_24999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_25000_49999Null() {
                return this.IsNull(this.tableTable12._25000_49999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_25000_49999Null() {
                this[this.tableTable12._25000_49999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_50000_Null() {
                return this.IsNull(this.tableTable12._50000_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_50000_Null() {
                this[this.tableTable12._50000_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table13Row : global::System.Data.DataRow {
            
            private Table13DataTable tableTable13;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable13 = ((Table13DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable13.union_nameColumn]));
                }
                set {
                    this[this.tableTable13.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int no_land {
                get {
                    try {
                        return ((int)(this[this.tableTable13.no_landColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'no land\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13.no_landColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ___05_y_AS__0_05___0_24 {
                get {
                    try {
                        return ((int)(this[this.tableTable13.___05_y_AS__0_05___0_24Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<_05_y AS [0_05 - 0_24\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13.___05_y_AS__0_05___0_24Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_25___0_49 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._0_25___0_49Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0_25 - 0_49\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._0_25___0_49Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_50___0_99 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._0_50___0_99Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0_50 - 0_99\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._0_50___0_99Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _1_0___1_49 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._1_0___1_49Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'1_0 - 1_49\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._1_0___1_49Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _1_5_1_99 {
                get {
                    try {
                        return ((int)(this[this.tableTable13._1_5_1_99Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'1_5-1_99\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._1_5_1_99Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _2_ {
                get {
                    try {
                        return ((int)(this[this.tableTable13._2_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'2+\' in table \'Table13\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13._2_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isno_landNull() {
                return this.IsNull(this.tableTable13.no_landColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setno_landNull() {
                this[this.tableTable13.no_landColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is___05_y_AS__0_05___0_24Null() {
                return this.IsNull(this.tableTable13.___05_y_AS__0_05___0_24Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set___05_y_AS__0_05___0_24Null() {
                this[this.tableTable13.___05_y_AS__0_05___0_24Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_25___0_49Null() {
                return this.IsNull(this.tableTable13._0_25___0_49Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_25___0_49Null() {
                this[this.tableTable13._0_25___0_49Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_50___0_99Null() {
                return this.IsNull(this.tableTable13._0_50___0_99Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_50___0_99Null() {
                this[this.tableTable13._0_50___0_99Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_1_0___1_49Null() {
                return this.IsNull(this.tableTable13._1_0___1_49Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_1_0___1_49Null() {
                this[this.tableTable13._1_0___1_49Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_1_5_1_99Null() {
                return this.IsNull(this.tableTable13._1_5_1_99Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_1_5_1_99Null() {
                this[this.tableTable13._1_5_1_99Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_2_Null() {
                return this.IsNull(this.tableTable13._2_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_2_Null() {
                this[this.tableTable13._2_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table13ARow : global::System.Data.DataRow {
            
            private Table13ADataTable tableTable13A;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13ARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable13A = ((Table13ADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable13A.union_nameColumn]));
                }
                set {
                    this[this.tableTable13A.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5000 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A.@__5000Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<5000\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A.@__5000Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _5000_9999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._5000_9999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'5000-9999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._5000_9999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _10000_14999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._10000_14999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'10000-14999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._10000_14999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _15000_19999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._15000_19999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'15000-19999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._15000_19999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _20000_24999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._20000_24999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'20000-24999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._20000_24999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _25000_49999 {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._25000_49999Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'25000-49999\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._25000_49999Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _50000_ {
                get {
                    try {
                        return ((int)(this[this.tableTable13A._50000_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'50000+\' in table \'Table13A\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13A._50000_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is__5000Null() {
                return this.IsNull(this.tableTable13A.@__5000Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set__5000Null() {
                this[this.tableTable13A.@__5000Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_5000_9999Null() {
                return this.IsNull(this.tableTable13A._5000_9999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_5000_9999Null() {
                this[this.tableTable13A._5000_9999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_10000_14999Null() {
                return this.IsNull(this.tableTable13A._10000_14999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_10000_14999Null() {
                this[this.tableTable13A._10000_14999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_15000_19999Null() {
                return this.IsNull(this.tableTable13A._15000_19999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_15000_19999Null() {
                this[this.tableTable13A._15000_19999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_20000_24999Null() {
                return this.IsNull(this.tableTable13A._20000_24999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_20000_24999Null() {
                this[this.tableTable13A._20000_24999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_25000_49999Null() {
                return this.IsNull(this.tableTable13A._25000_49999Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_25000_49999Null() {
                this[this.tableTable13A._25000_49999Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_50000_Null() {
                return this.IsNull(this.tableTable13A._50000_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_50000_Null() {
                this[this.tableTable13A._50000_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table13BRow : global::System.Data.DataRow {
            
            private Table13BDataTable tableTable13B;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table13BRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable13B = ((Table13BDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable13B.union_nameColumn]));
                }
                set {
                    this[this.tableTable13B.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int @__5 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B.@__5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'<5\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B.@__5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _6___10 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._6___10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'6 - 10\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._6___10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _11___15 {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._11___15Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'11 - 15\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._11___15Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _16_ {
                get {
                    try {
                        return ((int)(this[this.tableTable13B._16_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'16+\' in table \'Table13B\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable13B._16_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is__5Null() {
                return this.IsNull(this.tableTable13B.@__5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set__5Null() {
                this[this.tableTable13B.@__5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_6___10Null() {
                return this.IsNull(this.tableTable13B._6___10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_6___10Null() {
                this[this.tableTable13B._6___10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_11___15Null() {
                return this.IsNull(this.tableTable13B._11___15Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_11___15Null() {
                this[this.tableTable13B._11___15Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_16_Null() {
                return this.IsNull(this.tableTable13B._16_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_16_Null() {
                this[this.tableTable13B._16_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table14CowRow : global::System.Data.DataRow {
            
            private Table14CowDataTable tableTable14Cow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14CowRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable14Cow = ((Table14CowDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable14Cow.union_nameColumn]));
                }
                set {
                    this[this.tableTable14Cow.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_2 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow._0_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0-2\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow._0_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable14Cow._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table14Cow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Cow._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_2Null() {
                return this.IsNull(this.tableTable14Cow._0_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_2Null() {
                this[this.tableTable14Cow._0_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable14Cow._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable14Cow._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable14Cow._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable14Cow._4_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table14GoatRow : global::System.Data.DataRow {
            
            private Table14GoatDataTable tableTable14Goat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14GoatRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable14Goat = ((Table14GoatDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable14Goat.union_nameColumn]));
                }
                set {
                    this[this.tableTable14Goat.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_2 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Goat._0_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0-2\' in table \'Table14Goat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Goat._0_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Goat._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table14Goat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Goat._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable14Goat._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table14Goat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Goat._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_2Null() {
                return this.IsNull(this.tableTable14Goat._0_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_2Null() {
                this[this.tableTable14Goat._0_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable14Goat._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable14Goat._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable14Goat._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable14Goat._4_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table14HenRow : global::System.Data.DataRow {
            
            private Table14HenDataTable tableTable14Hen;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table14HenRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable14Hen = ((Table14HenDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable14Hen.union_nameColumn]));
                }
                set {
                    this[this.tableTable14Hen.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_2 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Hen._0_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0-2\' in table \'Table14Hen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Hen._0_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable14Hen._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table14Hen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Hen._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable14Hen._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table14Hen\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable14Hen._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_2Null() {
                return this.IsNull(this.tableTable14Hen._0_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_2Null() {
                this[this.tableTable14Hen._0_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable14Hen._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable14Hen._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable14Hen._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable14Hen._4_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table15Row : global::System.Data.DataRow {
            
            private Table15DataTable tableTable15;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table15Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable15 = ((Table15DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable15.union_nameColumn]));
                }
                set {
                    this[this.tableTable15.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0_2 {
                get {
                    try {
                        return ((int)(this[this.tableTable15._0_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0-2\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15._0_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _3___4 {
                get {
                    try {
                        return ((int)(this[this.tableTable15._3___4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'3 - 4\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15._3___4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4_ {
                get {
                    try {
                        return ((int)(this[this.tableTable15._4_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4+\' in table \'Table15\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable15._4_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0_2Null() {
                return this.IsNull(this.tableTable15._0_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0_2Null() {
                this[this.tableTable15._0_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_3___4Null() {
                return this.IsNull(this.tableTable15._3___4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_3___4Null() {
                this[this.tableTable15._3___4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4_Null() {
                return this.IsNull(this.tableTable15._4_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4_Null() {
                this[this.tableTable15._4_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Table16Row : global::System.Data.DataRow {
            
            private Table16DataTable tableTable16;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Table16Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTable16 = ((Table16DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string union_name {
                get {
                    return ((string)(this[this.tableTable16.union_nameColumn]));
                }
                set {
                    this[this.tableTable16.union_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _0___3 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._0___3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'0 - 3\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._0___3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _4___6 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._4___6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'4 - 6\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._4___6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _7___9 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._7___9Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'7 - 9\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._7___9Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _10___11 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._10___11Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'10 - 11\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._10___11Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _12 {
                get {
                    try {
                        return ((int)(this[this.tableTable16._12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'12\' in table \'Table16\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTable16._12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_0___3Null() {
                return this.IsNull(this.tableTable16._0___3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_0___3Null() {
                this[this.tableTable16._0___3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_4___6Null() {
                return this.IsNull(this.tableTable16._4___6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_4___6Null() {
                this[this.tableTable16._4___6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_7___9Null() {
                return this.IsNull(this.tableTable16._7___9Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_7___9Null() {
                this[this.tableTable16._7___9Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_10___11Null() {
                return this.IsNull(this.tableTable16._10___11Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_10___11Null() {
                this[this.tableTable16._10___11Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_12Null() {
                return this.IsNull(this.tableTable16._12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_12Null() {
                this[this.tableTable16._12Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table1RowChangeEvent : global::System.EventArgs {
            
            private Table1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1RowChangeEvent(Table1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table_3RowChangeEvent : global::System.EventArgs {
            
            private Table_3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3RowChangeEvent(Table_3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table_3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table6RowChangeEvent : global::System.EventArgs {
            
            private Table6Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6RowChangeEvent(Table6Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table6Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table7RowChangeEvent : global::System.EventArgs {
            
            private Table7Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7RowChangeEvent(Table7Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table7Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table8RowChangeEvent : global::System.EventArgs {
            
            private Table8Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8RowChangeEvent(Table8Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table8Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table9RowChangeEvent : global::System.EventArgs {
            
            private Table9Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9RowChangeEvent(Table9Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table9Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table10RowChangeEvent : global::System.EventArgs {
            
            private Table10Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10RowChangeEvent(Table10Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table10Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table12RowChangeEvent : global::System.EventArgs {
            
            private Table12Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12RowChangeEvent(Table12Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table12Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table13RowChangeEvent : global::System.EventArgs {
            
            private Table13Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13RowChangeEvent(Table13Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table13ARowChangeEvent : global::System.EventArgs {
            
            private Table13ARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARowChangeEvent(Table13ARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table13BRowChangeEvent : global::System.EventArgs {
            
            private Table13BRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRowChangeEvent(Table13BRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table13BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table14CowRowChangeEvent : global::System.EventArgs {
            
            private Table14CowRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRowChangeEvent(Table14CowRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14CowRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table14GoatRowChangeEvent : global::System.EventArgs {
            
            private Table14GoatRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRowChangeEvent(Table14GoatRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14GoatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table14HenRowChangeEvent : global::System.EventArgs {
            
            private Table14HenRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRowChangeEvent(Table14HenRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table14HenRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table15RowChangeEvent : global::System.EventArgs {
            
            private Table15Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15RowChangeEvent(Table15Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table15Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Table16RowChangeEvent : global::System.EventArgs {
            
            private Table16Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16RowChangeEvent(Table16Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Table16Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ReportsApplication1.DataSet2TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            tableMapping.ColumnMappings.Add("total", "total");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     x.a AS status, x.b AS male, y.c AS female, x.b + y.c AS total
FROM         (SELECT     marital_status.status AS a, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              marital_status ON member.marital_no = marital_status.marital_no
                       WHERE      (member.sex_no = 1)
                       GROUP BY marital_status.status) AS x INNER JOIN
                          (SELECT     marital_status_1.status AS a, COUNT(member_1.member_id) AS c
                            FROM          member AS member_1 INNER JOIN
                                                   marital_status AS marital_status_1 ON member_1.marital_no = marital_status_1.marital_no
                            WHERE      (member_1.sex_no = 2)
                            GROUP BY marital_status_1.status) AS y ON x.a = y.a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.DataTable1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.DataTable1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.DataTable1DataTable dataTable = new DataSet2.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table1";
            tableMapping.ColumnMappings.Add("union_name", "union_name");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DISTINCT x.a AS union_name, x.b AS male, y.c AS female
FROM         (SELECT     [union].union_name AS a, COUNT(member.member_id) AS b
                       FROM          [union] INNER JOIN
                                              cnc ON [union].union_id = cnc.union_id INNER JOIN
                                              khana ON cnc.cnc_id = khana.cnc_id INNER JOIN
                                              member ON khana.khana_id = member.khana_id
                       WHERE      (member.sex_no = 1)
                       GROUP BY [union].union_name) x INNER JOIN
                          (SELECT     [union].union_name AS a, COUNT(member.member_id) AS c
                            FROM          [union] INNER JOIN
                                                   cnc ON [union].union_id = cnc.union_id INNER JOIN
                                                   khana ON cnc.cnc_id = khana.cnc_id INNER JOIN
                                                   member ON khana.khana_id = member.khana_id
                            WHERE      (member.sex_no = 2)
                            GROUP BY [union].union_name) y ON x.a = y.a



";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table1DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table1DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table1DataTable dataTable = new DataSet2.Table1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table_3TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table_3TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table 3";
            tableMapping.ColumnMappings.Add("union_name", "union_name");
            tableMapping.ColumnMappings.Add("self", "self");
            tableMapping.ColumnMappings.Add("wife", "wife");
            tableMapping.ColumnMappings.Add("husband", "husband");
            tableMapping.ColumnMappings.Add("son", "son");
            tableMapping.ColumnMappings.Add("daughter", "daughter");
            tableMapping.ColumnMappings.Add("fathermother", "fathermother");
            tableMapping.ColumnMappings.Add("others", "others");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     distinct a.a AS union_name, a.b AS self, b.c AS wife, c.d AS husband, " +
                "d.e AS son, e.f AS daughter, f.g AS fathermother, g.h AS others\r\nFROM         (S" +
                "ELECT     [union].union_name a, COUNT(member.member_id) AS b\r\n                  " +
                "     FROM          member INNER JOIN\r\n                                          " +
                "    relation ON member.relation_no = relation.relation_no INNER JOIN\r\n          " +
                "                                    khana ON member.khana_id = khana.khana_id IN" +
                "NER JOIN\r\n                                              cnc ON khana.cnc_id = cn" +
                "c.cnc_id INNER JOIN\r\n                                              [union] ON cn" +
                "c.union_id = [union].union_id\r\n                       WHERE      (member.relatio" +
                "n_no = 1)\r\n                       GROUP BY [union].union_name) a INNER JOIN\r\n   " +
                "                       (SELECT     [union].union_name a, COUNT(member.member_id)" +
                " AS c\r\n                            FROM          member INNER JOIN\r\n            " +
                "                                       relation ON member.relation_no = relation" +
                ".relation_no INNER JOIN\r\n                                                   khan" +
                "a ON member.khana_id = khana.khana_id INNER JOIN\r\n                              " +
                "                     cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n              " +
                "                                     [union] ON cnc.union_id = [union].union_id\r" +
                "\n                            WHERE      (member.relation_no = 2)\r\n              " +
                "              GROUP BY [union].union_name) b ON a.a = b.a INNER JOIN\r\n          " +
                "                (SELECT     [union].union_name a, COUNT(member.member_id) AS d\r\n" +
                "                            FROM          member INNER JOIN\r\n                   " +
                "                                relation ON member.relation_no = relation.relati" +
                "on_no INNER JOIN\r\n                                                   khana ON me" +
                "mber.khana_id = khana.khana_id INNER JOIN\r\n                                     " +
                "              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                     " +
                "                              [union] ON cnc.union_id = [union].union_id\r\n      " +
                "                      WHERE      (member.relation_no = 3)\r\n                     " +
                "       GROUP BY [union].union_name) c ON b.a = c.a INNER JOIN\r\n                 " +
                "         (SELECT     [union].union_name a, COUNT(member.member_id) AS e\r\n       " +
                "                     FROM          member INNER JOIN\r\n                          " +
                "                         relation ON member.relation_no = relation.relation_no I" +
                "NNER JOIN\r\n                                                   khana ON member.kh" +
                "ana_id = khana.khana_id INNER JOIN\r\n                                            " +
                "       cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                            " +
                "                       [union] ON cnc.union_id = [union].union_id\r\n             " +
                "               WHERE      (member.relation_no = 4)\r\n                            " +
                "GROUP BY [union].union_name) d ON c.a = d.a INNER JOIN\r\n                        " +
                "  (SELECT     [union].union_name a, COUNT(member.member_id) AS f\r\n              " +
                "              FROM          member INNER JOIN\r\n                                 " +
                "                  relation ON member.relation_no = relation.relation_no INNER JO" +
                "IN\r\n                                                   khana ON member.khana_id " +
                "= khana.khana_id INNER JOIN\r\n                                                   " +
                "cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                   " +
                "                [union] ON cnc.union_id = [union].union_id\r\n                    " +
                "        WHERE      (member.relation_no = 5)\r\n                            GROUP B" +
                "Y [union].union_name) e ON d.a = e.a INNER JOIN\r\n                          (SELE" +
                "CT     [union].union_name a, COUNT(member.member_id) AS g\r\n                     " +
                "       FROM          member INNER JOIN\r\n                                        " +
                "           relation ON member.relation_no = relation.relation_no INNER JOIN\r\n   " +
                "                                                khana ON member.khana_id = khana" +
                ".khana_id INNER JOIN\r\n                                                   cnc ON " +
                "khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                          " +
                "         [union] ON cnc.union_id = [union].union_id\r\n                           " +
                " WHERE      (member.relation_no = 6)\r\n                            GROUP BY [unio" +
                "n].union_name) f ON e.a = f.a INNER JOIN\r\n                          (SELECT     " +
                "[union].union_name a, COUNT(member.member_id) AS h\r\n                            " +
                "FROM          member INNER JOIN\r\n                                               " +
                "    relation ON member.relation_no = relation.relation_no INNER JOIN\r\n          " +
                "                                         khana ON member.khana_id = khana.khana_" +
                "id INNER JOIN\r\n                                                   cnc ON khana.c" +
                "nc_id = cnc.cnc_id INNER JOIN\r\n                                                 " +
                "  [union] ON cnc.union_id = [union].union_id\r\n                            WHERE " +
                "     (member.relation_no = 7)\r\n                            GROUP BY [union].unio" +
                "n_name) g ON f.a = g.a\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table_3DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table_3DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table_3DataTable dataTable = new DataSet2.Table_3DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table6TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table6TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table6";
            tableMapping.ColumnMappings.Add("litercystatus", "litercystatus");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.education AS litercystatus, a.b AS male, b.c AS female
FROM         (SELECT     education.education, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              education ON member.education_no = education.education_no
                       WHERE      (member.sex_no = 1) AND (member.age > 6)
                       GROUP BY education.education) a INNER JOIN
                          (SELECT     education.education, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   education ON member.education_no = education.education_no
                            WHERE      (member.sex_no = 2) AND (member.age > 6)
                            GROUP BY education.education) b ON a.education = b.education";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table6DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table6DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table6DataTable dataTable = new DataSet2.Table6DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table7TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table7TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table7";
            tableMapping.ColumnMappings.Add("litercystatus", "litercystatus");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"
SELECT     a.education AS litercystatus, a.b AS male, b.c AS female
FROM         (SELECT     education.education, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              education ON member.education_no = education.education_no
                       WHERE      (member.sex_no = 1) AND (relation_no = 1)
                       GROUP BY education.education) a INNER JOIN
                          (SELECT     education.education, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   education ON member.education_no = education.education_no
                            WHERE      (member.sex_no = 2) AND (relation_no = 1)
                            GROUP BY education.education) b ON a.education = b.education";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table7DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table7DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table7DataTable dataTable = new DataSet2.Table7DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table8TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table8TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table8";
            tableMapping.ColumnMappings.Add("occupation", "occupation");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     x.a AS occupation, x.b AS male, y.c AS female
FROM         (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              occupation ON member.occupation_no = occupation.occupation_no
                       WHERE      (member.age > 10) AND (member.sex_no = 1)
                       GROUP BY occupation.occupation) x INNER JOIN
                          (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   occupation ON member.occupation_no = occupation.occupation_no
                            WHERE      (member.age > 10) AND (member.sex_no = 2)
                            GROUP BY occupation.occupation) y ON x.a = y.a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table8DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table8DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table8DataTable dataTable = new DataSet2.Table8DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table9TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table9TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table9";
            tableMapping.ColumnMappings.Add("occupation", "occupation");
            tableMapping.ColumnMappings.Add("male", "male");
            tableMapping.ColumnMappings.Add("female", "female");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     x.a AS occupation, x.b AS male, y.c AS female
FROM         (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS b
                       FROM          member INNER JOIN
                                              occupation ON member.occupation_no = occupation.occupation_no
                       WHERE      (relation_no = 1) AND (member.sex_no = 1)
                       GROUP BY occupation.occupation) x INNER JOIN
                          (SELECT     occupation.occupation AS a, COUNT(member.member_id) AS c
                            FROM          member INNER JOIN
                                                   occupation ON member.occupation_no = occupation.occupation_no
                            WHERE      (relation_no = 1) AND (member.sex_no = 2)
                            GROUP BY occupation.occupation) y ON x.a = y.a";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table9DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table9DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table9DataTable dataTable = new DataSet2.Table9DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table10TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table10TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table10";
            tableMapping.ColumnMappings.Add("unionname", "unionname");
            tableMapping.ColumnMappings.Add("<5", "<5");
            tableMapping.ColumnMappings.Add("5-6", "5-6");
            tableMapping.ColumnMappings.Add("7-8", "7-8");
            tableMapping.ColumnMappings.Add("9-10", "9-10");
            tableMapping.ColumnMappings.Add("11-", "11-");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a1.unionname, a1.khana AS [<5], a2.khana AS [5-6], a3.khana AS [7-8], " +
                "a4.khana AS [9-10], a5.khana AS [11-]\r\nFROM         (SELECT     a AS unionname, " +
                "COUNT(b) AS khana\r\n                       FROM          (SELECT     [union].unio" +
                "n_name AS a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                " +
                "                               FROM          khana INNER JOIN\r\n                 " +
                "                                                     cnc ON khana.cnc_id = cnc.c" +
                "nc_id INNER JOIN\r\n                                                              " +
                "        [union] ON cnc.union_id = [union].union_id INNER JOIN\r\n                 " +
                "                                                     member ON khana.khana_id = " +
                "member.khana_id\r\n                                               GROUP BY [union]" +
                ".union_name, khana.khana_id\r\n                                               HAVI" +
                "NG      (COUNT(member.member_id) < 5)) DERIVEDTBL\r\n                       GROUP " +
                "BY a) a1 INNER JOIN\r\n                          (SELECT     a AS unionname, COUNT" +
                "(b) AS khana\r\n                            FROM          (SELECT     [union].unio" +
                "n_name AS a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                " +
                "                                    FROM          khana INNER JOIN\r\n            " +
                "                                                               cnc ON khana.cnc_" +
                "id = cnc.cnc_id INNER JOIN\r\n                                                    " +
                "                       [union] ON cnc.union_id = [union].union_id INNER JOIN\r\n  " +
                "                                                                         member " +
                "ON khana.khana_id = member.khana_id\r\n                                           " +
                "         GROUP BY [union].union_name, khana.khana_id\r\n                          " +
                "                          HAVING      (COUNT(member.member_id) BETWEEN 5 AND 6))" +
                " DERIVEDTBL\r\n                            GROUP BY a) a2 ON a1.unionname = a2.uni" +
                "onname INNER JOIN\r\n                          (SELECT     a AS unionname, COUNT(b" +
                ") AS khana\r\n                            FROM          (SELECT     [union].union_" +
                "name AS a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                  " +
                "                                  FROM          khana INNER JOIN\r\n              " +
                "                                                             cnc ON khana.cnc_id" +
                " = cnc.cnc_id INNER JOIN\r\n                                                      " +
                "                     [union] ON cnc.union_id = [union].union_id INNER JOIN\r\n    " +
                "                                                                       member ON" +
                " khana.khana_id = member.khana_id\r\n                                             " +
                "       GROUP BY [union].union_name, khana.khana_id\r\n                            " +
                "                        HAVING      (COUNT(member.member_id) BETWEEN 7 AND 8)) D" +
                "ERIVEDTBL\r\n                            GROUP BY a) a3 ON a2.unionname = a3.union" +
                "name INNER JOIN\r\n                          (SELECT     a AS unionname, COUNT(b) " +
                "AS khana\r\n                            FROM          (SELECT     [union].union_na" +
                "me AS a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                    " +
                "                                FROM          khana INNER JOIN\r\n                " +
                "                                                           cnc ON khana.cnc_id =" +
                " cnc.cnc_id INNER JOIN\r\n                                                        " +
                "                   [union] ON cnc.union_id = [union].union_id INNER JOIN\r\n      " +
                "                                                                     member ON k" +
                "hana.khana_id = member.khana_id\r\n                                               " +
                "     GROUP BY [union].union_name, khana.khana_id\r\n                              " +
                "                      HAVING      (COUNT(member.member_id) BETWEEN 9 AND 10)) DE" +
                "RIVEDTBL\r\n                            GROUP BY a) a4 ON a3.unionname = a4.unionn" +
                "ame INNER JOIN\r\n                          (SELECT     a AS unionname, COUNT(b) A" +
                "S khana\r\n                            FROM          (SELECT     [union].union_nam" +
                "e AS a, khana.khana_id AS b, COUNT(member.member_id) AS c\r\n                     " +
                "                               FROM          khana INNER JOIN\r\n                 " +
                "                                                          cnc ON khana.cnc_id = " +
                "cnc.cnc_id INNER JOIN\r\n                                                         " +
                "                  [union] ON cnc.union_id = [union].union_id INNER JOIN\r\n       " +
                "                                                                    member ON kh" +
                "ana.khana_id = member.khana_id\r\n                                                " +
                "    GROUP BY [union].union_name, khana.khana_id\r\n                               " +
                "                     HAVING      (COUNT(member.member_id) > 11)) DERIVEDTBL\r\n   " +
                "                         GROUP BY a) a5 ON a4.unionname = a5.unionname\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table10DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table10DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table10DataTable dataTable = new DataSet2.Table10DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table12TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table12TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table12";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<5000", "<5000");
            tableMapping.ColumnMappings.Add("5000-9999", "5000-9999");
            tableMapping.ColumnMappings.Add("10000-14999", "10000-14999");
            tableMapping.ColumnMappings.Add("15000-19999", "15000-19999");
            tableMapping.ColumnMappings.Add("20000-24999", "20000-24999");
            tableMapping.ColumnMappings.Add("25000-49999", "25000-49999");
            tableMapping.ColumnMappings.Add("50000+", "50000+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [<5000], b.y AS [5000-9999], c.y AS [10000" +
                "-14999], d.y AS [15000-19999], e.y AS [20000-24999], f.y AS [25000-49999], \r\n   " +
                "                   g.y AS [50000+]\r\nFROM         (SELECT     union_name AS x, CO" +
                "UNT(khana_id) AS y\r\n                       FROM          khana INNER JOIN\r\n     " +
                "                                         cnc ON khana.cnc_id = cnc.cnc_id INNER " +
                "JOIN\r\n                                              [union] ON cnc.union_id = [u" +
                "nion].union_id\r\n                       WHERE      (khana.house_price < 5000)\r\n  " +
                "                     GROUP BY union_name) a INNER JOIN\r\n                        " +
                "  (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                           " +
                " FROM          khana INNER JOIN\r\n                                               " +
                "    cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                               " +
                "                    [union] ON cnc.union_id = [union].union_id\r\n                " +
                "            WHERE      (khana.house_price BETWEEN 5000 AND 9999)\r\n              " +
                "              GROUP BY union_name) b ON a.x = b.x INNER JOIN\r\n                  " +
                "        (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                     " +
                "       FROM          khana INNER JOIN\r\n                                         " +
                "          cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                         " +
                "                          [union] ON cnc.union_id = [union].union_id\r\n          " +
                "                  WHERE      (khana.house_price BETWEEN 10000 AND 14999)\r\n      " +
                "                      GROUP BY union_name) c ON b.x = c.x INNER JOIN\r\n          " +
                "                (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n             " +
                "               FROM          khana INNER JOIN\r\n                                 " +
                "                  cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                 " +
                "                                  [union] ON cnc.union_id = [union].union_id\r\n  " +
                "                          WHERE      (khana.house_price BETWEEN 15000 AND 19999)" +
                "\r\n                            GROUP BY union_name) d ON c.x = d.x INNER JOIN\r\n  " +
                "                        (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n     " +
                "                       FROM          khana INNER JOIN\r\n                         " +
                "                          cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n         " +
                "                                          [union] ON cnc.union_id = [union].unio" +
                "n_id\r\n                            WHERE      (khana.house_price BETWEEN 20000 AN" +
                "D 24999)\r\n                            GROUP BY union_name) e ON d.x = e.x INNER " +
                "JOIN\r\n                          (SELECT     union_name AS x, COUNT(khana_id) AS " +
                "y\r\n                            FROM          khana INNER JOIN\r\n                 " +
                "                                  cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n " +
                "                                                  [union] ON cnc.union_id = [uni" +
                "on].union_id\r\n                            WHERE      (khana.house_price BETWEEN " +
                "25000 AND 49999)\r\n                            GROUP BY union_name) f ON e.x = f." +
                "x INNER JOIN\r\n                          (SELECT     union_name AS x, COUNT(khana" +
                "_id) AS y\r\n                            FROM          khana INNER JOIN\r\n         " +
                "                                          cnc ON khana.cnc_id = cnc.cnc_id INNER" +
                " JOIN\r\n                                                   [union] ON cnc.union_i" +
                "d = [union].union_id\r\n                            WHERE      (khana.house_price " +
                "> 50000)\r\n                            GROUP BY union_name) g ON f.x = g.x\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table12DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table12DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table12DataTable dataTable = new DataSet2.Table12DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table13TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table13TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table13";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("no land", "no land");
            tableMapping.ColumnMappings.Add("<.05.y AS [0.05 - 0.24", "<_05_y AS [0_05 - 0_24");
            tableMapping.ColumnMappings.Add("0.25 - 0.49", "0_25 - 0_49");
            tableMapping.ColumnMappings.Add("0.50 - 0.99", "0_50 - 0_99");
            tableMapping.ColumnMappings.Add("1.0 - 1.49", "1_0 - 1_49");
            tableMapping.ColumnMappings.Add("1.5-1.99", "1_5-1_99");
            tableMapping.ColumnMappings.Add("2+", "2+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     a.x AS [union name], a.y AS [no land], b.y AS [<.05.y AS [0.05 - 0.24]" +
                ", d.y AS [0.25 - 0.49], e.y AS [0.50 - 0.99], f.y AS [1.0 - 1.49], g.y AS [1.5-1" +
                ".99], \r\n                      h.y AS [2+]\r\nFROM         (SELECT     union_name A" +
                "S x, COUNT(khana_id) AS y\r\n                       FROM          khana INNER JOIN" +
                "\r\n                                              cnc ON khana.cnc_id = cnc.cnc_id" +
                " INNER JOIN\r\n                                              [union] ON cnc.union_" +
                "id = [union].union_id\r\n                       WHERE      (khana.land_amount = 0)" +
                "\r\n                       GROUP BY union_name) a INNER JOIN\r\n                    " +
                "      (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                       " +
                "     FROM          khana INNER JOIN\r\n                                           " +
                "        cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                           " +
                "                        [union] ON cnc.union_id = [union].union_id\r\n            " +
                "                WHERE      (khana.land_amount < 5)\r\n                            " +
                "GROUP BY union_name) b ON a.x = b.x INNER JOIN\r\n                          (SELEC" +
                "T     union_name AS x, COUNT(khana_id) AS y\r\n                            FROM   " +
                "       khana INNER JOIN\r\n                                                   cnc " +
                "ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                       " +
                "            [union] ON cnc.union_id = [union].union_id\r\n                        " +
                "    WHERE      (khana.land_amount BETWEEN 5 AND 24)\r\n                           " +
                " GROUP BY union_name) c ON b.x = c.x INNER JOIN\r\n                          (SELE" +
                "CT     union_name AS x, COUNT(khana_id) AS y\r\n                            FROM  " +
                "        khana INNER JOIN\r\n                                                   cnc" +
                " ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                      " +
                "             [union] ON cnc.union_id = [union].union_id\r\n                       " +
                "     WHERE      (khana.land_amount BETWEEN 25 AND 49)\r\n                         " +
                "   GROUP BY union_name) d ON c.x = d.x INNER JOIN\r\n                          (SE" +
                "LECT     union_name AS x, COUNT(khana_id) AS y\r\n                            FROM" +
                "          khana INNER JOIN\r\n                                                   c" +
                "nc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                    " +
                "               [union] ON cnc.union_id = [union].union_id\r\n                     " +
                "       WHERE      (khana.land_amount BETWEEN 50 AND 99)\r\n                       " +
                "     GROUP BY union_name) e ON d.x = e.x INNER JOIN\r\n                          (" +
                "SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                            FR" +
                "OM          khana INNER JOIN\r\n                                                  " +
                " cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                  " +
                "                 [union] ON cnc.union_id = [union].union_id\r\n                   " +
                "         WHERE      (khana.land_amount BETWEEN 100 AND 149)\r\n                   " +
                "         GROUP BY union_name) f ON e.x = f.x INNER JOIN\r\n                       " +
                "   (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                          " +
                "  FROM          khana INNER JOIN\r\n                                              " +
                "     cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                              " +
                "                     [union] ON cnc.union_id = [union].union_id\r\n               " +
                "             WHERE      (khana.land_amount BETWEEN 150 AND 199)\r\n               " +
                "             GROUP BY union_name) g ON f.x = g.x INNER JOIN\r\n                   " +
                "       (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                      " +
                "      FROM          khana INNER JOIN\r\n                                          " +
                "         cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                          " +
                "                         [union] ON cnc.union_id = [union].union_id\r\n           " +
                "                 WHERE      (khana.land_amount > 200)\r\n                         " +
                "   GROUP BY union_name) h ON g.x = h.x\r\n\r\n\r\n\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table13DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table13DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table13DataTable dataTable = new DataSet2.Table13DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table13ATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table13ATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table13A";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<5000", "<5000");
            tableMapping.ColumnMappings.Add("5000-9999", "5000-9999");
            tableMapping.ColumnMappings.Add("10000-14999", "10000-14999");
            tableMapping.ColumnMappings.Add("15000-19999", "15000-19999");
            tableMapping.ColumnMappings.Add("20000-24999", "20000-24999");
            tableMapping.ColumnMappings.Add("25000-49999", "25000-49999");
            tableMapping.ColumnMappings.Add("50000+", "50000+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nSELECT     a.x AS [union name], a.y AS [<5000], b.y AS [5000-9999], c.y AS [100" +
                "00-14999], d.y AS [15000-19999], e.y AS [20000-24999], f.y AS [25000-49999], \r\n " +
                "                     g.y AS [50000+]\r\nFROM         (SELECT     union_name AS x, " +
                "COUNT(khana_id) AS y\r\n                       FROM          khana INNER JOIN\r\n   " +
                "                                           cnc ON khana.cnc_id = cnc.cnc_id INNE" +
                "R JOIN\r\n                                              [union] ON cnc.union_id = " +
                "[union].union_id\r\n                       WHERE      (khana.land_price < 5000)\r\n " +
                "                      GROUP BY union_name) a INNER JOIN\r\n                       " +
                "   (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                          " +
                "  FROM          khana INNER JOIN\r\n                                              " +
                "     cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                              " +
                "                     [union] ON cnc.union_id = [union].union_id\r\n               " +
                "             WHERE      (khana.land_price BETWEEN 5000 AND 9999)\r\n              " +
                "              GROUP BY union_name) b ON a.x = b.x INNER JOIN\r\n                  " +
                "        (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                     " +
                "       FROM          khana INNER JOIN\r\n                                         " +
                "          cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                         " +
                "                          [union] ON cnc.union_id = [union].union_id\r\n          " +
                "                  WHERE      (khana.land_price BETWEEN 10000 AND 14999)\r\n       " +
                "                     GROUP BY union_name) c ON b.x = c.x INNER JOIN\r\n           " +
                "               (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n              " +
                "              FROM          khana INNER JOIN\r\n                                  " +
                "                 cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                  " +
                "                                 [union] ON cnc.union_id = [union].union_id\r\n   " +
                "                         WHERE      (khana.land_price BETWEEN 15000 AND 19999)\r\n" +
                "                            GROUP BY union_name) d ON c.x = d.x INNER JOIN\r\n    " +
                "                      (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n       " +
                "                     FROM          khana INNER JOIN\r\n                           " +
                "                        cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n           " +
                "                                        [union] ON cnc.union_id = [union].union_" +
                "id\r\n                            WHERE      (khana.land_price BETWEEN 20000 AND 2" +
                "4999)\r\n                            GROUP BY union_name) e ON d.x = e.x INNER JOI" +
                "N\r\n                          (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n" +
                "                            FROM          khana INNER JOIN\r\n                    " +
                "                               cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n    " +
                "                                               [union] ON cnc.union_id = [union]" +
                ".union_id\r\n                            WHERE      (khana.land_price BETWEEN 2500" +
                "0 AND 49999)\r\n                            GROUP BY union_name) f ON e.x = f.x IN" +
                "NER JOIN\r\n                          (SELECT     union_name AS x, COUNT(khana_id)" +
                " AS y\r\n                            FROM          khana INNER JOIN\r\n             " +
                "                                      cnc ON khana.cnc_id = cnc.cnc_id INNER JOI" +
                "N\r\n                                                   [union] ON cnc.union_id = " +
                "[union].union_id\r\n                            WHERE      (khana.land_price > 500" +
                "00)\r\n                            GROUP BY union_name) g ON f.x = g.x";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table13ADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table13ADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table13ADataTable dataTable = new DataSet2.Table13ADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table13BTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table13BTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table13B";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("<5", "<5");
            tableMapping.ColumnMappings.Add("6 - 10", "6 - 10");
            tableMapping.ColumnMappings.Add("11 - 15", "11 - 15");
            tableMapping.ColumnMappings.Add("16+", "16+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nSELECT     a.x AS [union name], a.y AS [<5], b.y AS [6 - 10], c.y AS [11 - 15]," +
                " d.y AS [16+]\r\nFROM         (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n " +
                "                      FROM          khana INNER JOIN\r\n                          " +
                "                    cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n               " +
                "                               [union] ON cnc.union_id = [union].union_id\r\n     " +
                "                  WHERE      (khana.vegitable_land < 5)\r\n                       " +
                "GROUP BY union_name) a INNER JOIN\r\n                          (SELECT     union_n" +
                "ame AS x, COUNT(khana_id) AS y\r\n                            FROM          khana " +
                "INNER JOIN\r\n                                                   cnc ON khana.cnc_" +
                "id = cnc.cnc_id INNER JOIN\r\n                                                   [" +
                "union] ON cnc.union_id = [union].union_id\r\n                            WHERE    " +
                "  (khana.vegitable_land BETWEEN 6 AND 10)\r\n                            GROUP BY " +
                "union_name) b ON a.x = b.x INNER JOIN\r\n                          (SELECT     uni" +
                "on_name AS x, COUNT(khana_id) AS y\r\n                            FROM          kh" +
                "ana INNER JOIN\r\n                                                   cnc ON khana." +
                "cnc_id = cnc.cnc_id INNER JOIN\r\n                                                " +
                "   [union] ON cnc.union_id = [union].union_id\r\n                            WHERE" +
                "      (khana.vegitable_land BETWEEN 11 AND 15)\r\n                            GROU" +
                "P BY union_name) c ON b.x = c.x INNER JOIN\r\n                          (SELECT   " +
                "  union_name AS x, COUNT(khana_id) AS y\r\n                            FROM       " +
                "   khana INNER JOIN\r\n                                                   cnc ON k" +
                "hana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                           " +
                "        [union] ON cnc.union_id = [union].union_id\r\n                            " +
                "WHERE      (khana.vegitable_land > 16)\r\n                            GROUP BY uni" +
                "on_name) d ON c.x = d.x\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "\r\nSELECT     a.x AS [union name], a.y AS [<5], b.y AS [6 - 10], c.y AS [11 - 15]," +
                " d.y AS [16+]\r\nFROM         (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n " +
                "                      FROM          khana INNER JOIN\r\n                          " +
                "                    cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n               " +
                "                               [union] ON cnc.union_id = [union].union_id\r\n     " +
                "                  WHERE      (khana.vegitable_land < 5)\r\n                       " +
                "GROUP BY union_name) a INNER JOIN\r\n                          (SELECT     union_n" +
                "ame AS x, COUNT(khana_id) AS y\r\n                            FROM          khana " +
                "INNER JOIN\r\n                                                   cnc ON khana.cnc_" +
                "id = cnc.cnc_id INNER JOIN\r\n                                                   [" +
                "union] ON cnc.union_id = [union].union_id\r\n                            WHERE    " +
                "  (khana.vegitable_land BETWEEN 6 AND 10)\r\n                            GROUP BY " +
                "union_name) b ON a.x = b.x INNER JOIN\r\n                          (SELECT     uni" +
                "on_name AS x, COUNT(khana_id) AS y\r\n                            FROM          kh" +
                "ana INNER JOIN\r\n                                                   cnc ON khana." +
                "cnc_id = cnc.cnc_id INNER JOIN\r\n                                                " +
                "   [union] ON cnc.union_id = [union].union_id\r\n                            WHERE" +
                "      (khana.vegitable_land BETWEEN 11 AND 15)\r\n                            GROU" +
                "P BY union_name) c ON b.x = c.x INNER JOIN\r\n                          (SELECT   " +
                "  union_name AS x, COUNT(khana_id) AS y\r\n                            FROM       " +
                "   khana INNER JOIN\r\n                                                   cnc ON k" +
                "hana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                           " +
                "        [union] ON cnc.union_id = [union].union_id\r\n                            " +
                "WHERE      (khana.vegitable_land > 16)\r\n                            GROUP BY uni" +
                "on_name) d ON c.x = d.x";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table13BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table13BDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table13BDataTable dataTable = new DataSet2.Table13BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(DataSet2.Table13BDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual DataSet2.Table13BDataTable GetDataBy() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            DataSet2.Table13BDataTable dataTable = new DataSet2.Table13BDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table14CowTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table14CowTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table14Cow";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0-2", "0-2");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.x AS [union name], a.y AS [0-2], b.y AS [3 - 4], c.y AS [4+]
FROM         (SELECT     union_name AS x, COUNT(khana_id) AS y
                       FROM          khana INNER JOIN
                                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                              [union] ON cnc.union_id = [union].union_id
                       WHERE      (khana.cow < 3)
                       GROUP BY union_name) a INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.cow BETWEEN 3 AND 4)
                            GROUP BY union_name) b ON a.x = b.x INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.cow >= 5)
                            GROUP BY union_name) c ON b.x = c.x";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table14CowDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table14CowDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table14CowDataTable dataTable = new DataSet2.Table14CowDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table14GoatTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table14GoatTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table14Goat";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0-2", "0-2");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.x AS [union name], a.y AS [0-2], b.y AS [3 - 4], c.y AS [4+]
FROM         (SELECT     union_name AS x, COUNT(khana_id) AS y
                       FROM          khana INNER JOIN
                                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                              [union] ON cnc.union_id = [union].union_id
                       WHERE      (khana.goat < 3)
                       GROUP BY union_name) a INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.goat BETWEEN 3 AND 4)
                            GROUP BY union_name) b ON a.x = b.x INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.goat >= 5)
                            GROUP BY union_name) c ON b.x = c.x
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table14GoatDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table14GoatDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table14GoatDataTable dataTable = new DataSet2.Table14GoatDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table14HenTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table14HenTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table14Hen";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0-2", "0-2");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.x AS [union name], a.y AS [0-2], b.y AS [3 - 4], c.y AS [4+]
FROM         (SELECT     union_name AS x, COUNT(khana_id) AS y
                       FROM          khana INNER JOIN
                                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                              [union] ON cnc.union_id = [union].union_id
                       WHERE      (khana.hen < 3)
                       GROUP BY union_name) a INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.hen BETWEEN 3 AND 4)
                            GROUP BY union_name) b ON a.x = b.x INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.hen >= 5)
                            GROUP BY union_name) c ON b.x = c.x
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table14HenDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table14HenDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table14HenDataTable dataTable = new DataSet2.Table14HenDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table15TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table15TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table15";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0-2", "0-2");
            tableMapping.ColumnMappings.Add("3 - 4", "3 - 4");
            tableMapping.ColumnMappings.Add("4+", "4+");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     a.x AS [union name], a.y AS [0-2], b.y AS [3 - 4], c.y AS [4+]
FROM         (SELECT     union_name AS x, COUNT(khana_id) AS y
                       FROM          khana INNER JOIN
                                              cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                              [union] ON cnc.union_id = [union].union_id
                       WHERE      (khana.fruit_tree < 3)
                       GROUP BY union_name) a INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.fruit_tree BETWEEN 3 AND 4)
                            GROUP BY union_name) b ON a.x = b.x INNER JOIN
                          (SELECT     union_name AS x, COUNT(khana_id) AS y
                            FROM          khana INNER JOIN
                                                   cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN
                                                   [union] ON cnc.union_id = [union].union_id
                            WHERE      (khana.fruit_tree >= 5)
                            GROUP BY union_name) c ON b.x = c.x
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table15DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table15DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table15DataTable dataTable = new DataSet2.Table15DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Table16TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Table16TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Table16";
            tableMapping.ColumnMappings.Add("union name", "union name");
            tableMapping.ColumnMappings.Add("0 - 3", "0 - 3");
            tableMapping.ColumnMappings.Add("4 - 6", "4 - 6");
            tableMapping.ColumnMappings.Add("7 - 9", "7 - 9");
            tableMapping.ColumnMappings.Add("10 - 11", "10 - 11");
            tableMapping.ColumnMappings.Add("12", "12");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ReportsApplication1.Properties.Settings.Default.baselineConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nSELECT     a.x AS [union name], a.y AS [0 - 3], b.y AS [4 - 6], c.y AS [7 - 9]," +
                " d.y AS [10 - 11] , e.y as [12]\r\nFROM         (SELECT     union_name AS x, COUNT" +
                "(khana_id) AS y\r\n                       FROM          khana INNER JOIN\r\n        " +
                "                                      cnc ON khana.cnc_id = cnc.cnc_id INNER JOI" +
                "N\r\n                                              [union] ON cnc.union_id = [unio" +
                "n].union_id\r\n                       WHERE      (khana.month_covered < 3)\r\n      " +
                "                 GROUP BY union_name) a INNER JOIN\r\n                          (S" +
                "ELECT     union_name AS x, COUNT(khana_id) AS y\r\n                            FRO" +
                "M          khana INNER JOIN\r\n                                                   " +
                "cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                   " +
                "                [union] ON cnc.union_id = [union].union_id\r\n                    " +
                "        WHERE      (khana.month_covered BETWEEN 4 AND 6)\r\n                      " +
                "      GROUP BY union_name) b ON a.x = b.x INNER JOIN\r\n                          " +
                "(SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                            F" +
                "ROM          khana INNER JOIN\r\n                                                 " +
                "  cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                                 " +
                "                  [union] ON cnc.union_id = [union].union_id\r\n                  " +
                "          WHERE      (khana.month_covered BETWEEN 7 AND 9)\r\n                    " +
                "        GROUP BY union_name) c ON b.x = c.x INNER JOIN\r\n                        " +
                "  (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                           " +
                " FROM          khana INNER JOIN\r\n                                               " +
                "    cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                               " +
                "                    [union] ON cnc.union_id = [union].union_id\r\n                " +
                "            WHERE      (khana.month_covered between 10 and 11)\r\n                " +
                "            GROUP BY union_name) d ON c.x = d.x INNER JOIN\r\n                    " +
                "      (SELECT     union_name AS x, COUNT(khana_id) AS y\r\n                       " +
                "     FROM          khana INNER JOIN\r\n                                           " +
                "        cnc ON khana.cnc_id = cnc.cnc_id INNER JOIN\r\n                           " +
                "                        [union] ON cnc.union_id = [union].union_id\r\n            " +
                "                WHERE      (khana.month_covered = 12)\r\n                         " +
                "   GROUP BY union_name) e ON d.x = e.x\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet2.Table16DataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet2.Table16DataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet2.Table16DataTable dataTable = new DataSet2.Table16DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(DataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(DataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(DataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(DataSet2 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591